
Vehicle-Direction-FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  0000402c  000040c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000402c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080022e  0080022e  000041ee  2**0
                  ALLOC
  3 .stab         000034b0  00000000  00000000  000041f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ce  00000000  00000000  000076a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000876e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000890e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000af0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d468  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e2       	ldi	r30, 0x2C	; 44
      a0:	f0 e4       	ldi	r31, 0x40	; 64
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	ae 32       	cpi	r26, 0x2E	; 46
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	12 e0       	ldi	r17, 0x02	; 2
      b0:	ae e2       	ldi	r26, 0x2E	; 46
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	aa 33       	cpi	r26, 0x3A	; 58
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <main>
      c2:	0c 94 14 20 	jmp	0x4028	; 0x4028 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__fixunssfsi>:
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	7b 01       	movw	r14, r22
      d4:	8c 01       	movw	r16, r24
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	5f e4       	ldi	r21, 0x4F	; 79
      de:	0e 94 11 04 	call	0x822	; 0x822 <__gesf2>
      e2:	88 23       	and	r24, r24
      e4:	8c f0       	brlt	.+34     	; 0x108 <__fixunssfsi+0x3e>
      e6:	c8 01       	movw	r24, r16
      e8:	b7 01       	movw	r22, r14
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	5f e4       	ldi	r21, 0x4F	; 79
      f2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__subsf3>
      f6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fixsfsi>
      fa:	9b 01       	movw	r18, r22
      fc:	ac 01       	movw	r20, r24
      fe:	20 50       	subi	r18, 0x00	; 0
     100:	30 40       	sbci	r19, 0x00	; 0
     102:	40 40       	sbci	r20, 0x00	; 0
     104:	50 48       	sbci	r21, 0x80	; 128
     106:	06 c0       	rjmp	.+12     	; 0x114 <__fixunssfsi+0x4a>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fixsfsi>
     110:	9b 01       	movw	r18, r22
     112:	ac 01       	movw	r20, r24
     114:	b9 01       	movw	r22, r18
     116:	ca 01       	movw	r24, r20
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	08 95       	ret

00000122 <_fpadd_parts>:
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e7 e9       	ldi	r30, 0x97	; 151
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <__prologue_saves__>
     12e:	dc 01       	movw	r26, r24
     130:	2b 01       	movw	r4, r22
     132:	fa 01       	movw	r30, r20
     134:	9c 91       	ld	r25, X
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	08 f4       	brcc	.+2      	; 0x13c <_fpadd_parts+0x1a>
     13a:	39 c1       	rjmp	.+626    	; 0x3ae <_fpadd_parts+0x28c>
     13c:	eb 01       	movw	r28, r22
     13e:	88 81       	ld	r24, Y
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	08 f4       	brcc	.+2      	; 0x146 <_fpadd_parts+0x24>
     144:	33 c1       	rjmp	.+614    	; 0x3ac <_fpadd_parts+0x28a>
     146:	94 30       	cpi	r25, 0x04	; 4
     148:	69 f4       	brne	.+26     	; 0x164 <_fpadd_parts+0x42>
     14a:	84 30       	cpi	r24, 0x04	; 4
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x2e>
     14e:	2f c1       	rjmp	.+606    	; 0x3ae <_fpadd_parts+0x28c>
     150:	11 96       	adiw	r26, 0x01	; 1
     152:	9c 91       	ld	r25, X
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	98 17       	cp	r25, r24
     15a:	09 f4       	brne	.+2      	; 0x15e <_fpadd_parts+0x3c>
     15c:	28 c1       	rjmp	.+592    	; 0x3ae <_fpadd_parts+0x28c>
     15e:	ae e0       	ldi	r26, 0x0E	; 14
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	25 c1       	rjmp	.+586    	; 0x3ae <_fpadd_parts+0x28c>
     164:	84 30       	cpi	r24, 0x04	; 4
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x48>
     168:	21 c1       	rjmp	.+578    	; 0x3ac <_fpadd_parts+0x28a>
     16a:	82 30       	cpi	r24, 0x02	; 2
     16c:	a9 f4       	brne	.+42     	; 0x198 <_fpadd_parts+0x76>
     16e:	92 30       	cpi	r25, 0x02	; 2
     170:	09 f0       	breq	.+2      	; 0x174 <_fpadd_parts+0x52>
     172:	1d c1       	rjmp	.+570    	; 0x3ae <_fpadd_parts+0x28c>
     174:	9a 01       	movw	r18, r20
     176:	ad 01       	movw	r20, r26
     178:	88 e0       	ldi	r24, 0x08	; 8
     17a:	ea 01       	movw	r28, r20
     17c:	09 90       	ld	r0, Y+
     17e:	ae 01       	movw	r20, r28
     180:	e9 01       	movw	r28, r18
     182:	09 92       	st	Y+, r0
     184:	9e 01       	movw	r18, r28
     186:	81 50       	subi	r24, 0x01	; 1
     188:	c1 f7       	brne	.-16     	; 0x17a <_fpadd_parts+0x58>
     18a:	e2 01       	movw	r28, r4
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	11 96       	adiw	r26, 0x01	; 1
     190:	9c 91       	ld	r25, X
     192:	89 23       	and	r24, r25
     194:	81 83       	std	Z+1, r24	; 0x01
     196:	08 c1       	rjmp	.+528    	; 0x3a8 <_fpadd_parts+0x286>
     198:	92 30       	cpi	r25, 0x02	; 2
     19a:	09 f4       	brne	.+2      	; 0x19e <_fpadd_parts+0x7c>
     19c:	07 c1       	rjmp	.+526    	; 0x3ac <_fpadd_parts+0x28a>
     19e:	12 96       	adiw	r26, 0x02	; 2
     1a0:	2d 90       	ld	r2, X+
     1a2:	3c 90       	ld	r3, X
     1a4:	13 97       	sbiw	r26, 0x03	; 3
     1a6:	eb 01       	movw	r28, r22
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	9b 81       	ldd	r25, Y+3	; 0x03
     1ac:	14 96       	adiw	r26, 0x04	; 4
     1ae:	ad 90       	ld	r10, X+
     1b0:	bd 90       	ld	r11, X+
     1b2:	cd 90       	ld	r12, X+
     1b4:	dc 90       	ld	r13, X
     1b6:	17 97       	sbiw	r26, 0x07	; 7
     1b8:	ec 80       	ldd	r14, Y+4	; 0x04
     1ba:	fd 80       	ldd	r15, Y+5	; 0x05
     1bc:	0e 81       	ldd	r16, Y+6	; 0x06
     1be:	1f 81       	ldd	r17, Y+7	; 0x07
     1c0:	91 01       	movw	r18, r2
     1c2:	28 1b       	sub	r18, r24
     1c4:	39 0b       	sbc	r19, r25
     1c6:	b9 01       	movw	r22, r18
     1c8:	37 ff       	sbrs	r19, 7
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xb2>
     1cc:	66 27       	eor	r22, r22
     1ce:	77 27       	eor	r23, r23
     1d0:	62 1b       	sub	r22, r18
     1d2:	73 0b       	sbc	r23, r19
     1d4:	60 32       	cpi	r22, 0x20	; 32
     1d6:	71 05       	cpc	r23, r1
     1d8:	0c f0       	brlt	.+2      	; 0x1dc <_fpadd_parts+0xba>
     1da:	61 c0       	rjmp	.+194    	; 0x29e <_fpadd_parts+0x17c>
     1dc:	12 16       	cp	r1, r18
     1de:	13 06       	cpc	r1, r19
     1e0:	6c f5       	brge	.+90     	; 0x23c <_fpadd_parts+0x11a>
     1e2:	37 01       	movw	r6, r14
     1e4:	48 01       	movw	r8, r16
     1e6:	06 2e       	mov	r0, r22
     1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <_fpadd_parts+0xd0>
     1ea:	96 94       	lsr	r9
     1ec:	87 94       	ror	r8
     1ee:	77 94       	ror	r7
     1f0:	67 94       	ror	r6
     1f2:	0a 94       	dec	r0
     1f4:	d2 f7       	brpl	.-12     	; 0x1ea <_fpadd_parts+0xc8>
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <_fpadd_parts+0xe6>
     200:	22 0f       	add	r18, r18
     202:	33 1f       	adc	r19, r19
     204:	44 1f       	adc	r20, r20
     206:	55 1f       	adc	r21, r21
     208:	6a 95       	dec	r22
     20a:	d2 f7       	brpl	.-12     	; 0x200 <_fpadd_parts+0xde>
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	30 40       	sbci	r19, 0x00	; 0
     210:	40 40       	sbci	r20, 0x00	; 0
     212:	50 40       	sbci	r21, 0x00	; 0
     214:	2e 21       	and	r18, r14
     216:	3f 21       	and	r19, r15
     218:	40 23       	and	r20, r16
     21a:	51 23       	and	r21, r17
     21c:	21 15       	cp	r18, r1
     21e:	31 05       	cpc	r19, r1
     220:	41 05       	cpc	r20, r1
     222:	51 05       	cpc	r21, r1
     224:	21 f0       	breq	.+8      	; 0x22e <_fpadd_parts+0x10c>
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	79 01       	movw	r14, r18
     230:	8a 01       	movw	r16, r20
     232:	e6 28       	or	r14, r6
     234:	f7 28       	or	r15, r7
     236:	08 29       	or	r16, r8
     238:	19 29       	or	r17, r9
     23a:	3c c0       	rjmp	.+120    	; 0x2b4 <_fpadd_parts+0x192>
     23c:	23 2b       	or	r18, r19
     23e:	d1 f1       	breq	.+116    	; 0x2b4 <_fpadd_parts+0x192>
     240:	26 0e       	add	r2, r22
     242:	37 1e       	adc	r3, r23
     244:	35 01       	movw	r6, r10
     246:	46 01       	movw	r8, r12
     248:	06 2e       	mov	r0, r22
     24a:	04 c0       	rjmp	.+8      	; 0x254 <_fpadd_parts+0x132>
     24c:	96 94       	lsr	r9
     24e:	87 94       	ror	r8
     250:	77 94       	ror	r7
     252:	67 94       	ror	r6
     254:	0a 94       	dec	r0
     256:	d2 f7       	brpl	.-12     	; 0x24c <_fpadd_parts+0x12a>
     258:	21 e0       	ldi	r18, 0x01	; 1
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	04 c0       	rjmp	.+8      	; 0x26a <_fpadd_parts+0x148>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	44 1f       	adc	r20, r20
     268:	55 1f       	adc	r21, r21
     26a:	6a 95       	dec	r22
     26c:	d2 f7       	brpl	.-12     	; 0x262 <_fpadd_parts+0x140>
     26e:	21 50       	subi	r18, 0x01	; 1
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	40 40       	sbci	r20, 0x00	; 0
     274:	50 40       	sbci	r21, 0x00	; 0
     276:	2a 21       	and	r18, r10
     278:	3b 21       	and	r19, r11
     27a:	4c 21       	and	r20, r12
     27c:	5d 21       	and	r21, r13
     27e:	21 15       	cp	r18, r1
     280:	31 05       	cpc	r19, r1
     282:	41 05       	cpc	r20, r1
     284:	51 05       	cpc	r21, r1
     286:	21 f0       	breq	.+8      	; 0x290 <_fpadd_parts+0x16e>
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	59 01       	movw	r10, r18
     292:	6a 01       	movw	r12, r20
     294:	a6 28       	or	r10, r6
     296:	b7 28       	or	r11, r7
     298:	c8 28       	or	r12, r8
     29a:	d9 28       	or	r13, r9
     29c:	0b c0       	rjmp	.+22     	; 0x2b4 <_fpadd_parts+0x192>
     29e:	82 15       	cp	r24, r2
     2a0:	93 05       	cpc	r25, r3
     2a2:	2c f0       	brlt	.+10     	; 0x2ae <_fpadd_parts+0x18c>
     2a4:	1c 01       	movw	r2, r24
     2a6:	aa 24       	eor	r10, r10
     2a8:	bb 24       	eor	r11, r11
     2aa:	65 01       	movw	r12, r10
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <_fpadd_parts+0x192>
     2ae:	ee 24       	eor	r14, r14
     2b0:	ff 24       	eor	r15, r15
     2b2:	87 01       	movw	r16, r14
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	9c 91       	ld	r25, X
     2b8:	d2 01       	movw	r26, r4
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	8c 91       	ld	r24, X
     2be:	98 17       	cp	r25, r24
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <_fpadd_parts+0x1a2>
     2c2:	45 c0       	rjmp	.+138    	; 0x34e <_fpadd_parts+0x22c>
     2c4:	99 23       	and	r25, r25
     2c6:	39 f0       	breq	.+14     	; 0x2d6 <_fpadd_parts+0x1b4>
     2c8:	a8 01       	movw	r20, r16
     2ca:	97 01       	movw	r18, r14
     2cc:	2a 19       	sub	r18, r10
     2ce:	3b 09       	sbc	r19, r11
     2d0:	4c 09       	sbc	r20, r12
     2d2:	5d 09       	sbc	r21, r13
     2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <_fpadd_parts+0x1c0>
     2d6:	a6 01       	movw	r20, r12
     2d8:	95 01       	movw	r18, r10
     2da:	2e 19       	sub	r18, r14
     2dc:	3f 09       	sbc	r19, r15
     2de:	40 0b       	sbc	r20, r16
     2e0:	51 0b       	sbc	r21, r17
     2e2:	57 fd       	sbrc	r21, 7
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <_fpadd_parts+0x1d4>
     2e6:	11 82       	std	Z+1, r1	; 0x01
     2e8:	33 82       	std	Z+3, r3	; 0x03
     2ea:	22 82       	std	Z+2, r2	; 0x02
     2ec:	24 83       	std	Z+4, r18	; 0x04
     2ee:	35 83       	std	Z+5, r19	; 0x05
     2f0:	46 83       	std	Z+6, r20	; 0x06
     2f2:	57 83       	std	Z+7, r21	; 0x07
     2f4:	1d c0       	rjmp	.+58     	; 0x330 <_fpadd_parts+0x20e>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	81 83       	std	Z+1, r24	; 0x01
     2fa:	33 82       	std	Z+3, r3	; 0x03
     2fc:	22 82       	std	Z+2, r2	; 0x02
     2fe:	88 27       	eor	r24, r24
     300:	99 27       	eor	r25, r25
     302:	dc 01       	movw	r26, r24
     304:	82 1b       	sub	r24, r18
     306:	93 0b       	sbc	r25, r19
     308:	a4 0b       	sbc	r26, r20
     30a:	b5 0b       	sbc	r27, r21
     30c:	84 83       	std	Z+4, r24	; 0x04
     30e:	95 83       	std	Z+5, r25	; 0x05
     310:	a6 83       	std	Z+6, r26	; 0x06
     312:	b7 83       	std	Z+7, r27	; 0x07
     314:	0d c0       	rjmp	.+26     	; 0x330 <_fpadd_parts+0x20e>
     316:	22 0f       	add	r18, r18
     318:	33 1f       	adc	r19, r19
     31a:	44 1f       	adc	r20, r20
     31c:	55 1f       	adc	r21, r21
     31e:	24 83       	std	Z+4, r18	; 0x04
     320:	35 83       	std	Z+5, r19	; 0x05
     322:	46 83       	std	Z+6, r20	; 0x06
     324:	57 83       	std	Z+7, r21	; 0x07
     326:	82 81       	ldd	r24, Z+2	; 0x02
     328:	93 81       	ldd	r25, Z+3	; 0x03
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	82 83       	std	Z+2, r24	; 0x02
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	9f 4f       	sbci	r25, 0xFF	; 255
     346:	af 4f       	sbci	r26, 0xFF	; 255
     348:	bf 43       	sbci	r27, 0x3F	; 63
     34a:	28 f3       	brcs	.-54     	; 0x316 <_fpadd_parts+0x1f4>
     34c:	0b c0       	rjmp	.+22     	; 0x364 <_fpadd_parts+0x242>
     34e:	91 83       	std	Z+1, r25	; 0x01
     350:	33 82       	std	Z+3, r3	; 0x03
     352:	22 82       	std	Z+2, r2	; 0x02
     354:	ea 0c       	add	r14, r10
     356:	fb 1c       	adc	r15, r11
     358:	0c 1d       	adc	r16, r12
     35a:	1d 1d       	adc	r17, r13
     35c:	e4 82       	std	Z+4, r14	; 0x04
     35e:	f5 82       	std	Z+5, r15	; 0x05
     360:	06 83       	std	Z+6, r16	; 0x06
     362:	17 83       	std	Z+7, r17	; 0x07
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	80 83       	st	Z, r24
     368:	24 81       	ldd	r18, Z+4	; 0x04
     36a:	35 81       	ldd	r19, Z+5	; 0x05
     36c:	46 81       	ldd	r20, Z+6	; 0x06
     36e:	57 81       	ldd	r21, Z+7	; 0x07
     370:	57 ff       	sbrs	r21, 7
     372:	1a c0       	rjmp	.+52     	; 0x3a8 <_fpadd_parts+0x286>
     374:	c9 01       	movw	r24, r18
     376:	aa 27       	eor	r26, r26
     378:	97 fd       	sbrc	r25, 7
     37a:	a0 95       	com	r26
     37c:	ba 2f       	mov	r27, r26
     37e:	81 70       	andi	r24, 0x01	; 1
     380:	90 70       	andi	r25, 0x00	; 0
     382:	a0 70       	andi	r26, 0x00	; 0
     384:	b0 70       	andi	r27, 0x00	; 0
     386:	56 95       	lsr	r21
     388:	47 95       	ror	r20
     38a:	37 95       	ror	r19
     38c:	27 95       	ror	r18
     38e:	82 2b       	or	r24, r18
     390:	93 2b       	or	r25, r19
     392:	a4 2b       	or	r26, r20
     394:	b5 2b       	or	r27, r21
     396:	84 83       	std	Z+4, r24	; 0x04
     398:	95 83       	std	Z+5, r25	; 0x05
     39a:	a6 83       	std	Z+6, r26	; 0x06
     39c:	b7 83       	std	Z+7, r27	; 0x07
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	93 81       	ldd	r25, Z+3	; 0x03
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	93 83       	std	Z+3, r25	; 0x03
     3a6:	82 83       	std	Z+2, r24	; 0x02
     3a8:	df 01       	movw	r26, r30
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <_fpadd_parts+0x28c>
     3ac:	d2 01       	movw	r26, r4
     3ae:	cd 01       	movw	r24, r26
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	e2 e1       	ldi	r30, 0x12	; 18
     3b6:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__epilogue_restores__>

000003ba <__subsf3>:
     3ba:	a0 e2       	ldi	r26, 0x20	; 32
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	e3 ee       	ldi	r30, 0xE3	; 227
     3c0:	f1 e0       	ldi	r31, 0x01	; 1
     3c2:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__prologue_saves__+0x18>
     3c6:	69 83       	std	Y+1, r22	; 0x01
     3c8:	7a 83       	std	Y+2, r23	; 0x02
     3ca:	8b 83       	std	Y+3, r24	; 0x03
     3cc:	9c 83       	std	Y+4, r25	; 0x04
     3ce:	2d 83       	std	Y+5, r18	; 0x05
     3d0:	3e 83       	std	Y+6, r19	; 0x06
     3d2:	4f 83       	std	Y+7, r20	; 0x07
     3d4:	58 87       	std	Y+8, r21	; 0x08
     3d6:	e9 e0       	ldi	r30, 0x09	; 9
     3d8:	ee 2e       	mov	r14, r30
     3da:	f1 2c       	mov	r15, r1
     3dc:	ec 0e       	add	r14, r28
     3de:	fd 1e       	adc	r15, r29
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	b7 01       	movw	r22, r14
     3e6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     3ea:	8e 01       	movw	r16, r28
     3ec:	0f 5e       	subi	r16, 0xEF	; 239
     3ee:	1f 4f       	sbci	r17, 0xFF	; 255
     3f0:	ce 01       	movw	r24, r28
     3f2:	05 96       	adiw	r24, 0x05	; 5
     3f4:	b8 01       	movw	r22, r16
     3f6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     3fa:	8a 89       	ldd	r24, Y+18	; 0x12
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	89 27       	eor	r24, r25
     400:	8a 8b       	std	Y+18, r24	; 0x12
     402:	c7 01       	movw	r24, r14
     404:	b8 01       	movw	r22, r16
     406:	ae 01       	movw	r20, r28
     408:	47 5e       	subi	r20, 0xE7	; 231
     40a:	5f 4f       	sbci	r21, 0xFF	; 255
     40c:	0e 94 91 00 	call	0x122	; 0x122 <_fpadd_parts>
     410:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__pack_f>
     414:	a0 96       	adiw	r28, 0x20	; 32
     416:	e6 e0       	ldi	r30, 0x06	; 6
     418:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__epilogue_restores__+0x18>

0000041c <__addsf3>:
     41c:	a0 e2       	ldi	r26, 0x20	; 32
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	e4 e1       	ldi	r30, 0x14	; 20
     422:	f2 e0       	ldi	r31, 0x02	; 2
     424:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__prologue_saves__+0x18>
     428:	69 83       	std	Y+1, r22	; 0x01
     42a:	7a 83       	std	Y+2, r23	; 0x02
     42c:	8b 83       	std	Y+3, r24	; 0x03
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	2d 83       	std	Y+5, r18	; 0x05
     432:	3e 83       	std	Y+6, r19	; 0x06
     434:	4f 83       	std	Y+7, r20	; 0x07
     436:	58 87       	std	Y+8, r21	; 0x08
     438:	f9 e0       	ldi	r31, 0x09	; 9
     43a:	ef 2e       	mov	r14, r31
     43c:	f1 2c       	mov	r15, r1
     43e:	ec 0e       	add	r14, r28
     440:	fd 1e       	adc	r15, r29
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	b7 01       	movw	r22, r14
     448:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     44c:	8e 01       	movw	r16, r28
     44e:	0f 5e       	subi	r16, 0xEF	; 239
     450:	1f 4f       	sbci	r17, 0xFF	; 255
     452:	ce 01       	movw	r24, r28
     454:	05 96       	adiw	r24, 0x05	; 5
     456:	b8 01       	movw	r22, r16
     458:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     45c:	c7 01       	movw	r24, r14
     45e:	b8 01       	movw	r22, r16
     460:	ae 01       	movw	r20, r28
     462:	47 5e       	subi	r20, 0xE7	; 231
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	0e 94 91 00 	call	0x122	; 0x122 <_fpadd_parts>
     46a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__pack_f>
     46e:	a0 96       	adiw	r28, 0x20	; 32
     470:	e6 e0       	ldi	r30, 0x06	; 6
     472:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__epilogue_restores__+0x18>

00000476 <__mulsf3>:
     476:	a0 e2       	ldi	r26, 0x20	; 32
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	e1 e4       	ldi	r30, 0x41	; 65
     47c:	f2 e0       	ldi	r31, 0x02	; 2
     47e:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <__prologue_saves__>
     482:	69 83       	std	Y+1, r22	; 0x01
     484:	7a 83       	std	Y+2, r23	; 0x02
     486:	8b 83       	std	Y+3, r24	; 0x03
     488:	9c 83       	std	Y+4, r25	; 0x04
     48a:	2d 83       	std	Y+5, r18	; 0x05
     48c:	3e 83       	std	Y+6, r19	; 0x06
     48e:	4f 83       	std	Y+7, r20	; 0x07
     490:	58 87       	std	Y+8, r21	; 0x08
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	be 01       	movw	r22, r28
     498:	67 5f       	subi	r22, 0xF7	; 247
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     4a0:	ce 01       	movw	r24, r28
     4a2:	05 96       	adiw	r24, 0x05	; 5
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5e       	subi	r22, 0xEF	; 239
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     4ae:	99 85       	ldd	r25, Y+9	; 0x09
     4b0:	92 30       	cpi	r25, 0x02	; 2
     4b2:	88 f0       	brcs	.+34     	; 0x4d6 <__mulsf3+0x60>
     4b4:	89 89       	ldd	r24, Y+17	; 0x11
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	c8 f0       	brcs	.+50     	; 0x4ec <__mulsf3+0x76>
     4ba:	94 30       	cpi	r25, 0x04	; 4
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <__mulsf3+0x4e>
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	51 f4       	brne	.+20     	; 0x4d6 <__mulsf3+0x60>
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__mulsf3+0x56>
     4c4:	84 30       	cpi	r24, 0x04	; 4
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <__mulsf3+0x5c>
     4c8:	92 30       	cpi	r25, 0x02	; 2
     4ca:	81 f4       	brne	.+32     	; 0x4ec <__mulsf3+0x76>
     4cc:	8e e0       	ldi	r24, 0x0E	; 14
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	c6 c0       	rjmp	.+396    	; 0x65e <__mulsf3+0x1e8>
     4d2:	92 30       	cpi	r25, 0x02	; 2
     4d4:	49 f4       	brne	.+18     	; 0x4e8 <__mulsf3+0x72>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4da:	8a 89       	ldd	r24, Y+18	; 0x12
     4dc:	98 13       	cpse	r25, r24
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	2a 87       	std	Y+10, r18	; 0x0a
     4e2:	ce 01       	movw	r24, r28
     4e4:	09 96       	adiw	r24, 0x09	; 9
     4e6:	bb c0       	rjmp	.+374    	; 0x65e <__mulsf3+0x1e8>
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	49 f4       	brne	.+18     	; 0x4fe <__mulsf3+0x88>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f0:	8a 89       	ldd	r24, Y+18	; 0x12
     4f2:	98 13       	cpse	r25, r24
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	2a 8b       	std	Y+18, r18	; 0x12
     4f8:	ce 01       	movw	r24, r28
     4fa:	41 96       	adiw	r24, 0x11	; 17
     4fc:	b0 c0       	rjmp	.+352    	; 0x65e <__mulsf3+0x1e8>
     4fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     500:	3e 84       	ldd	r3, Y+14	; 0x0e
     502:	4f 84       	ldd	r4, Y+15	; 0x0f
     504:	58 88       	ldd	r5, Y+16	; 0x10
     506:	6d 88       	ldd	r6, Y+21	; 0x15
     508:	7e 88       	ldd	r7, Y+22	; 0x16
     50a:	8f 88       	ldd	r8, Y+23	; 0x17
     50c:	98 8c       	ldd	r9, Y+24	; 0x18
     50e:	ee 24       	eor	r14, r14
     510:	ff 24       	eor	r15, r15
     512:	87 01       	movw	r16, r14
     514:	aa 24       	eor	r10, r10
     516:	bb 24       	eor	r11, r11
     518:	65 01       	movw	r12, r10
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	c1 01       	movw	r24, r2
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	e9 f0       	breq	.+58     	; 0x56a <__mulsf3+0xf4>
     530:	e6 0c       	add	r14, r6
     532:	f7 1c       	adc	r15, r7
     534:	08 1d       	adc	r16, r8
     536:	19 1d       	adc	r17, r9
     538:	9a 01       	movw	r18, r20
     53a:	ab 01       	movw	r20, r22
     53c:	2a 0d       	add	r18, r10
     53e:	3b 1d       	adc	r19, r11
     540:	4c 1d       	adc	r20, r12
     542:	5d 1d       	adc	r21, r13
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	e6 14       	cp	r14, r6
     54e:	f7 04       	cpc	r15, r7
     550:	08 05       	cpc	r16, r8
     552:	19 05       	cpc	r17, r9
     554:	20 f4       	brcc	.+8      	; 0x55e <__mulsf3+0xe8>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	a0 e0       	ldi	r26, 0x00	; 0
     55c:	b0 e0       	ldi	r27, 0x00	; 0
     55e:	ba 01       	movw	r22, r20
     560:	a9 01       	movw	r20, r18
     562:	48 0f       	add	r20, r24
     564:	59 1f       	adc	r21, r25
     566:	6a 1f       	adc	r22, r26
     568:	7b 1f       	adc	r23, r27
     56a:	aa 0c       	add	r10, r10
     56c:	bb 1c       	adc	r11, r11
     56e:	cc 1c       	adc	r12, r12
     570:	dd 1c       	adc	r13, r13
     572:	97 fe       	sbrs	r9, 7
     574:	08 c0       	rjmp	.+16     	; 0x586 <__mulsf3+0x110>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	a8 2a       	or	r10, r24
     580:	b9 2a       	or	r11, r25
     582:	ca 2a       	or	r12, r26
     584:	db 2a       	or	r13, r27
     586:	31 96       	adiw	r30, 0x01	; 1
     588:	e0 32       	cpi	r30, 0x20	; 32
     58a:	f1 05       	cpc	r31, r1
     58c:	49 f0       	breq	.+18     	; 0x5a0 <__mulsf3+0x12a>
     58e:	66 0c       	add	r6, r6
     590:	77 1c       	adc	r7, r7
     592:	88 1c       	adc	r8, r8
     594:	99 1c       	adc	r9, r9
     596:	56 94       	lsr	r5
     598:	47 94       	ror	r4
     59a:	37 94       	ror	r3
     59c:	27 94       	ror	r2
     59e:	c3 cf       	rjmp	.-122    	; 0x526 <__mulsf3+0xb0>
     5a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a2:	ea 89       	ldd	r30, Y+18	; 0x12
     5a4:	2b 89       	ldd	r18, Y+19	; 0x13
     5a6:	3c 89       	ldd	r19, Y+20	; 0x14
     5a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ac:	28 0f       	add	r18, r24
     5ae:	39 1f       	adc	r19, r25
     5b0:	2e 5f       	subi	r18, 0xFE	; 254
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	17 c0       	rjmp	.+46     	; 0x5e4 <__mulsf3+0x16e>
     5b6:	ca 01       	movw	r24, r20
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	90 70       	andi	r25, 0x00	; 0
     5bc:	89 2b       	or	r24, r25
     5be:	61 f0       	breq	.+24     	; 0x5d8 <__mulsf3+0x162>
     5c0:	16 95       	lsr	r17
     5c2:	07 95       	ror	r16
     5c4:	f7 94       	ror	r15
     5c6:	e7 94       	ror	r14
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b0 e8       	ldi	r27, 0x80	; 128
     5d0:	e8 2a       	or	r14, r24
     5d2:	f9 2a       	or	r15, r25
     5d4:	0a 2b       	or	r16, r26
     5d6:	1b 2b       	or	r17, r27
     5d8:	76 95       	lsr	r23
     5da:	67 95       	ror	r22
     5dc:	57 95       	ror	r21
     5de:	47 95       	ror	r20
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	77 fd       	sbrc	r23, 7
     5e6:	e7 cf       	rjmp	.-50     	; 0x5b6 <__mulsf3+0x140>
     5e8:	0c c0       	rjmp	.+24     	; 0x602 <__mulsf3+0x18c>
     5ea:	44 0f       	add	r20, r20
     5ec:	55 1f       	adc	r21, r21
     5ee:	66 1f       	adc	r22, r22
     5f0:	77 1f       	adc	r23, r23
     5f2:	17 fd       	sbrc	r17, 7
     5f4:	41 60       	ori	r20, 0x01	; 1
     5f6:	ee 0c       	add	r14, r14
     5f8:	ff 1c       	adc	r15, r15
     5fa:	00 1f       	adc	r16, r16
     5fc:	11 1f       	adc	r17, r17
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	30 40       	sbci	r19, 0x00	; 0
     602:	40 30       	cpi	r20, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	59 07       	cpc	r21, r25
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	69 07       	cpc	r22, r25
     60c:	90 e4       	ldi	r25, 0x40	; 64
     60e:	79 07       	cpc	r23, r25
     610:	60 f3       	brcs	.-40     	; 0x5ea <__mulsf3+0x174>
     612:	2b 8f       	std	Y+27, r18	; 0x1b
     614:	3c 8f       	std	Y+28, r19	; 0x1c
     616:	db 01       	movw	r26, r22
     618:	ca 01       	movw	r24, r20
     61a:	8f 77       	andi	r24, 0x7F	; 127
     61c:	90 70       	andi	r25, 0x00	; 0
     61e:	a0 70       	andi	r26, 0x00	; 0
     620:	b0 70       	andi	r27, 0x00	; 0
     622:	80 34       	cpi	r24, 0x40	; 64
     624:	91 05       	cpc	r25, r1
     626:	a1 05       	cpc	r26, r1
     628:	b1 05       	cpc	r27, r1
     62a:	61 f4       	brne	.+24     	; 0x644 <__mulsf3+0x1ce>
     62c:	47 fd       	sbrc	r20, 7
     62e:	0a c0       	rjmp	.+20     	; 0x644 <__mulsf3+0x1ce>
     630:	e1 14       	cp	r14, r1
     632:	f1 04       	cpc	r15, r1
     634:	01 05       	cpc	r16, r1
     636:	11 05       	cpc	r17, r1
     638:	29 f0       	breq	.+10     	; 0x644 <__mulsf3+0x1ce>
     63a:	40 5c       	subi	r20, 0xC0	; 192
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	6f 4f       	sbci	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	40 78       	andi	r20, 0x80	; 128
     644:	1a 8e       	std	Y+26, r1	; 0x1a
     646:	fe 17       	cp	r31, r30
     648:	11 f0       	breq	.+4      	; 0x64e <__mulsf3+0x1d8>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	8a 8f       	std	Y+26, r24	; 0x1a
     64e:	4d 8f       	std	Y+29, r20	; 0x1d
     650:	5e 8f       	std	Y+30, r21	; 0x1e
     652:	6f 8f       	std	Y+31, r22	; 0x1f
     654:	78 a3       	std	Y+32, r23	; 0x20
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	89 8f       	std	Y+25, r24	; 0x19
     65a:	ce 01       	movw	r24, r28
     65c:	49 96       	adiw	r24, 0x19	; 25
     65e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__pack_f>
     662:	a0 96       	adiw	r28, 0x20	; 32
     664:	e2 e1       	ldi	r30, 0x12	; 18
     666:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__epilogue_restores__>

0000066a <__divsf3>:
     66a:	a8 e1       	ldi	r26, 0x18	; 24
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	eb e3       	ldi	r30, 0x3B	; 59
     670:	f3 e0       	ldi	r31, 0x03	; 3
     672:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__prologue_saves__+0x10>
     676:	69 83       	std	Y+1, r22	; 0x01
     678:	7a 83       	std	Y+2, r23	; 0x02
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	9c 83       	std	Y+4, r25	; 0x04
     67e:	2d 83       	std	Y+5, r18	; 0x05
     680:	3e 83       	std	Y+6, r19	; 0x06
     682:	4f 83       	std	Y+7, r20	; 0x07
     684:	58 87       	std	Y+8, r21	; 0x08
     686:	b9 e0       	ldi	r27, 0x09	; 9
     688:	eb 2e       	mov	r14, r27
     68a:	f1 2c       	mov	r15, r1
     68c:	ec 0e       	add	r14, r28
     68e:	fd 1e       	adc	r15, r29
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	b7 01       	movw	r22, r14
     696:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5e       	subi	r16, 0xEF	; 239
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	b8 01       	movw	r22, r16
     6a6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     6aa:	29 85       	ldd	r18, Y+9	; 0x09
     6ac:	22 30       	cpi	r18, 0x02	; 2
     6ae:	08 f4       	brcc	.+2      	; 0x6b2 <__divsf3+0x48>
     6b0:	7e c0       	rjmp	.+252    	; 0x7ae <__divsf3+0x144>
     6b2:	39 89       	ldd	r19, Y+17	; 0x11
     6b4:	32 30       	cpi	r19, 0x02	; 2
     6b6:	10 f4       	brcc	.+4      	; 0x6bc <__divsf3+0x52>
     6b8:	b8 01       	movw	r22, r16
     6ba:	7c c0       	rjmp	.+248    	; 0x7b4 <__divsf3+0x14a>
     6bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     6be:	9a 89       	ldd	r25, Y+18	; 0x12
     6c0:	89 27       	eor	r24, r25
     6c2:	8a 87       	std	Y+10, r24	; 0x0a
     6c4:	24 30       	cpi	r18, 0x04	; 4
     6c6:	11 f0       	breq	.+4      	; 0x6cc <__divsf3+0x62>
     6c8:	22 30       	cpi	r18, 0x02	; 2
     6ca:	31 f4       	brne	.+12     	; 0x6d8 <__divsf3+0x6e>
     6cc:	23 17       	cp	r18, r19
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <__divsf3+0x68>
     6d0:	6e c0       	rjmp	.+220    	; 0x7ae <__divsf3+0x144>
     6d2:	6e e0       	ldi	r22, 0x0E	; 14
     6d4:	71 e0       	ldi	r23, 0x01	; 1
     6d6:	6e c0       	rjmp	.+220    	; 0x7b4 <__divsf3+0x14a>
     6d8:	34 30       	cpi	r19, 0x04	; 4
     6da:	39 f4       	brne	.+14     	; 0x6ea <__divsf3+0x80>
     6dc:	1d 86       	std	Y+13, r1	; 0x0d
     6de:	1e 86       	std	Y+14, r1	; 0x0e
     6e0:	1f 86       	std	Y+15, r1	; 0x0f
     6e2:	18 8a       	std	Y+16, r1	; 0x10
     6e4:	1c 86       	std	Y+12, r1	; 0x0c
     6e6:	1b 86       	std	Y+11, r1	; 0x0b
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__divsf3+0x88>
     6ea:	32 30       	cpi	r19, 0x02	; 2
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <__divsf3+0x8c>
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	89 87       	std	Y+9, r24	; 0x09
     6f2:	b7 01       	movw	r22, r14
     6f4:	5f c0       	rjmp	.+190    	; 0x7b4 <__divsf3+0x14a>
     6f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     6f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fa:	8b 89       	ldd	r24, Y+19	; 0x13
     6fc:	9c 89       	ldd	r25, Y+20	; 0x14
     6fe:	28 1b       	sub	r18, r24
     700:	39 0b       	sbc	r19, r25
     702:	3c 87       	std	Y+12, r19	; 0x0c
     704:	2b 87       	std	Y+11, r18	; 0x0b
     706:	ed 84       	ldd	r14, Y+13	; 0x0d
     708:	fe 84       	ldd	r15, Y+14	; 0x0e
     70a:	0f 85       	ldd	r16, Y+15	; 0x0f
     70c:	18 89       	ldd	r17, Y+16	; 0x10
     70e:	ad 88       	ldd	r10, Y+21	; 0x15
     710:	be 88       	ldd	r11, Y+22	; 0x16
     712:	cf 88       	ldd	r12, Y+23	; 0x17
     714:	d8 8c       	ldd	r13, Y+24	; 0x18
     716:	ea 14       	cp	r14, r10
     718:	fb 04       	cpc	r15, r11
     71a:	0c 05       	cpc	r16, r12
     71c:	1d 05       	cpc	r17, r13
     71e:	40 f4       	brcc	.+16     	; 0x730 <__divsf3+0xc6>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	30 40       	sbci	r19, 0x00	; 0
     72c:	3c 87       	std	Y+12, r19	; 0x0c
     72e:	2b 87       	std	Y+11, r18	; 0x0b
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	a0 e0       	ldi	r26, 0x00	; 0
     73e:	b0 e4       	ldi	r27, 0x40	; 64
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	ea 14       	cp	r14, r10
     746:	fb 04       	cpc	r15, r11
     748:	0c 05       	cpc	r16, r12
     74a:	1d 05       	cpc	r17, r13
     74c:	40 f0       	brcs	.+16     	; 0x75e <__divsf3+0xf4>
     74e:	28 2b       	or	r18, r24
     750:	39 2b       	or	r19, r25
     752:	4a 2b       	or	r20, r26
     754:	5b 2b       	or	r21, r27
     756:	ea 18       	sub	r14, r10
     758:	fb 08       	sbc	r15, r11
     75a:	0c 09       	sbc	r16, r12
     75c:	1d 09       	sbc	r17, r13
     75e:	b6 95       	lsr	r27
     760:	a7 95       	ror	r26
     762:	97 95       	ror	r25
     764:	87 95       	ror	r24
     766:	ee 0c       	add	r14, r14
     768:	ff 1c       	adc	r15, r15
     76a:	00 1f       	adc	r16, r16
     76c:	11 1f       	adc	r17, r17
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	6f 31       	cpi	r22, 0x1F	; 31
     774:	71 05       	cpc	r23, r1
     776:	31 f7       	brne	.-52     	; 0x744 <__divsf3+0xda>
     778:	da 01       	movw	r26, r20
     77a:	c9 01       	movw	r24, r18
     77c:	8f 77       	andi	r24, 0x7F	; 127
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	a0 70       	andi	r26, 0x00	; 0
     782:	b0 70       	andi	r27, 0x00	; 0
     784:	80 34       	cpi	r24, 0x40	; 64
     786:	91 05       	cpc	r25, r1
     788:	a1 05       	cpc	r26, r1
     78a:	b1 05       	cpc	r27, r1
     78c:	61 f4       	brne	.+24     	; 0x7a6 <__divsf3+0x13c>
     78e:	27 fd       	sbrc	r18, 7
     790:	0a c0       	rjmp	.+20     	; 0x7a6 <__divsf3+0x13c>
     792:	e1 14       	cp	r14, r1
     794:	f1 04       	cpc	r15, r1
     796:	01 05       	cpc	r16, r1
     798:	11 05       	cpc	r17, r1
     79a:	29 f0       	breq	.+10     	; 0x7a6 <__divsf3+0x13c>
     79c:	20 5c       	subi	r18, 0xC0	; 192
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	4f 4f       	sbci	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	20 78       	andi	r18, 0x80	; 128
     7a6:	2d 87       	std	Y+13, r18	; 0x0d
     7a8:	3e 87       	std	Y+14, r19	; 0x0e
     7aa:	4f 87       	std	Y+15, r20	; 0x0f
     7ac:	58 8b       	std	Y+16, r21	; 0x10
     7ae:	be 01       	movw	r22, r28
     7b0:	67 5f       	subi	r22, 0xF7	; 247
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	cb 01       	movw	r24, r22
     7b6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__pack_f>
     7ba:	68 96       	adiw	r28, 0x18	; 24
     7bc:	ea e0       	ldi	r30, 0x0A	; 10
     7be:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <__epilogue_restores__+0x10>

000007c2 <__gtsf2>:
     7c2:	a8 e1       	ldi	r26, 0x18	; 24
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e7 ee       	ldi	r30, 0xE7	; 231
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__prologue_saves__+0x18>
     7ce:	69 83       	std	Y+1, r22	; 0x01
     7d0:	7a 83       	std	Y+2, r23	; 0x02
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	9c 83       	std	Y+4, r25	; 0x04
     7d6:	2d 83       	std	Y+5, r18	; 0x05
     7d8:	3e 83       	std	Y+6, r19	; 0x06
     7da:	4f 83       	std	Y+7, r20	; 0x07
     7dc:	58 87       	std	Y+8, r21	; 0x08
     7de:	89 e0       	ldi	r24, 0x09	; 9
     7e0:	e8 2e       	mov	r14, r24
     7e2:	f1 2c       	mov	r15, r1
     7e4:	ec 0e       	add	r14, r28
     7e6:	fd 1e       	adc	r15, r29
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	b7 01       	movw	r22, r14
     7ee:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     7f2:	8e 01       	movw	r16, r28
     7f4:	0f 5e       	subi	r16, 0xEF	; 239
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	05 96       	adiw	r24, 0x05	; 5
     7fc:	b8 01       	movw	r22, r16
     7fe:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	40 f0       	brcs	.+16     	; 0x818 <__gtsf2+0x56>
     808:	89 89       	ldd	r24, Y+17	; 0x11
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	28 f0       	brcs	.+10     	; 0x818 <__gtsf2+0x56>
     80e:	c7 01       	movw	r24, r14
     810:	b8 01       	movw	r22, r16
     812:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fpcmp_parts_f>
     816:	01 c0       	rjmp	.+2      	; 0x81a <__gtsf2+0x58>
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	68 96       	adiw	r28, 0x18	; 24
     81c:	e6 e0       	ldi	r30, 0x06	; 6
     81e:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__epilogue_restores__+0x18>

00000822 <__gesf2>:
     822:	a8 e1       	ldi	r26, 0x18	; 24
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e7 e1       	ldi	r30, 0x17	; 23
     828:	f4 e0       	ldi	r31, 0x04	; 4
     82a:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__prologue_saves__+0x18>
     82e:	69 83       	std	Y+1, r22	; 0x01
     830:	7a 83       	std	Y+2, r23	; 0x02
     832:	8b 83       	std	Y+3, r24	; 0x03
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	2d 83       	std	Y+5, r18	; 0x05
     838:	3e 83       	std	Y+6, r19	; 0x06
     83a:	4f 83       	std	Y+7, r20	; 0x07
     83c:	58 87       	std	Y+8, r21	; 0x08
     83e:	89 e0       	ldi	r24, 0x09	; 9
     840:	e8 2e       	mov	r14, r24
     842:	f1 2c       	mov	r15, r1
     844:	ec 0e       	add	r14, r28
     846:	fd 1e       	adc	r15, r29
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	b7 01       	movw	r22, r14
     84e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     852:	8e 01       	movw	r16, r28
     854:	0f 5e       	subi	r16, 0xEF	; 239
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	ce 01       	movw	r24, r28
     85a:	05 96       	adiw	r24, 0x05	; 5
     85c:	b8 01       	movw	r22, r16
     85e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     862:	89 85       	ldd	r24, Y+9	; 0x09
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	40 f0       	brcs	.+16     	; 0x878 <__gesf2+0x56>
     868:	89 89       	ldd	r24, Y+17	; 0x11
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	28 f0       	brcs	.+10     	; 0x878 <__gesf2+0x56>
     86e:	c7 01       	movw	r24, r14
     870:	b8 01       	movw	r22, r16
     872:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fpcmp_parts_f>
     876:	01 c0       	rjmp	.+2      	; 0x87a <__gesf2+0x58>
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	68 96       	adiw	r28, 0x18	; 24
     87c:	e6 e0       	ldi	r30, 0x06	; 6
     87e:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__epilogue_restores__+0x18>

00000882 <__ltsf2>:
     882:	a8 e1       	ldi	r26, 0x18	; 24
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	e7 e4       	ldi	r30, 0x47	; 71
     888:	f4 e0       	ldi	r31, 0x04	; 4
     88a:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__prologue_saves__+0x18>
     88e:	69 83       	std	Y+1, r22	; 0x01
     890:	7a 83       	std	Y+2, r23	; 0x02
     892:	8b 83       	std	Y+3, r24	; 0x03
     894:	9c 83       	std	Y+4, r25	; 0x04
     896:	2d 83       	std	Y+5, r18	; 0x05
     898:	3e 83       	std	Y+6, r19	; 0x06
     89a:	4f 83       	std	Y+7, r20	; 0x07
     89c:	58 87       	std	Y+8, r21	; 0x08
     89e:	89 e0       	ldi	r24, 0x09	; 9
     8a0:	e8 2e       	mov	r14, r24
     8a2:	f1 2c       	mov	r15, r1
     8a4:	ec 0e       	add	r14, r28
     8a6:	fd 1e       	adc	r15, r29
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	b7 01       	movw	r22, r14
     8ae:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     8b2:	8e 01       	movw	r16, r28
     8b4:	0f 5e       	subi	r16, 0xEF	; 239
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	ce 01       	movw	r24, r28
     8ba:	05 96       	adiw	r24, 0x05	; 5
     8bc:	b8 01       	movw	r22, r16
     8be:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     8c2:	89 85       	ldd	r24, Y+9	; 0x09
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	40 f0       	brcs	.+16     	; 0x8d8 <__ltsf2+0x56>
     8c8:	89 89       	ldd	r24, Y+17	; 0x11
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	28 f0       	brcs	.+10     	; 0x8d8 <__ltsf2+0x56>
     8ce:	c7 01       	movw	r24, r14
     8d0:	b8 01       	movw	r22, r16
     8d2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fpcmp_parts_f>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <__ltsf2+0x58>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	68 96       	adiw	r28, 0x18	; 24
     8dc:	e6 e0       	ldi	r30, 0x06	; 6
     8de:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__epilogue_restores__+0x18>

000008e2 <__fixsfsi>:
     8e2:	ac e0       	ldi	r26, 0x0C	; 12
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e7 e7       	ldi	r30, 0x77	; 119
     8e8:	f4 e0       	ldi	r31, 0x04	; 4
     8ea:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__prologue_saves__+0x20>
     8ee:	69 83       	std	Y+1, r22	; 0x01
     8f0:	7a 83       	std	Y+2, r23	; 0x02
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	be 01       	movw	r22, r28
     8fc:	6b 5f       	subi	r22, 0xFB	; 251
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__unpack_f>
     904:	8d 81       	ldd	r24, Y+5	; 0x05
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	61 f1       	breq	.+88     	; 0x962 <__fixsfsi+0x80>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	50 f1       	brcs	.+84     	; 0x962 <__fixsfsi+0x80>
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	21 f4       	brne	.+8      	; 0x91a <__fixsfsi+0x38>
     912:	8e 81       	ldd	r24, Y+6	; 0x06
     914:	88 23       	and	r24, r24
     916:	51 f1       	breq	.+84     	; 0x96c <__fixsfsi+0x8a>
     918:	2e c0       	rjmp	.+92     	; 0x976 <__fixsfsi+0x94>
     91a:	2f 81       	ldd	r18, Y+7	; 0x07
     91c:	38 85       	ldd	r19, Y+8	; 0x08
     91e:	37 fd       	sbrc	r19, 7
     920:	20 c0       	rjmp	.+64     	; 0x962 <__fixsfsi+0x80>
     922:	6e 81       	ldd	r22, Y+6	; 0x06
     924:	2f 31       	cpi	r18, 0x1F	; 31
     926:	31 05       	cpc	r19, r1
     928:	1c f0       	brlt	.+6      	; 0x930 <__fixsfsi+0x4e>
     92a:	66 23       	and	r22, r22
     92c:	f9 f0       	breq	.+62     	; 0x96c <__fixsfsi+0x8a>
     92e:	23 c0       	rjmp	.+70     	; 0x976 <__fixsfsi+0x94>
     930:	8e e1       	ldi	r24, 0x1E	; 30
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	82 1b       	sub	r24, r18
     936:	93 0b       	sbc	r25, r19
     938:	29 85       	ldd	r18, Y+9	; 0x09
     93a:	3a 85       	ldd	r19, Y+10	; 0x0a
     93c:	4b 85       	ldd	r20, Y+11	; 0x0b
     93e:	5c 85       	ldd	r21, Y+12	; 0x0c
     940:	04 c0       	rjmp	.+8      	; 0x94a <__fixsfsi+0x68>
     942:	56 95       	lsr	r21
     944:	47 95       	ror	r20
     946:	37 95       	ror	r19
     948:	27 95       	ror	r18
     94a:	8a 95       	dec	r24
     94c:	d2 f7       	brpl	.-12     	; 0x942 <__fixsfsi+0x60>
     94e:	66 23       	and	r22, r22
     950:	b1 f0       	breq	.+44     	; 0x97e <__fixsfsi+0x9c>
     952:	50 95       	com	r21
     954:	40 95       	com	r20
     956:	30 95       	com	r19
     958:	21 95       	neg	r18
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	4f 4f       	sbci	r20, 0xFF	; 255
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	0e c0       	rjmp	.+28     	; 0x97e <__fixsfsi+0x9c>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	09 c0       	rjmp	.+18     	; 0x97e <__fixsfsi+0x9c>
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	3f ef       	ldi	r19, 0xFF	; 255
     970:	4f ef       	ldi	r20, 0xFF	; 255
     972:	5f e7       	ldi	r21, 0x7F	; 127
     974:	04 c0       	rjmp	.+8      	; 0x97e <__fixsfsi+0x9c>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e8       	ldi	r21, 0x80	; 128
     97e:	b9 01       	movw	r22, r18
     980:	ca 01       	movw	r24, r20
     982:	2c 96       	adiw	r28, 0x0c	; 12
     984:	e2 e0       	ldi	r30, 0x02	; 2
     986:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__epilogue_restores__+0x20>

0000098a <__floatunsisf>:
     98a:	a8 e0       	ldi	r26, 0x08	; 8
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	eb ec       	ldi	r30, 0xCB	; 203
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__prologue_saves__+0x10>
     996:	7b 01       	movw	r14, r22
     998:	8c 01       	movw	r16, r24
     99a:	61 15       	cp	r22, r1
     99c:	71 05       	cpc	r23, r1
     99e:	81 05       	cpc	r24, r1
     9a0:	91 05       	cpc	r25, r1
     9a2:	19 f4       	brne	.+6      	; 0x9aa <__floatunsisf+0x20>
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	60 c0       	rjmp	.+192    	; 0xa6a <__floatunsisf+0xe0>
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	8e e1       	ldi	r24, 0x1E	; 30
     9b0:	c8 2e       	mov	r12, r24
     9b2:	d1 2c       	mov	r13, r1
     9b4:	dc 82       	std	Y+4, r13	; 0x04
     9b6:	cb 82       	std	Y+3, r12	; 0x03
     9b8:	ed 82       	std	Y+5, r14	; 0x05
     9ba:	fe 82       	std	Y+6, r15	; 0x06
     9bc:	0f 83       	std	Y+7, r16	; 0x07
     9be:	18 87       	std	Y+8, r17	; 0x08
     9c0:	c8 01       	movw	r24, r16
     9c2:	b7 01       	movw	r22, r14
     9c4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__clzsi2>
     9c8:	fc 01       	movw	r30, r24
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	f7 ff       	sbrs	r31, 7
     9ce:	3b c0       	rjmp	.+118    	; 0xa46 <__floatunsisf+0xbc>
     9d0:	22 27       	eor	r18, r18
     9d2:	33 27       	eor	r19, r19
     9d4:	2e 1b       	sub	r18, r30
     9d6:	3f 0b       	sbc	r19, r31
     9d8:	57 01       	movw	r10, r14
     9da:	68 01       	movw	r12, r16
     9dc:	02 2e       	mov	r0, r18
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__floatunsisf+0x5e>
     9e0:	d6 94       	lsr	r13
     9e2:	c7 94       	ror	r12
     9e4:	b7 94       	ror	r11
     9e6:	a7 94       	ror	r10
     9e8:	0a 94       	dec	r0
     9ea:	d2 f7       	brpl	.-12     	; 0x9e0 <__floatunsisf+0x56>
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__floatunsisf+0x7c>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	aa 1f       	adc	r26, r26
     a04:	bb 1f       	adc	r27, r27
     a06:	2a 95       	dec	r18
     a08:	d2 f7       	brpl	.-12     	; 0x9fe <__floatunsisf+0x74>
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	a1 09       	sbc	r26, r1
     a0e:	b1 09       	sbc	r27, r1
     a10:	8e 21       	and	r24, r14
     a12:	9f 21       	and	r25, r15
     a14:	a0 23       	and	r26, r16
     a16:	b1 23       	and	r27, r17
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	a1 05       	cpc	r26, r1
     a1c:	b1 05       	cpc	r27, r1
     a1e:	21 f0       	breq	.+8      	; 0xa28 <__floatunsisf+0x9e>
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	4a 29       	or	r20, r10
     a2a:	5b 29       	or	r21, r11
     a2c:	6c 29       	or	r22, r12
     a2e:	7d 29       	or	r23, r13
     a30:	4d 83       	std	Y+5, r20	; 0x05
     a32:	5e 83       	std	Y+6, r21	; 0x06
     a34:	6f 83       	std	Y+7, r22	; 0x07
     a36:	78 87       	std	Y+8, r23	; 0x08
     a38:	8e e1       	ldi	r24, 0x1E	; 30
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	8e 1b       	sub	r24, r30
     a3e:	9f 0b       	sbc	r25, r31
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	12 c0       	rjmp	.+36     	; 0xa6a <__floatunsisf+0xe0>
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	81 f0       	breq	.+32     	; 0xa6a <__floatunsisf+0xe0>
     a4a:	0e 2e       	mov	r0, r30
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__floatunsisf+0xcc>
     a4e:	ee 0c       	add	r14, r14
     a50:	ff 1c       	adc	r15, r15
     a52:	00 1f       	adc	r16, r16
     a54:	11 1f       	adc	r17, r17
     a56:	0a 94       	dec	r0
     a58:	d2 f7       	brpl	.-12     	; 0xa4e <__floatunsisf+0xc4>
     a5a:	ed 82       	std	Y+5, r14	; 0x05
     a5c:	fe 82       	std	Y+6, r15	; 0x06
     a5e:	0f 83       	std	Y+7, r16	; 0x07
     a60:	18 87       	std	Y+8, r17	; 0x08
     a62:	ce 1a       	sub	r12, r30
     a64:	df 0a       	sbc	r13, r31
     a66:	dc 82       	std	Y+4, r13	; 0x04
     a68:	cb 82       	std	Y+3, r12	; 0x03
     a6a:	1a 82       	std	Y+2, r1	; 0x02
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__pack_f>
     a74:	28 96       	adiw	r28, 0x08	; 8
     a76:	ea e0       	ldi	r30, 0x0A	; 10
     a78:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <__epilogue_restores__+0x10>

00000a7c <__clzsi2>:
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	7b 01       	movw	r14, r22
     a86:	8c 01       	movw	r16, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	e8 16       	cp	r14, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	f8 06       	cpc	r15, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	08 07       	cpc	r16, r24
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	18 07       	cpc	r17, r24
     a98:	88 f4       	brcc	.+34     	; 0xabc <__clzsi2+0x40>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	e8 16       	cp	r14, r24
     a9e:	f1 04       	cpc	r15, r1
     aa0:	01 05       	cpc	r16, r1
     aa2:	11 05       	cpc	r17, r1
     aa4:	31 f0       	breq	.+12     	; 0xab2 <__clzsi2+0x36>
     aa6:	28 f0       	brcs	.+10     	; 0xab2 <__clzsi2+0x36>
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	17 c0       	rjmp	.+46     	; 0xae0 <__clzsi2+0x64>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	12 c0       	rjmp	.+36     	; 0xae0 <__clzsi2+0x64>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	e8 16       	cp	r14, r24
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	f8 06       	cpc	r15, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 07       	cpc	r16, r24
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	18 07       	cpc	r17, r24
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__clzsi2+0x5c>
     ace:	88 e1       	ldi	r24, 0x18	; 24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__clzsi2+0x64>
     ad8:	80 e1       	ldi	r24, 0x10	; 16
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	20 e2       	ldi	r18, 0x20	; 32
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	28 1b       	sub	r18, r24
     aea:	39 0b       	sbc	r19, r25
     aec:	4a 0b       	sbc	r20, r26
     aee:	5b 0b       	sbc	r21, r27
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__clzsi2+0x7e>
     af2:	16 95       	lsr	r17
     af4:	07 95       	ror	r16
     af6:	f7 94       	ror	r15
     af8:	e7 94       	ror	r14
     afa:	8a 95       	dec	r24
     afc:	d2 f7       	brpl	.-12     	; 0xaf2 <__clzsi2+0x76>
     afe:	f7 01       	movw	r30, r14
     b00:	ea 5e       	subi	r30, 0xEA	; 234
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	80 81       	ld	r24, Z
     b06:	28 1b       	sub	r18, r24
     b08:	31 09       	sbc	r19, r1
     b0a:	41 09       	sbc	r20, r1
     b0c:	51 09       	sbc	r21, r1
     b0e:	c9 01       	movw	r24, r18
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	08 95       	ret

00000b1a <__pack_f>:
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	fc 01       	movw	r30, r24
     b26:	e4 80       	ldd	r14, Z+4	; 0x04
     b28:	f5 80       	ldd	r15, Z+5	; 0x05
     b2a:	06 81       	ldd	r16, Z+6	; 0x06
     b2c:	17 81       	ldd	r17, Z+7	; 0x07
     b2e:	d1 80       	ldd	r13, Z+1	; 0x01
     b30:	80 81       	ld	r24, Z
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	48 f4       	brcc	.+18     	; 0xb48 <__pack_f+0x2e>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e1       	ldi	r26, 0x10	; 16
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e8 2a       	or	r14, r24
     b40:	f9 2a       	or	r15, r25
     b42:	0a 2b       	or	r16, r26
     b44:	1b 2b       	or	r17, r27
     b46:	a5 c0       	rjmp	.+330    	; 0xc92 <__pack_f+0x178>
     b48:	84 30       	cpi	r24, 0x04	; 4
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__pack_f+0x34>
     b4c:	9f c0       	rjmp	.+318    	; 0xc8c <__pack_f+0x172>
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	21 f4       	brne	.+8      	; 0xb5a <__pack_f+0x40>
     b52:	ee 24       	eor	r14, r14
     b54:	ff 24       	eor	r15, r15
     b56:	87 01       	movw	r16, r14
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <__pack_f+0x4a>
     b5a:	e1 14       	cp	r14, r1
     b5c:	f1 04       	cpc	r15, r1
     b5e:	01 05       	cpc	r16, r1
     b60:	11 05       	cpc	r17, r1
     b62:	19 f4       	brne	.+6      	; 0xb6a <__pack_f+0x50>
     b64:	e0 e0       	ldi	r30, 0x00	; 0
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	96 c0       	rjmp	.+300    	; 0xc96 <__pack_f+0x17c>
     b6a:	62 81       	ldd	r22, Z+2	; 0x02
     b6c:	73 81       	ldd	r23, Z+3	; 0x03
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	62 38       	cpi	r22, 0x82	; 130
     b72:	79 07       	cpc	r23, r25
     b74:	0c f0       	brlt	.+2      	; 0xb78 <__pack_f+0x5e>
     b76:	5b c0       	rjmp	.+182    	; 0xc2e <__pack_f+0x114>
     b78:	22 e8       	ldi	r18, 0x82	; 130
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	26 1b       	sub	r18, r22
     b7e:	37 0b       	sbc	r19, r23
     b80:	2a 31       	cpi	r18, 0x1A	; 26
     b82:	31 05       	cpc	r19, r1
     b84:	2c f0       	brlt	.+10     	; 0xb90 <__pack_f+0x76>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	2a c0       	rjmp	.+84     	; 0xbe4 <__pack_f+0xca>
     b90:	b8 01       	movw	r22, r16
     b92:	a7 01       	movw	r20, r14
     b94:	02 2e       	mov	r0, r18
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__pack_f+0x86>
     b98:	76 95       	lsr	r23
     b9a:	67 95       	ror	r22
     b9c:	57 95       	ror	r21
     b9e:	47 95       	ror	r20
     ba0:	0a 94       	dec	r0
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <__pack_f+0x7e>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <__pack_f+0x9c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	aa 1f       	adc	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	2a 95       	dec	r18
     bb8:	d2 f7       	brpl	.-12     	; 0xbae <__pack_f+0x94>
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	a1 09       	sbc	r26, r1
     bbe:	b1 09       	sbc	r27, r1
     bc0:	8e 21       	and	r24, r14
     bc2:	9f 21       	and	r25, r15
     bc4:	a0 23       	and	r26, r16
     bc6:	b1 23       	and	r27, r17
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	a1 05       	cpc	r26, r1
     bcc:	b1 05       	cpc	r27, r1
     bce:	21 f0       	breq	.+8      	; 0xbd8 <__pack_f+0xbe>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	9a 01       	movw	r18, r20
     bda:	ab 01       	movw	r20, r22
     bdc:	28 2b       	or	r18, r24
     bde:	39 2b       	or	r19, r25
     be0:	4a 2b       	or	r20, r26
     be2:	5b 2b       	or	r21, r27
     be4:	da 01       	movw	r26, r20
     be6:	c9 01       	movw	r24, r18
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	90 70       	andi	r25, 0x00	; 0
     bec:	a0 70       	andi	r26, 0x00	; 0
     bee:	b0 70       	andi	r27, 0x00	; 0
     bf0:	80 34       	cpi	r24, 0x40	; 64
     bf2:	91 05       	cpc	r25, r1
     bf4:	a1 05       	cpc	r26, r1
     bf6:	b1 05       	cpc	r27, r1
     bf8:	39 f4       	brne	.+14     	; 0xc08 <__pack_f+0xee>
     bfa:	27 ff       	sbrs	r18, 7
     bfc:	09 c0       	rjmp	.+18     	; 0xc10 <__pack_f+0xf6>
     bfe:	20 5c       	subi	r18, 0xC0	; 192
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	4f 4f       	sbci	r20, 0xFF	; 255
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <__pack_f+0xf6>
     c08:	21 5c       	subi	r18, 0xC1	; 193
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	4f 4f       	sbci	r20, 0xFF	; 255
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	e0 e0       	ldi	r30, 0x00	; 0
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	3a 07       	cpc	r19, r26
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	4a 07       	cpc	r20, r26
     c1e:	a0 e4       	ldi	r26, 0x40	; 64
     c20:	5a 07       	cpc	r21, r26
     c22:	10 f0       	brcs	.+4      	; 0xc28 <__pack_f+0x10e>
     c24:	e1 e0       	ldi	r30, 0x01	; 1
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	79 01       	movw	r14, r18
     c2a:	8a 01       	movw	r16, r20
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <__pack_f+0x162>
     c2e:	60 38       	cpi	r22, 0x80	; 128
     c30:	71 05       	cpc	r23, r1
     c32:	64 f5       	brge	.+88     	; 0xc8c <__pack_f+0x172>
     c34:	fb 01       	movw	r30, r22
     c36:	e1 58       	subi	r30, 0x81	; 129
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	d8 01       	movw	r26, r16
     c3c:	c7 01       	movw	r24, r14
     c3e:	8f 77       	andi	r24, 0x7F	; 127
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	a0 70       	andi	r26, 0x00	; 0
     c44:	b0 70       	andi	r27, 0x00	; 0
     c46:	80 34       	cpi	r24, 0x40	; 64
     c48:	91 05       	cpc	r25, r1
     c4a:	a1 05       	cpc	r26, r1
     c4c:	b1 05       	cpc	r27, r1
     c4e:	39 f4       	brne	.+14     	; 0xc5e <__pack_f+0x144>
     c50:	e7 fe       	sbrs	r14, 7
     c52:	0d c0       	rjmp	.+26     	; 0xc6e <__pack_f+0x154>
     c54:	80 e4       	ldi	r24, 0x40	; 64
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <__pack_f+0x14c>
     c5e:	8f e3       	ldi	r24, 0x3F	; 63
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e8 0e       	add	r14, r24
     c68:	f9 1e       	adc	r15, r25
     c6a:	0a 1f       	adc	r16, r26
     c6c:	1b 1f       	adc	r17, r27
     c6e:	17 ff       	sbrs	r17, 7
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <__pack_f+0x162>
     c72:	16 95       	lsr	r17
     c74:	07 95       	ror	r16
     c76:	f7 94       	ror	r15
     c78:	e7 94       	ror	r14
     c7a:	31 96       	adiw	r30, 0x01	; 1
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	16 95       	lsr	r17
     c80:	07 95       	ror	r16
     c82:	f7 94       	ror	r15
     c84:	e7 94       	ror	r14
     c86:	8a 95       	dec	r24
     c88:	d1 f7       	brne	.-12     	; 0xc7e <__pack_f+0x164>
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <__pack_f+0x17c>
     c8c:	ee 24       	eor	r14, r14
     c8e:	ff 24       	eor	r15, r15
     c90:	87 01       	movw	r16, r14
     c92:	ef ef       	ldi	r30, 0xFF	; 255
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	6e 2f       	mov	r22, r30
     c98:	67 95       	ror	r22
     c9a:	66 27       	eor	r22, r22
     c9c:	67 95       	ror	r22
     c9e:	90 2f       	mov	r25, r16
     ca0:	9f 77       	andi	r25, 0x7F	; 127
     ca2:	d7 94       	ror	r13
     ca4:	dd 24       	eor	r13, r13
     ca6:	d7 94       	ror	r13
     ca8:	8e 2f       	mov	r24, r30
     caa:	86 95       	lsr	r24
     cac:	49 2f       	mov	r20, r25
     cae:	46 2b       	or	r20, r22
     cb0:	58 2f       	mov	r21, r24
     cb2:	5d 29       	or	r21, r13
     cb4:	b7 01       	movw	r22, r14
     cb6:	ca 01       	movw	r24, r20
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	08 95       	ret

00000cc4 <__unpack_f>:
     cc4:	fc 01       	movw	r30, r24
     cc6:	db 01       	movw	r26, r22
     cc8:	40 81       	ld	r20, Z
     cca:	51 81       	ldd	r21, Z+1	; 0x01
     ccc:	22 81       	ldd	r18, Z+2	; 0x02
     cce:	62 2f       	mov	r22, r18
     cd0:	6f 77       	andi	r22, 0x7F	; 127
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	22 1f       	adc	r18, r18
     cd6:	22 27       	eor	r18, r18
     cd8:	22 1f       	adc	r18, r18
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	89 2f       	mov	r24, r25
     cde:	88 0f       	add	r24, r24
     ce0:	82 2b       	or	r24, r18
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	99 1f       	adc	r25, r25
     ce8:	99 27       	eor	r25, r25
     cea:	99 1f       	adc	r25, r25
     cec:	11 96       	adiw	r26, 0x01	; 1
     cee:	9c 93       	st	X, r25
     cf0:	11 97       	sbiw	r26, 0x01	; 1
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	a9 f5       	brne	.+106    	; 0xd62 <__unpack_f+0x9e>
     cf8:	41 15       	cp	r20, r1
     cfa:	51 05       	cpc	r21, r1
     cfc:	61 05       	cpc	r22, r1
     cfe:	71 05       	cpc	r23, r1
     d00:	11 f4       	brne	.+4      	; 0xd06 <__unpack_f+0x42>
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	37 c0       	rjmp	.+110    	; 0xd74 <__unpack_f+0xb0>
     d06:	82 e8       	ldi	r24, 0x82	; 130
     d08:	9f ef       	ldi	r25, 0xFF	; 255
     d0a:	13 96       	adiw	r26, 0x03	; 3
     d0c:	9c 93       	st	X, r25
     d0e:	8e 93       	st	-X, r24
     d10:	12 97       	sbiw	r26, 0x02	; 2
     d12:	9a 01       	movw	r18, r20
     d14:	ab 01       	movw	r20, r22
     d16:	67 e0       	ldi	r22, 0x07	; 7
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	44 1f       	adc	r20, r20
     d1e:	55 1f       	adc	r21, r21
     d20:	6a 95       	dec	r22
     d22:	d1 f7       	brne	.-12     	; 0xd18 <__unpack_f+0x54>
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <__unpack_f+0x80>
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	44 1f       	adc	r20, r20
     d30:	55 1f       	adc	r21, r21
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	8d 91       	ld	r24, X+
     d36:	9c 91       	ld	r25, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	13 96       	adiw	r26, 0x03	; 3
     d3e:	9c 93       	st	X, r25
     d40:	8e 93       	st	-X, r24
     d42:	12 97       	sbiw	r26, 0x02	; 2
     d44:	20 30       	cpi	r18, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	38 07       	cpc	r19, r24
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	48 07       	cpc	r20, r24
     d4e:	80 e4       	ldi	r24, 0x40	; 64
     d50:	58 07       	cpc	r21, r24
     d52:	58 f3       	brcs	.-42     	; 0xd2a <__unpack_f+0x66>
     d54:	14 96       	adiw	r26, 0x04	; 4
     d56:	2d 93       	st	X+, r18
     d58:	3d 93       	st	X+, r19
     d5a:	4d 93       	st	X+, r20
     d5c:	5c 93       	st	X, r21
     d5e:	17 97       	sbiw	r26, 0x07	; 7
     d60:	08 95       	ret
     d62:	2f 3f       	cpi	r18, 0xFF	; 255
     d64:	31 05       	cpc	r19, r1
     d66:	79 f4       	brne	.+30     	; 0xd86 <__unpack_f+0xc2>
     d68:	41 15       	cp	r20, r1
     d6a:	51 05       	cpc	r21, r1
     d6c:	61 05       	cpc	r22, r1
     d6e:	71 05       	cpc	r23, r1
     d70:	19 f4       	brne	.+6      	; 0xd78 <__unpack_f+0xb4>
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	8c 93       	st	X, r24
     d76:	08 95       	ret
     d78:	64 ff       	sbrs	r22, 4
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <__unpack_f+0xbe>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	8c 93       	st	X, r24
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <__unpack_f+0xe2>
     d82:	1c 92       	st	X, r1
     d84:	10 c0       	rjmp	.+32     	; 0xda6 <__unpack_f+0xe2>
     d86:	2f 57       	subi	r18, 0x7F	; 127
     d88:	30 40       	sbci	r19, 0x00	; 0
     d8a:	13 96       	adiw	r26, 0x03	; 3
     d8c:	3c 93       	st	X, r19
     d8e:	2e 93       	st	-X, r18
     d90:	12 97       	sbiw	r26, 0x02	; 2
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	8c 93       	st	X, r24
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	66 1f       	adc	r22, r22
     d9e:	77 1f       	adc	r23, r23
     da0:	8a 95       	dec	r24
     da2:	d1 f7       	brne	.-12     	; 0xd98 <__unpack_f+0xd4>
     da4:	70 64       	ori	r23, 0x40	; 64
     da6:	14 96       	adiw	r26, 0x04	; 4
     da8:	4d 93       	st	X+, r20
     daa:	5d 93       	st	X+, r21
     dac:	6d 93       	st	X+, r22
     dae:	7c 93       	st	X, r23
     db0:	17 97       	sbiw	r26, 0x07	; 7
     db2:	08 95       	ret

00000db4 <__fpcmp_parts_f>:
     db4:	1f 93       	push	r17
     db6:	dc 01       	movw	r26, r24
     db8:	fb 01       	movw	r30, r22
     dba:	9c 91       	ld	r25, X
     dbc:	92 30       	cpi	r25, 0x02	; 2
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <__fpcmp_parts_f+0xe>
     dc0:	47 c0       	rjmp	.+142    	; 0xe50 <__fpcmp_parts_f+0x9c>
     dc2:	80 81       	ld	r24, Z
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	08 f4       	brcc	.+2      	; 0xdca <__fpcmp_parts_f+0x16>
     dc8:	43 c0       	rjmp	.+134    	; 0xe50 <__fpcmp_parts_f+0x9c>
     dca:	94 30       	cpi	r25, 0x04	; 4
     dcc:	51 f4       	brne	.+20     	; 0xde2 <__fpcmp_parts_f+0x2e>
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	1c 91       	ld	r17, X
     dd2:	84 30       	cpi	r24, 0x04	; 4
     dd4:	99 f5       	brne	.+102    	; 0xe3c <__fpcmp_parts_f+0x88>
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	68 2f       	mov	r22, r24
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	61 1b       	sub	r22, r17
     dde:	71 09       	sbc	r23, r1
     de0:	3f c0       	rjmp	.+126    	; 0xe60 <__fpcmp_parts_f+0xac>
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	21 f0       	breq	.+8      	; 0xdee <__fpcmp_parts_f+0x3a>
     de6:	92 30       	cpi	r25, 0x02	; 2
     de8:	31 f4       	brne	.+12     	; 0xdf6 <__fpcmp_parts_f+0x42>
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	b9 f1       	breq	.+110    	; 0xe5c <__fpcmp_parts_f+0xa8>
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	88 23       	and	r24, r24
     df2:	89 f1       	breq	.+98     	; 0xe56 <__fpcmp_parts_f+0xa2>
     df4:	2d c0       	rjmp	.+90     	; 0xe50 <__fpcmp_parts_f+0x9c>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	11 97       	sbiw	r26, 0x01	; 1
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	f1 f0       	breq	.+60     	; 0xe3c <__fpcmp_parts_f+0x88>
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	18 17       	cp	r17, r24
     e04:	d9 f4       	brne	.+54     	; 0xe3c <__fpcmp_parts_f+0x88>
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	2d 91       	ld	r18, X+
     e0a:	3c 91       	ld	r19, X
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	82 17       	cp	r24, r18
     e14:	93 07       	cpc	r25, r19
     e16:	94 f0       	brlt	.+36     	; 0xe3c <__fpcmp_parts_f+0x88>
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	bc f0       	brlt	.+46     	; 0xe4c <__fpcmp_parts_f+0x98>
     e1e:	14 96       	adiw	r26, 0x04	; 4
     e20:	8d 91       	ld	r24, X+
     e22:	9d 91       	ld	r25, X+
     e24:	0d 90       	ld	r0, X+
     e26:	bc 91       	ld	r27, X
     e28:	a0 2d       	mov	r26, r0
     e2a:	24 81       	ldd	r18, Z+4	; 0x04
     e2c:	35 81       	ldd	r19, Z+5	; 0x05
     e2e:	46 81       	ldd	r20, Z+6	; 0x06
     e30:	57 81       	ldd	r21, Z+7	; 0x07
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	4a 07       	cpc	r20, r26
     e38:	5b 07       	cpc	r21, r27
     e3a:	18 f4       	brcc	.+6      	; 0xe42 <__fpcmp_parts_f+0x8e>
     e3c:	11 23       	and	r17, r17
     e3e:	41 f0       	breq	.+16     	; 0xe50 <__fpcmp_parts_f+0x9c>
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <__fpcmp_parts_f+0xa2>
     e42:	82 17       	cp	r24, r18
     e44:	93 07       	cpc	r25, r19
     e46:	a4 07       	cpc	r26, r20
     e48:	b5 07       	cpc	r27, r21
     e4a:	40 f4       	brcc	.+16     	; 0xe5c <__fpcmp_parts_f+0xa8>
     e4c:	11 23       	and	r17, r17
     e4e:	19 f0       	breq	.+6      	; 0xe56 <__fpcmp_parts_f+0xa2>
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <__fpcmp_parts_f+0xac>
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <__fpcmp_parts_f+0xac>
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	cb 01       	movw	r24, r22
     e62:	1f 91       	pop	r17
     e64:	08 95       	ret

00000e66 <Handle_data>:
#define WAIT_TIME_PER_DUTY_CHANGE	30
//uint8_t ignitionState = LOGIC_LOW;
unsigned char state;

void Handle_data(States_GroupType *Sates_Ptr)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <Handle_data+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(0, 0);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_moveCursor>
	LCD_displayString("H:"); //hazard button
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->hazard_Btn);
     e84:	e9 81       	ldd	r30, Y+1	; 0x01
     e86:	fa 81       	ldd	r31, Y+2	; 0x02
     e88:	83 81       	ldd	r24, Z+3	; 0x03
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LCD_intgerToString>
	LCD_displayString(" I:");	//ignition button
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->ignition_key);
     e9a:	e9 81       	ldd	r30, Y+1	; 0x01
     e9c:	fa 81       	ldd	r31, Y+2	; 0x02
     e9e:	80 81       	ld	r24, Z
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LCD_intgerToString>
	LCD_moveCursor(1, 0);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_moveCursor>
	LCD_displayString("L:");	//left indicator
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->leftIndicator);
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	fa 81       	ldd	r31, Y+2	; 0x02
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LCD_intgerToString>
	LCD_displayString(" R:");	//right indicator
     ec6:	8a e0       	ldi	r24, 0x0A	; 10
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->rightIndicator);
     ece:	e9 81       	ldd	r30, Y+1	; 0x01
     ed0:	fa 81       	ldd	r31, Y+2	; 0x02
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LCD_intgerToString>


	if(Sates_Ptr->ignition_key==TRUE)
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	80 81       	ld	r24, Z
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	b1 f4       	brne	.+44     	; 0xf12 <Handle_data+0xac>
	{
		if(Sates_Ptr->rightIndicator==TRUE)
     ee6:	e9 81       	ldd	r30, Y+1	; 0x01
     ee8:	fa 81       	ldd	r31, Y+2	; 0x02
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	21 f4       	brne	.+8      	; 0xef8 <Handle_data+0x92>
		{
			state = RIGHT_INDICATOR;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 38 02 	sts	0x0238, r24
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <Handle_data+0xb2>
		}
		else if(Sates_Ptr->leftIndicator==TRUE)
     ef8:	e9 81       	ldd	r30, Y+1	; 0x01
     efa:	fa 81       	ldd	r31, Y+2	; 0x02
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	21 f4       	brne	.+8      	; 0xf0a <Handle_data+0xa4>
		{
			state = LEFT_INDICATOR;
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	80 93 38 02 	sts	0x0238, r24
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <Handle_data+0xb2>
		}
		else{
			state = NO_INDICATOR;
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	80 93 38 02 	sts	0x0238, r24
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <Handle_data+0xb2>
		}
	}
	else{
		state = NO_INDICATOR;
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	80 93 38 02 	sts	0x0238, r24
	}

	if(Sates_Ptr->hazard_Btn==TRUE)
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	19 f4       	brne	.+6      	; 0xf28 <Handle_data+0xc2>
	{
		state = HAZARD_BUTTON;
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	80 93 38 02 	sts	0x0238, r24
	}



	State_Handler();
     f28:	0e 94 9b 07 	call	0xf36	; 0xf36 <State_Handler>
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <State_Handler>:

void State_Handler(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <State_Handler+0x6>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	switch(state)
     f40:	80 91 38 02 	lds	r24, 0x0238
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3a 83       	std	Y+2, r19	; 0x02
     f4a:	29 83       	std	Y+1, r18	; 0x01
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	e1 f0       	breq	.+56     	; 0xf8e <State_Handler+0x58>
     f56:	29 81       	ldd	r18, Y+1	; 0x01
     f58:	3a 81       	ldd	r19, Y+2	; 0x02
     f5a:	23 30       	cpi	r18, 0x03	; 3
     f5c:	31 05       	cpc	r19, r1
     f5e:	34 f4       	brge	.+12     	; 0xf6c <State_Handler+0x36>
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	79 f0       	breq	.+30     	; 0xf88 <State_Handler+0x52>
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <State_Handler+0x62>
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	3a 81       	ldd	r19, Y+2	; 0x02
     f70:	23 30       	cpi	r18, 0x03	; 3
     f72:	31 05       	cpc	r19, r1
     f74:	31 f0       	breq	.+12     	; 0xf82 <State_Handler+0x4c>
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	91 05       	cpc	r25, r1
     f7e:	51 f0       	breq	.+20     	; 0xf94 <State_Handler+0x5e>
     f80:	0b c0       	rjmp	.+22     	; 0xf98 <State_Handler+0x62>
	{
	case NO_INDICATOR:
		NoLED_Blink();
     f82:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <NoLED_Blink>
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <State_Handler+0x62>
		break;
	case RIGHT_INDICATOR:
		RightLED_Blink();
     f88:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <RightLED_Blink>
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <State_Handler+0x62>
		break;
	case LEFT_INDICATOR:
		LeftLED_Blink();
     f8e:	0e 94 03 09 	call	0x1206	; 0x1206 <LeftLED_Blink>
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <State_Handler+0x62>
		break;
	case HAZARD_BUTTON:
		BothLEDS_Blink();
     f94:	0e 94 35 0a 	call	0x146a	; 0x146a <BothLEDS_Blink>
		break;

	}

}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <RightLED_Blink>:


void RightLED_Blink(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	6e 97       	sbiw	r28, 0x1e	; 30
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
     fb6:	1e 8e       	std	Y+30, r1	; 0x1e
     fb8:	1d 8e       	std	Y+29, r1	; 0x1d
	timer1_SetPWM_A(0);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <timer1_SetPWM_A>
	for(i = 1 ; i < 17 ; i++){
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9e 8f       	std	Y+30, r25	; 0x1e
     fc6:	8d 8f       	std	Y+29, r24	; 0x1d
     fc8:	82 c0       	rjmp	.+260    	; 0x10ce <RightLED_Blink+0x12c>

		timer1_SetPWM_B((i*5));
     fca:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fcc:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	0e 94 98 0b 	call	0x1730	; 0x1730 <timer1_SetPWM_B>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 ef       	ldi	r26, 0xF0	; 240
     fe6:	b1 e4       	ldi	r27, 0x41	; 65
     fe8:	89 8f       	std	Y+25, r24	; 0x19
     fea:	9a 8f       	std	Y+26, r25	; 0x1a
     fec:	ab 8f       	std	Y+27, r26	; 0x1b
     fee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	69 8d       	ldd	r22, Y+25	; 0x19
     ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a e7       	ldi	r20, 0x7A	; 122
     ffe:	55 e4       	ldi	r21, 0x45	; 69
    1000:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8d 8b       	std	Y+21, r24	; 0x15
    100a:	9e 8b       	std	Y+22, r25	; 0x16
    100c:	af 8b       	std	Y+23, r26	; 0x17
    100e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1010:	6d 89       	ldd	r22, Y+21	; 0x15
    1012:	7e 89       	ldd	r23, Y+22	; 0x16
    1014:	8f 89       	ldd	r24, Y+23	; 0x17
    1016:	98 8d       	ldd	r25, Y+24	; 0x18
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <RightLED_Blink+0x90>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9c 8b       	std	Y+20, r25	; 0x14
    102e:	8b 8b       	std	Y+19, r24	; 0x13
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <RightLED_Blink+0x10e>
	else if (__tmp > 65535)
    1032:	6d 89       	ldd	r22, Y+21	; 0x15
    1034:	7e 89       	ldd	r23, Y+22	; 0x16
    1036:	8f 89       	ldd	r24, Y+23	; 0x17
    1038:	98 8d       	ldd	r25, Y+24	; 0x18
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <RightLED_Blink+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	69 8d       	ldd	r22, Y+25	; 0x19
    104c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9c 8b       	std	Y+20, r25	; 0x14
    1070:	8b 8b       	std	Y+19, r24	; 0x13
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <RightLED_Blink+0xf0>
    1074:	80 e9       	ldi	r24, 0x90	; 144
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	9a 8b       	std	Y+18, r25	; 0x12
    107a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    107c:	89 89       	ldd	r24, Y+17	; 0x11
    107e:	9a 89       	ldd	r25, Y+18	; 0x12
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <RightLED_Blink+0xde>
    1084:	9a 8b       	std	Y+18, r25	; 0x12
    1086:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
    108a:	9c 89       	ldd	r25, Y+20	; 0x14
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9c 8b       	std	Y+20, r25	; 0x14
    1090:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	9c 89       	ldd	r25, Y+20	; 0x14
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <RightLED_Blink+0xd2>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <RightLED_Blink+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9c 8b       	std	Y+20, r25	; 0x14
    10ae:	8b 8b       	std	Y+19, r24	; 0x13
    10b0:	8b 89       	ldd	r24, Y+19	; 0x13
    10b2:	9c 89       	ldd	r25, Y+20	; 0x14
    10b4:	98 8b       	std	Y+16, r25	; 0x10
    10b6:	8f 87       	std	Y+15, r24	; 0x0f
    10b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ba:	98 89       	ldd	r25, Y+16	; 0x10
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <RightLED_Blink+0x11a>
    10c0:	98 8b       	std	Y+16, r25	; 0x10
    10c2:	8f 87       	std	Y+15, r24	; 0x0f

void RightLED_Blink(void)
{
	int i = 0;
	timer1_SetPWM_A(0);
	for(i = 1 ; i < 17 ; i++){
    10c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	9e 8f       	std	Y+30, r25	; 0x1e
    10cc:	8d 8f       	std	Y+29, r24	; 0x1d
    10ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d2:	81 31       	cpi	r24, 0x11	; 17
    10d4:	91 05       	cpc	r25, r1
    10d6:	0c f4       	brge	.+2      	; 0x10da <RightLED_Blink+0x138>
    10d8:	78 cf       	rjmp	.-272    	; 0xfca <RightLED_Blink+0x28>

		timer1_SetPWM_B((i*5));
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    10da:	80 e1       	ldi	r24, 0x10	; 16
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9e 8f       	std	Y+30, r25	; 0x1e
    10e0:	8d 8f       	std	Y+29, r24	; 0x1d
    10e2:	82 c0       	rjmp	.+260    	; 0x11e8 <__stack+0xe9>

		timer1_SetPWM_B((i*5));
    10e4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10e8:	c9 01       	movw	r24, r18
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	82 0f       	add	r24, r18
    10f4:	93 1f       	adc	r25, r19
    10f6:	0e 94 98 0b 	call	0x1730	; 0x1730 <timer1_SetPWM_B>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 ef       	ldi	r26, 0xF0	; 240
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a e7       	ldi	r20, 0x7A	; 122
    1118:	55 e4       	ldi	r21, 0x45	; 69
    111a:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <__stack+0x4d>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <__stack+0xcb>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <__stack+0xb7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <__stack+0xad>
    118e:	80 e9       	ldi	r24, 0x90	; 144
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <__stack+0x9b>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <__stack+0x8f>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <__stack+0xdf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <__stack+0xd7>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	for(i = 1 ; i < 17 ; i++){

		timer1_SetPWM_B((i*5));
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    11de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 8f       	std	Y+30, r25	; 0x1e
    11e6:	8d 8f       	std	Y+29, r24	; 0x1d
    11e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ec:	18 16       	cp	r1, r24
    11ee:	19 06       	cpc	r1, r25
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <__stack+0xf5>
    11f2:	78 cf       	rjmp	.-272    	; 0x10e4 <RightLED_Blink+0x142>

		timer1_SetPWM_B((i*5));
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
}
    11f4:	6e 96       	adiw	r28, 0x1e	; 30
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <LeftLED_Blink>:

void LeftLED_Blink(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	6e 97       	sbiw	r28, 0x1e	; 30
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
    121a:	1e 8e       	std	Y+30, r1	; 0x1e
    121c:	1d 8e       	std	Y+29, r1	; 0x1d
	timer1_SetPWM_B(0);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 98 0b 	call	0x1730	; 0x1730 <timer1_SetPWM_B>
	for(i = 1 ; i < 17 ; i++){
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9e 8f       	std	Y+30, r25	; 0x1e
    122a:	8d 8f       	std	Y+29, r24	; 0x1d
    122c:	82 c0       	rjmp	.+260    	; 0x1332 <LeftLED_Blink+0x12c>
		timer1_SetPWM_A((i*5));
    122e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1230:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1232:	c9 01       	movw	r24, r18
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <timer1_SetPWM_A>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 ef       	ldi	r26, 0xF0	; 240
    124a:	b1 e4       	ldi	r27, 0x41	; 65
    124c:	89 8f       	std	Y+25, r24	; 0x19
    124e:	9a 8f       	std	Y+26, r25	; 0x1a
    1250:	ab 8f       	std	Y+27, r26	; 0x1b
    1252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	69 8d       	ldd	r22, Y+25	; 0x19
    1256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a e7       	ldi	r20, 0x7A	; 122
    1262:	55 e4       	ldi	r21, 0x45	; 69
    1264:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8d 8b       	std	Y+21, r24	; 0x15
    126e:	9e 8b       	std	Y+22, r25	; 0x16
    1270:	af 8b       	std	Y+23, r26	; 0x17
    1272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1274:	6d 89       	ldd	r22, Y+21	; 0x15
    1276:	7e 89       	ldd	r23, Y+22	; 0x16
    1278:	8f 89       	ldd	r24, Y+23	; 0x17
    127a:	98 8d       	ldd	r25, Y+24	; 0x18
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <LeftLED_Blink+0x90>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9c 8b       	std	Y+20, r25	; 0x14
    1292:	8b 8b       	std	Y+19, r24	; 0x13
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <LeftLED_Blink+0x10e>
	else if (__tmp > 65535)
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <LeftLED_Blink+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	69 8d       	ldd	r22, Y+25	; 0x19
    12b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <LeftLED_Blink+0xf0>
    12d8:	80 e9       	ldi	r24, 0x90	; 144
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	9a 8b       	std	Y+18, r25	; 0x12
    12de:	89 8b       	std	Y+17, r24	; 0x11
    12e0:	89 89       	ldd	r24, Y+17	; 0x11
    12e2:	9a 89       	ldd	r25, Y+18	; 0x12
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <LeftLED_Blink+0xde>
    12e8:	9a 8b       	std	Y+18, r25	; 0x12
    12ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8b 89       	ldd	r24, Y+19	; 0x13
    12ee:	9c 89       	ldd	r25, Y+20	; 0x14
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9c 8b       	std	Y+20, r25	; 0x14
    12f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8b 89       	ldd	r24, Y+19	; 0x13
    12f8:	9c 89       	ldd	r25, Y+20	; 0x14
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <LeftLED_Blink+0xd2>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <LeftLED_Blink+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	6d 89       	ldd	r22, Y+21	; 0x15
    1302:	7e 89       	ldd	r23, Y+22	; 0x16
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9c 8b       	std	Y+20, r25	; 0x14
    1312:	8b 8b       	std	Y+19, r24	; 0x13
    1314:	8b 89       	ldd	r24, Y+19	; 0x13
    1316:	9c 89       	ldd	r25, Y+20	; 0x14
    1318:	98 8b       	std	Y+16, r25	; 0x10
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 89       	ldd	r25, Y+16	; 0x10
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <LeftLED_Blink+0x11a>
    1324:	98 8b       	std	Y+16, r25	; 0x10
    1326:	8f 87       	std	Y+15, r24	; 0x0f

void LeftLED_Blink(void)
{
	int i = 0;
	timer1_SetPWM_B(0);
	for(i = 1 ; i < 17 ; i++){
    1328:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	9e 8f       	std	Y+30, r25	; 0x1e
    1330:	8d 8f       	std	Y+29, r24	; 0x1d
    1332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1334:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1336:	81 31       	cpi	r24, 0x11	; 17
    1338:	91 05       	cpc	r25, r1
    133a:	0c f4       	brge	.+2      	; 0x133e <LeftLED_Blink+0x138>
    133c:	78 cf       	rjmp	.-272    	; 0x122e <LeftLED_Blink+0x28>
		timer1_SetPWM_A((i*5));

		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    133e:	80 e1       	ldi	r24, 0x10	; 16
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9e 8f       	std	Y+30, r25	; 0x1e
    1344:	8d 8f       	std	Y+29, r24	; 0x1d
    1346:	82 c0       	rjmp	.+260    	; 0x144c <LeftLED_Blink+0x246>
		timer1_SetPWM_A((i*5));
    1348:	2d 8d       	ldd	r18, Y+29	; 0x1d
    134a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <timer1_SetPWM_A>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 ef       	ldi	r26, 0xF0	; 240
    1364:	b1 e4       	ldi	r27, 0x41	; 65
    1366:	8b 87       	std	Y+11, r24	; 0x0b
    1368:	9c 87       	std	Y+12, r25	; 0x0c
    136a:	ad 87       	std	Y+13, r26	; 0x0d
    136c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1370:	7c 85       	ldd	r23, Y+12	; 0x0c
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	9e 85       	ldd	r25, Y+14	; 0x0e
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a e7       	ldi	r20, 0x7A	; 122
    137c:	55 e4       	ldi	r21, 0x45	; 69
    137e:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8f 83       	std	Y+7, r24	; 0x07
    1388:	98 87       	std	Y+8, r25	; 0x08
    138a:	a9 87       	std	Y+9, r26	; 0x09
    138c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <LeftLED_Blink+0x1aa>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <LeftLED_Blink+0x228>
	else if (__tmp > 65535)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <LeftLED_Blink+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <LeftLED_Blink+0x20a>
    13f2:	80 e9       	ldi	r24, 0x90	; 144
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <LeftLED_Blink+0x1f8>
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <LeftLED_Blink+0x1ec>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <LeftLED_Blink+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <LeftLED_Blink+0x234>
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	89 83       	std	Y+1, r24	; 0x01
	for(i = 1 ; i < 17 ; i++){
		timer1_SetPWM_A((i*5));

		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    1442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e 8f       	std	Y+30, r25	; 0x1e
    144a:	8d 8f       	std	Y+29, r24	; 0x1d
    144c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1450:	18 16       	cp	r1, r24
    1452:	19 06       	cpc	r1, r25
    1454:	0c f4       	brge	.+2      	; 0x1458 <LeftLED_Blink+0x252>
    1456:	78 cf       	rjmp	.-272    	; 0x1348 <LeftLED_Blink+0x142>
		timer1_SetPWM_A((i*5));

		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
}
    1458:	6e 96       	adiw	r28, 0x1e	; 30
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <BothLEDS_Blink>:

void BothLEDS_Blink(void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	6e 97       	sbiw	r28, 0x1e	; 30
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
    147e:	1e 8e       	std	Y+30, r1	; 0x1e
    1480:	1d 8e       	std	Y+29, r1	; 0x1d
	for(i = 1 ; i < 17 ; i++){
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 8f       	std	Y+30, r25	; 0x1e
    1488:	8d 8f       	std	Y+29, r24	; 0x1d
    148a:	82 c0       	rjmp	.+260    	; 0x1590 <BothLEDS_Blink+0x126>
		timer1_SetPWM_A_B(i*5);
    148c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    148e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1490:	c9 01       	movw	r24, r18
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1_SetPWM_A_B>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 ef       	ldi	r26, 0xF0	; 240
    14a8:	b1 e4       	ldi	r27, 0x41	; 65
    14aa:	89 8f       	std	Y+25, r24	; 0x19
    14ac:	9a 8f       	std	Y+26, r25	; 0x1a
    14ae:	ab 8f       	std	Y+27, r26	; 0x1b
    14b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	69 8d       	ldd	r22, Y+25	; 0x19
    14b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	55 e4       	ldi	r21, 0x45	; 69
    14c2:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8d 8b       	std	Y+21, r24	; 0x15
    14cc:	9e 8b       	std	Y+22, r25	; 0x16
    14ce:	af 8b       	std	Y+23, r26	; 0x17
    14d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <BothLEDS_Blink+0x8a>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <BothLEDS_Blink+0x108>
	else if (__tmp > 65535)
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <BothLEDS_Blink+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <BothLEDS_Blink+0xea>
    1536:	80 e9       	ldi	r24, 0x90	; 144
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	9a 8b       	std	Y+18, r25	; 0x12
    153c:	89 8b       	std	Y+17, r24	; 0x11
    153e:	89 89       	ldd	r24, Y+17	; 0x11
    1540:	9a 89       	ldd	r25, Y+18	; 0x12
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <BothLEDS_Blink+0xd8>
    1546:	9a 8b       	std	Y+18, r25	; 0x12
    1548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	9c 89       	ldd	r25, Y+20	; 0x14
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8b 89       	ldd	r24, Y+19	; 0x13
    1556:	9c 89       	ldd	r25, Y+20	; 0x14
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <BothLEDS_Blink+0xcc>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <BothLEDS_Blink+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6d 89       	ldd	r22, Y+21	; 0x15
    1560:	7e 89       	ldd	r23, Y+22	; 0x16
    1562:	8f 89       	ldd	r24, Y+23	; 0x17
    1564:	98 8d       	ldd	r25, Y+24	; 0x18
    1566:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	98 8b       	std	Y+16, r25	; 0x10
    1578:	8f 87       	std	Y+15, r24	; 0x0f
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	98 89       	ldd	r25, Y+16	; 0x10
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <BothLEDS_Blink+0x114>
    1582:	98 8b       	std	Y+16, r25	; 0x10
    1584:	8f 87       	std	Y+15, r24	; 0x0f
}

void BothLEDS_Blink(void)
{
	int i = 0;
	for(i = 1 ; i < 17 ; i++){
    1586:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1588:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	9e 8f       	std	Y+30, r25	; 0x1e
    158e:	8d 8f       	std	Y+29, r24	; 0x1d
    1590:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1592:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1594:	81 31       	cpi	r24, 0x11	; 17
    1596:	91 05       	cpc	r25, r1
    1598:	0c f4       	brge	.+2      	; 0x159c <BothLEDS_Blink+0x132>
    159a:	78 cf       	rjmp	.-272    	; 0x148c <BothLEDS_Blink+0x22>
		timer1_SetPWM_A_B(i*5);
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    159c:	80 e1       	ldi	r24, 0x10	; 16
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9e 8f       	std	Y+30, r25	; 0x1e
    15a2:	8d 8f       	std	Y+29, r24	; 0x1d
    15a4:	82 c0       	rjmp	.+260    	; 0x16aa <BothLEDS_Blink+0x240>
		timer1_SetPWM_A_B(i*5);
    15a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15aa:	c9 01       	movw	r24, r18
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1_SetPWM_A_B>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 ef       	ldi	r26, 0xF0	; 240
    15c2:	b1 e4       	ldi	r27, 0x41	; 65
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	ad 87       	std	Y+13, r26	; 0x0d
    15ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	55 e4       	ldi	r21, 0x45	; 69
    15dc:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	a9 87       	std	Y+9, r26	; 0x09
    15ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <BothLEDS_Blink+0x1a4>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	3f c0       	rjmp	.+126    	; 0x168c <BothLEDS_Blink+0x222>
	else if (__tmp > 65535)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <BothLEDS_Blink+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0f c0       	rjmp	.+30     	; 0x166e <BothLEDS_Blink+0x204>
    1650:	80 e9       	ldi	r24, 0x90	; 144
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <BothLEDS_Blink+0x1f2>
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <BothLEDS_Blink+0x1e6>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <BothLEDS_Blink+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <BothLEDS_Blink+0x22e>
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
	int i = 0;
	for(i = 1 ; i < 17 ; i++){
		timer1_SetPWM_A_B(i*5);
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}
	for(i = 16 ; i > 0 ; i--){
    16a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 8f       	std	Y+30, r25	; 0x1e
    16a8:	8d 8f       	std	Y+29, r24	; 0x1d
    16aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ae:	18 16       	cp	r1, r24
    16b0:	19 06       	cpc	r1, r25
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <BothLEDS_Blink+0x24c>
    16b4:	78 cf       	rjmp	.-272    	; 0x15a6 <BothLEDS_Blink+0x13c>
		timer1_SetPWM_A_B(i*5);
		_delay_ms(WAIT_TIME_PER_DUTY_CHANGE);
	}

}
    16b6:	6e 96       	adiw	r28, 0x1e	; 30
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <NoLED_Blink>:


void NoLED_Blink(void){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	timer1_SetPWM_A_B(0);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1_SetPWM_A_B>
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <timer1_PWM_Init>:
 */

#include "avr/io.h"
#include "Timer1_PWM.h"

void timer1_PWM_Init(void){
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <timer1_PWM_Init+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <timer1_PWM_Init+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1<< WGM11);
    16e8:	ef e4       	ldi	r30, 0x4F	; 79
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	82 ea       	ldi	r24, 0xA2	; 162
    16ee:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS10);
    16f0:	ee e4       	ldi	r30, 0x4E	; 78
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	89 e1       	ldi	r24, 0x19	; 25
    16f6:	80 83       	st	Z, r24
	unsigned long TopValue = ((float)100/PWM_FREQUENCY_IN_KHZ)*160;
    16f8:	80 ea       	ldi	r24, 0xA0	; 160
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	ab 83       	std	Y+3, r26	; 0x03
    1706:	bc 83       	std	Y+4, r27	; 0x04
	ICR1 = TopValue;
    1708:	e6 e4       	ldi	r30, 0x46	; 70
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
//	OCR1A = 20000;
//	OCR1B = 45500;
	DDRB |= (1<<PB5) | (1<<PB6);
    1714:	a7 e3       	ldi	r26, 0x37	; 55
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e7 e3       	ldi	r30, 0x37	; 55
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 66       	ori	r24, 0x60	; 96
    1720:	8c 93       	st	X, r24

}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <timer1_SetPWM_B>:

void timer1_SetPWM_B(unsigned char dutyB){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <timer1_SetPWM_B+0x6>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <timer1_SetPWM_B+0x8>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	8d 83       	std	Y+5, r24	; 0x05
	unsigned long actualDuty = (unsigned long)(((float)dutyB/100)*(((float)100/PWM_FREQUENCY_IN_KHZ)*160));
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	48 ec       	ldi	r20, 0xC8	; 200
    1760:	52 e4       	ldi	r21, 0x42	; 66
    1762:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	53 e4       	ldi	r21, 0x43	; 67
    1776:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	ab 83       	std	Y+3, r26	; 0x03
    1790:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B = actualDuty;
    1792:	e8 e4       	ldi	r30, 0x48	; 72
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <timer1_SetPWM_A>:


void timer1_SetPWM_A(unsigned char dutyA){
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <timer1_SetPWM_A+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <timer1_SetPWM_A+0x8>
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned long actualDuty = (unsigned long)(((float)dutyA/100)*(((float)100/PWM_FREQUENCY_IN_KHZ)*160));
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	48 ec       	ldi	r20, 0xC8	; 200
    17de:	52 e4       	ldi	r21, 0x42	; 66
    17e0:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	ab 83       	std	Y+3, r26	; 0x03
    180e:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = actualDuty;
    1810:	ea e4       	ldi	r30, 0x4A	; 74
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <timer1_SetPWM_A_B>:


void timer1_SetPWM_A_B(unsigned char dutyA_B){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <timer1_SetPWM_A_B+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <timer1_SetPWM_A_B+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8d 83       	std	Y+5, r24	; 0x05
	unsigned long actualDuty = (unsigned long)(((float)dutyA_B/100)*(((float)100/PWM_FREQUENCY_IN_KHZ)*160));
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a0 e0       	ldi	r26, 0x00	; 0
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	48 ec       	ldi	r20, 0xC8	; 200
    185c:	52 e4       	ldi	r21, 0x42	; 66
    185e:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	53 e4       	ldi	r21, 0x43	; 67
    1872:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	ab 83       	std	Y+3, r26	; 0x03
    188c:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = actualDuty;
    188e:	ea e4       	ldi	r30, 0x4A	; 74
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
	OCR1B = actualDuty;
    189a:	e8 e4       	ldi	r30, 0x48	; 72
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <Timer2_Init_CTC_Mode>:
 */

#include "avr/io.h"

void Timer2_Init_CTC_Mode(unsigned char tick)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;    // Set Timer initial value to 0
    18c2:	e4 e4       	ldi	r30, 0x44	; 68
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1
	OCR2  = tick; // Set Compare Value
    18c8:	e3 e4       	ldi	r30, 0x43	; 67
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
    18d0:	a7 e5       	ldi	r26, 0x57	; 87
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e7 e5       	ldi	r30, 0x57	; 87
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 68       	ori	r24, 0x80	; 128
    18dc:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/8 CS22=0 CS21=1 CS20=0
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21) | (1<<CS21);
    18de:	e5 e4       	ldi	r30, 0x45	; 69
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a e8       	ldi	r24, 0x8A	; 138
    18e4:	80 83       	st	Z, r24
}
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <Get_Data>:
#include<util/delay.h>



States_GroupType Get_Data(void)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	ab 97       	sbiw	r28, 0x2b	; 43
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
	static unsigned char hazardBtn_releaseFlag = TRUE;
	static States_GroupType ButtonState = {0,0,0,0};

	if(GPIO_readPin(dio_config_array[HAZARD_BUTTON_ID].port_id,dio_config_array[HAZARD_BUTTON_ID].pin_num) ){
    1902:	80 91 1b 02 	lds	r24, 0x021B
    1906:	90 91 1c 02 	lds	r25, 0x021C
    190a:	69 2f       	mov	r22, r25
    190c:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1910:	88 23       	and	r24, r24
    1912:	89 f0       	breq	.+34     	; 0x1936 <Get_Data+0x48>
		if(hazardBtn_releaseFlag == TRUE){
    1914:	80 91 16 02 	lds	r24, 0x0216
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	81 f4       	brne	.+32     	; 0x193c <Get_Data+0x4e>
			hazardBtn_releaseFlag = FALSE;
    191c:	10 92 16 02 	sts	0x0216, r1
			ButtonState.hazard_Btn = !ButtonState.hazard_Btn;
    1920:	80 91 31 02 	lds	r24, 0x0231
    1924:	1b a6       	std	Y+43, r1	; 0x2b
    1926:	88 23       	and	r24, r24
    1928:	11 f4       	brne	.+4      	; 0x192e <Get_Data+0x40>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	8b a7       	std	Y+43, r24	; 0x2b
    192e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1930:	80 93 31 02 	sts	0x0231, r24
    1934:	03 c0       	rjmp	.+6      	; 0x193c <Get_Data+0x4e>
		}

	}
	else{
		hazardBtn_releaseFlag = TRUE;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 16 02 	sts	0x0216, r24
	}




	if(!GPIO_readPin(dio_config_array[RIGHT_INDICATOR_BUTTON_ID].port_id,dio_config_array[RIGHT_INDICATOR_BUTTON_ID].pin_num) && !GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    193c:	80 91 1e 02 	lds	r24, 0x021E
    1940:	90 91 1f 02 	lds	r25, 0x021F
    1944:	69 2f       	mov	r22, r25
    1946:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    194a:	88 23       	and	r24, r24
    194c:	09 f0       	breq	.+2      	; 0x1950 <Get_Data+0x62>
    194e:	9d c0       	rjmp	.+314    	; 0x1a8a <Get_Data+0x19c>
    1950:	80 91 24 02 	lds	r24, 0x0224
    1954:	90 91 25 02 	lds	r25, 0x0225
    1958:	69 2f       	mov	r22, r25
    195a:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    195e:	88 23       	and	r24, r24
    1960:	09 f0       	breq	.+2      	; 0x1964 <Get_Data+0x76>
    1962:	93 c0       	rjmp	.+294    	; 0x1a8a <Get_Data+0x19c>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a8 e4       	ldi	r26, 0x48	; 72
    196a:	b2 e4       	ldi	r27, 0x42	; 66
    196c:	8f a3       	std	Y+39, r24	; 0x27
    196e:	98 a7       	std	Y+40, r25	; 0x28
    1970:	a9 a7       	std	Y+41, r26	; 0x29
    1972:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6f a1       	ldd	r22, Y+39	; 0x27
    1976:	78 a5       	ldd	r23, Y+40	; 0x28
    1978:	89 a5       	ldd	r24, Y+41	; 0x29
    197a:	9a a5       	ldd	r25, Y+42	; 0x2a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	55 e4       	ldi	r21, 0x45	; 69
    1984:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8b a3       	std	Y+35, r24	; 0x23
    198e:	9c a3       	std	Y+36, r25	; 0x24
    1990:	ad a3       	std	Y+37, r26	; 0x25
    1992:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1994:	6b a1       	ldd	r22, Y+35	; 0x23
    1996:	7c a1       	ldd	r23, Y+36	; 0x24
    1998:	8d a1       	ldd	r24, Y+37	; 0x25
    199a:	9e a1       	ldd	r25, Y+38	; 0x26
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <Get_Data+0xc8>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9a a3       	std	Y+34, r25	; 0x22
    19b2:	89 a3       	std	Y+33, r24	; 0x21
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <Get_Data+0x146>
	else if (__tmp > 65535)
    19b6:	6b a1       	ldd	r22, Y+35	; 0x23
    19b8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ba:	8d a1       	ldd	r24, Y+37	; 0x25
    19bc:	9e a1       	ldd	r25, Y+38	; 0x26
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <Get_Data+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6f a1       	ldd	r22, Y+39	; 0x27
    19d0:	78 a5       	ldd	r23, Y+40	; 0x28
    19d2:	89 a5       	ldd	r24, Y+41	; 0x29
    19d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <Get_Data+0x128>
    19f8:	80 e9       	ldi	r24, 0x90	; 144
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	98 a3       	std	Y+32, r25	; 0x20
    19fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a02:	98 a1       	ldd	r25, Y+32	; 0x20
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <Get_Data+0x116>
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9a a3       	std	Y+34, r25	; 0x22
    1a14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	89 a1       	ldd	r24, Y+33	; 0x21
    1a18:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <Get_Data+0x10a>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <Get_Data+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6b a1       	ldd	r22, Y+35	; 0x23
    1a22:	7c a1       	ldd	r23, Y+36	; 0x24
    1a24:	8d a1       	ldd	r24, Y+37	; 0x25
    1a26:	9e a1       	ldd	r25, Y+38	; 0x26
    1a28:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9a a3       	std	Y+34, r25	; 0x22
    1a32:	89 a3       	std	Y+33, r24	; 0x21
    1a34:	89 a1       	ldd	r24, Y+33	; 0x21
    1a36:	9a a1       	ldd	r25, Y+34	; 0x22
    1a38:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <Get_Data+0x152>
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		if(!GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    1a48:	80 91 24 02 	lds	r24, 0x0224
    1a4c:	90 91 25 02 	lds	r25, 0x0225
    1a50:	69 2f       	mov	r22, r25
    1a52:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1a56:	88 23       	and	r24, r24
    1a58:	99 f4       	brne	.+38     	; 0x1a80 <Get_Data+0x192>
			ButtonState.ignition_key = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 2e 02 	sts	0x022E, r24
			if(!GPIO_readPin(dio_config_array[RIGHT_INDICATOR_BUTTON_ID].port_id,dio_config_array[RIGHT_INDICATOR_BUTTON_ID].pin_num)){
    1a60:	80 91 1e 02 	lds	r24, 0x021E
    1a64:	90 91 1f 02 	lds	r25, 0x021F
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1a6e:	88 23       	and	r24, r24
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <Get_Data+0x18c>
				ButtonState.rightIndicator = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 2f 02 	sts	0x022F, r24
    1a78:	49 c1       	rjmp	.+658    	; 0x1d0c <Get_Data+0x41e>
			}
			else{
				ButtonState.rightIndicator = 0;
    1a7a:	10 92 2f 02 	sts	0x022F, r1
    1a7e:	46 c1       	rjmp	.+652    	; 0x1d0c <Get_Data+0x41e>
			}
		}
		else{
			ButtonState.ignition_key = 0;
    1a80:	10 92 2e 02 	sts	0x022E, r1
			ButtonState.rightIndicator = 0;
    1a84:	10 92 2f 02 	sts	0x022F, r1
    1a88:	41 c1       	rjmp	.+642    	; 0x1d0c <Get_Data+0x41e>
		}
	}
	else if(!GPIO_readPin(dio_config_array[LEFT_INDICATOR_BUTTON_ID].port_id,dio_config_array[LEFT_INDICATOR_BUTTON_ID].pin_num) && !GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    1a8a:	80 91 21 02 	lds	r24, 0x0221
    1a8e:	90 91 22 02 	lds	r25, 0x0222
    1a92:	69 2f       	mov	r22, r25
    1a94:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1a98:	88 23       	and	r24, r24
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <Get_Data+0x1b0>
    1a9c:	9d c0       	rjmp	.+314    	; 0x1bd8 <Get_Data+0x2ea>
    1a9e:	80 91 24 02 	lds	r24, 0x0224
    1aa2:	90 91 25 02 	lds	r25, 0x0225
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1aac:	88 23       	and	r24, r24
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <Get_Data+0x1c4>
    1ab0:	93 c0       	rjmp	.+294    	; 0x1bd8 <Get_Data+0x2ea>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a8 e4       	ldi	r26, 0x48	; 72
    1ab8:	b2 e4       	ldi	r27, 0x42	; 66
    1aba:	89 8f       	std	Y+25, r24	; 0x19
    1abc:	9a 8f       	std	Y+26, r25	; 0x1a
    1abe:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a e7       	ldi	r20, 0x7A	; 122
    1ad0:	55 e4       	ldi	r21, 0x45	; 69
    1ad2:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8d 8b       	std	Y+21, r24	; 0x15
    1adc:	9e 8b       	std	Y+22, r25	; 0x16
    1ade:	af 8b       	std	Y+23, r26	; 0x17
    1ae0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <Get_Data+0x216>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <Get_Data+0x294>
	else if (__tmp > 65535)
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <Get_Data+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <Get_Data+0x276>
    1b46:	80 e9       	ldi	r24, 0x90	; 144
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	9a 8b       	std	Y+18, r25	; 0x12
    1b4c:	89 8b       	std	Y+17, r24	; 0x11
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	9a 89       	ldd	r25, Y+18	; 0x12
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <Get_Data+0x264>
    1b56:	9a 8b       	std	Y+18, r25	; 0x12
    1b58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	8b 89       	ldd	r24, Y+19	; 0x13
    1b66:	9c 89       	ldd	r25, Y+20	; 0x14
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <Get_Data+0x258>
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <Get_Data+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	98 8b       	std	Y+16, r25	; 0x10
    1b88:	8f 87       	std	Y+15, r24	; 0x0f
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	98 89       	ldd	r25, Y+16	; 0x10
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <Get_Data+0x2a0>
    1b92:	98 8b       	std	Y+16, r25	; 0x10
    1b94:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		if(!GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    1b96:	80 91 24 02 	lds	r24, 0x0224
    1b9a:	90 91 25 02 	lds	r25, 0x0225
    1b9e:	69 2f       	mov	r22, r25
    1ba0:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1ba4:	88 23       	and	r24, r24
    1ba6:	99 f4       	brne	.+38     	; 0x1bce <Get_Data+0x2e0>
			ButtonState.ignition_key = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 2e 02 	sts	0x022E, r24
			if(!GPIO_readPin(dio_config_array[LEFT_INDICATOR_BUTTON_ID].port_id,dio_config_array[LEFT_INDICATOR_BUTTON_ID].pin_num)){
    1bae:	80 91 21 02 	lds	r24, 0x0221
    1bb2:	90 91 22 02 	lds	r25, 0x0222
    1bb6:	69 2f       	mov	r22, r25
    1bb8:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1bbc:	88 23       	and	r24, r24
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <Get_Data+0x2da>
				ButtonState.leftIndicator = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 30 02 	sts	0x0230, r24
    1bc6:	a2 c0       	rjmp	.+324    	; 0x1d0c <Get_Data+0x41e>
			}
			else{
				ButtonState.leftIndicator = 0;
    1bc8:	10 92 30 02 	sts	0x0230, r1
    1bcc:	9f c0       	rjmp	.+318    	; 0x1d0c <Get_Data+0x41e>
			}
		}
		else{
			ButtonState.ignition_key = 0;
    1bce:	10 92 2e 02 	sts	0x022E, r1
			ButtonState.leftIndicator = 0;
    1bd2:	10 92 30 02 	sts	0x0230, r1
    1bd6:	9a c0       	rjmp	.+308    	; 0x1d0c <Get_Data+0x41e>
		}
	}
	else if(!GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    1bd8:	80 91 24 02 	lds	r24, 0x0224
    1bdc:	90 91 25 02 	lds	r25, 0x0225
    1be0:	69 2f       	mov	r22, r25
    1be2:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1be6:	88 23       	and	r24, r24
    1be8:	09 f0       	breq	.+2      	; 0x1bec <Get_Data+0x2fe>
    1bea:	8a c0       	rjmp	.+276    	; 0x1d00 <Get_Data+0x412>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a8 e4       	ldi	r26, 0x48	; 72
    1bf2:	b2 e4       	ldi	r27, 0x42	; 66
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	9c 87       	std	Y+12, r25	; 0x0c
    1bf8:	ad 87       	std	Y+13, r26	; 0x0d
    1bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	55 e4       	ldi	r21, 0x45	; 69
    1c0c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	a9 87       	std	Y+9, r26	; 0x09
    1c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <Get_Data+0x350>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <Get_Data+0x3ce>
	else if (__tmp > 65535)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <Get_Data+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <Get_Data+0x3b0>
    1c80:	80 e9       	ldi	r24, 0x90	; 144
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <Get_Data+0x39e>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <Get_Data+0x392>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <Get_Data+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <Get_Data+0x3da>
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		if(!GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num)){
    1cd0:	80 91 24 02 	lds	r24, 0x0224
    1cd4:	90 91 25 02 	lds	r25, 0x0225
    1cd8:	69 2f       	mov	r22, r25
    1cda:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    1cde:	88 23       	and	r24, r24
    1ce0:	41 f4       	brne	.+16     	; 0x1cf2 <Get_Data+0x404>
			ButtonState.ignition_key = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 2e 02 	sts	0x022E, r24
			ButtonState.rightIndicator = 0;
    1ce8:	10 92 2f 02 	sts	0x022F, r1
			ButtonState.leftIndicator = 0;
    1cec:	10 92 30 02 	sts	0x0230, r1
    1cf0:	0d c0       	rjmp	.+26     	; 0x1d0c <Get_Data+0x41e>
		}
		else{
			ButtonState.ignition_key = 0;
    1cf2:	10 92 2e 02 	sts	0x022E, r1
			ButtonState.rightIndicator = 0;
    1cf6:	10 92 2f 02 	sts	0x022F, r1
			ButtonState.leftIndicator = 0;
    1cfa:	10 92 30 02 	sts	0x0230, r1
    1cfe:	06 c0       	rjmp	.+12     	; 0x1d0c <Get_Data+0x41e>
		}
	}
	else{
		ButtonState.ignition_key = 0;
    1d00:	10 92 2e 02 	sts	0x022E, r1
		ButtonState.rightIndicator = 0;
    1d04:	10 92 2f 02 	sts	0x022F, r1
		ButtonState.leftIndicator = 0;
    1d08:	10 92 30 02 	sts	0x0230, r1
	//	else{
	//		ButtonState.ignition_key = 0;
	//	}


	return ButtonState;
    1d0c:	80 91 2e 02 	lds	r24, 0x022E
    1d10:	90 91 2f 02 	lds	r25, 0x022F
    1d14:	a0 91 30 02 	lds	r26, 0x0230
    1d18:	b0 91 31 02 	lds	r27, 0x0231
}
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	ab 96       	adiw	r28, 0x2b	; 43
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_setupPinDirection+0x6>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <GPIO_setupPinDirection+0x8>
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	6a 83       	std	Y+2, r22	; 0x02
    1d44:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <GPIO_setupPinDirection+0x1c>
    1d4c:	39 c1       	rjmp	.+626    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	86 30       	cpi	r24, 0x06	; 6
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <GPIO_setupPinDirection+0x24>
    1d54:	35 c1       	rjmp	.+618    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	3d 83       	std	Y+5, r19	; 0x05
    1d5e:	2c 83       	std	Y+4, r18	; 0x04
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <GPIO_setupPinDirection+0x3a>
    1d6a:	7b c0       	rjmp	.+246    	; 0x1e62 <GPIO_setupPinDirection+0x130>
    1d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d70:	23 30       	cpi	r18, 0x03	; 3
    1d72:	31 05       	cpc	r19, r1
    1d74:	5c f4       	brge	.+22     	; 0x1d8c <GPIO_setupPinDirection+0x5a>
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	d1 f0       	breq	.+52     	; 0x1db2 <GPIO_setupPinDirection+0x80>
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	21 30       	cpi	r18, 0x01	; 1
    1d84:	31 05       	cpc	r19, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <GPIO_setupPinDirection+0x58>
    1d88:	40 c0       	rjmp	.+128    	; 0x1e0a <GPIO_setupPinDirection+0xd8>
    1d8a:	1a c1       	rjmp	.+564    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	91 05       	cpc	r25, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <GPIO_setupPinDirection+0x66>
    1d96:	bd c0       	rjmp	.+378    	; 0x1f12 <GPIO_setupPinDirection+0x1e0>
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	24 30       	cpi	r18, 0x04	; 4
    1d9e:	31 05       	cpc	r19, r1
    1da0:	0c f4       	brge	.+2      	; 0x1da4 <GPIO_setupPinDirection+0x72>
    1da2:	8b c0       	rjmp	.+278    	; 0x1eba <GPIO_setupPinDirection+0x188>
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	85 30       	cpi	r24, 0x05	; 5
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <GPIO_setupPinDirection+0x7e>
    1dae:	dd c0       	rjmp	.+442    	; 0x1f6a <GPIO_setupPinDirection+0x238>
    1db0:	07 c1       	rjmp	.+526    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	a1 f4       	brne	.+40     	; 0x1de0 <GPIO_setupPinDirection+0xae>
			{
				SET_BIT(DDRA,pin_num);
    1db8:	aa e3       	ldi	r26, 0x3A	; 58
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ea e3       	ldi	r30, 0x3A	; 58
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_setupPinDirection+0xa4>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_setupPinDirection+0xa0>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	f0 c0       	rjmp	.+480    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1de0:	aa e3       	ldi	r26, 0x3A	; 58
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ea e3       	ldi	r30, 0x3A	; 58
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_setupPinDirection+0xcc>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_setupPinDirection+0xc8>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	db c0       	rjmp	.+438    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	a1 f4       	brne	.+40     	; 0x1e38 <GPIO_setupPinDirection+0x106>
			{
				SET_BIT(DDRB,pin_num);
    1e10:	a7 e3       	ldi	r26, 0x37	; 55
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e7 e3       	ldi	r30, 0x37	; 55
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <GPIO_setupPinDirection+0xfc>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <GPIO_setupPinDirection+0xf8>
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	c4 c0       	rjmp	.+392    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e38:	a7 e3       	ldi	r26, 0x37	; 55
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e7 e3       	ldi	r30, 0x37	; 55
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <GPIO_setupPinDirection+0x124>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <GPIO_setupPinDirection+0x120>
    1e5a:	80 95       	com	r24
    1e5c:	84 23       	and	r24, r20
    1e5e:	8c 93       	st	X, r24
    1e60:	af c0       	rjmp	.+350    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	a1 f4       	brne	.+40     	; 0x1e90 <GPIO_setupPinDirection+0x15e>
			{
				SET_BIT(DDRC,pin_num);
    1e68:	a4 e3       	ldi	r26, 0x34	; 52
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e4 e3       	ldi	r30, 0x34	; 52
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <GPIO_setupPinDirection+0x154>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <GPIO_setupPinDirection+0x150>
    1e8a:	84 2b       	or	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	98 c0       	rjmp	.+304    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e90:	a4 e3       	ldi	r26, 0x34	; 52
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e4 e3       	ldi	r30, 0x34	; 52
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <GPIO_setupPinDirection+0x17c>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <GPIO_setupPinDirection+0x178>
    1eb2:	80 95       	com	r24
    1eb4:	84 23       	and	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	83 c0       	rjmp	.+262    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	a1 f4       	brne	.+40     	; 0x1ee8 <GPIO_setupPinDirection+0x1b6>
			{
				SET_BIT(DDRD,pin_num);
    1ec0:	a1 e3       	ldi	r26, 0x31	; 49
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e1 e3       	ldi	r30, 0x31	; 49
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <GPIO_setupPinDirection+0x1ac>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <GPIO_setupPinDirection+0x1a8>
    1ee2:	84 2b       	or	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	6c c0       	rjmp	.+216    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ee8:	a1 e3       	ldi	r26, 0x31	; 49
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e1 e3       	ldi	r30, 0x31	; 49
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_setupPinDirection+0x1d4>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_setupPinDirection+0x1d0>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	57 c0       	rjmp	.+174    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			break;
		case PORTE_ID:
			if(direction == PIN_OUTPUT)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	a1 f4       	brne	.+40     	; 0x1f40 <GPIO_setupPinDirection+0x20e>
			{
				SET_BIT(DDRE,pin_num);
    1f18:	a2 e2       	ldi	r26, 0x22	; 34
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e2 e2       	ldi	r30, 0x22	; 34
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	48 2f       	mov	r20, r24
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_setupPinDirection+0x204>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_setupPinDirection+0x200>
    1f3a:	84 2b       	or	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	40 c0       	rjmp	.+128    	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRE,pin_num);
    1f40:	a2 e2       	ldi	r26, 0x22	; 34
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e2 e2       	ldi	r30, 0x22	; 34
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <GPIO_setupPinDirection+0x22c>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <GPIO_setupPinDirection+0x228>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	2b c0       	rjmp	.+86     	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			break;
		case PORTF_ID:
			if(direction == PIN_OUTPUT)
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	a1 f4       	brne	.+40     	; 0x1f98 <GPIO_setupPinDirection+0x266>
			{
				SET_BIT(DDRF,pin_num);
    1f70:	a1 e6       	ldi	r26, 0x61	; 97
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e1 e6       	ldi	r30, 0x61	; 97
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <GPIO_setupPinDirection+0x25c>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <GPIO_setupPinDirection+0x258>
    1f92:	84 2b       	or	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <GPIO_setupPinDirection+0x28e>
			}
			else
			{
				CLEAR_BIT(DDRF,pin_num);
    1f98:	a1 e6       	ldi	r26, 0x61	; 97
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e1 e6       	ldi	r30, 0x61	; 97
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <GPIO_setupPinDirection+0x284>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <GPIO_setupPinDirection+0x280>
    1fba:	80 95       	com	r24
    1fbc:	84 23       	and	r24, r20
    1fbe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <GPIO_writePin+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <GPIO_writePin+0x8>
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	6a 83       	std	Y+2, r22	; 0x02
    1fe2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	88 30       	cpi	r24, 0x08	; 8
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <GPIO_writePin+0x1c>
    1fea:	39 c1       	rjmp	.+626    	; 0x225e <GPIO_writePin+0x28e>
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	86 30       	cpi	r24, 0x06	; 6
    1ff0:	08 f0       	brcs	.+2      	; 0x1ff4 <GPIO_writePin+0x24>
    1ff2:	35 c1       	rjmp	.+618    	; 0x225e <GPIO_writePin+0x28e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3d 83       	std	Y+5, r19	; 0x05
    1ffc:	2c 83       	std	Y+4, r18	; 0x04
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	91 05       	cpc	r25, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <GPIO_writePin+0x3a>
    2008:	7b c0       	rjmp	.+246    	; 0x2100 <GPIO_writePin+0x130>
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	3d 81       	ldd	r19, Y+5	; 0x05
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	31 05       	cpc	r19, r1
    2012:	5c f4       	brge	.+22     	; 0x202a <GPIO_writePin+0x5a>
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	d1 f0       	breq	.+52     	; 0x2050 <GPIO_writePin+0x80>
    201c:	2c 81       	ldd	r18, Y+4	; 0x04
    201e:	3d 81       	ldd	r19, Y+5	; 0x05
    2020:	21 30       	cpi	r18, 0x01	; 1
    2022:	31 05       	cpc	r19, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <GPIO_writePin+0x58>
    2026:	40 c0       	rjmp	.+128    	; 0x20a8 <GPIO_writePin+0xd8>
    2028:	1a c1       	rjmp	.+564    	; 0x225e <GPIO_writePin+0x28e>
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <GPIO_writePin+0x66>
    2034:	bd c0       	rjmp	.+378    	; 0x21b0 <GPIO_writePin+0x1e0>
    2036:	2c 81       	ldd	r18, Y+4	; 0x04
    2038:	3d 81       	ldd	r19, Y+5	; 0x05
    203a:	24 30       	cpi	r18, 0x04	; 4
    203c:	31 05       	cpc	r19, r1
    203e:	0c f4       	brge	.+2      	; 0x2042 <GPIO_writePin+0x72>
    2040:	8b c0       	rjmp	.+278    	; 0x2158 <GPIO_writePin+0x188>
    2042:	8c 81       	ldd	r24, Y+4	; 0x04
    2044:	9d 81       	ldd	r25, Y+5	; 0x05
    2046:	85 30       	cpi	r24, 0x05	; 5
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <GPIO_writePin+0x7e>
    204c:	dd c0       	rjmp	.+442    	; 0x2208 <GPIO_writePin+0x238>
    204e:	07 c1       	rjmp	.+526    	; 0x225e <GPIO_writePin+0x28e>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	a1 f4       	brne	.+40     	; 0x207e <GPIO_writePin+0xae>
			{
				SET_BIT(PORTA,pin_num);
    2056:	ab e3       	ldi	r26, 0x3B	; 59
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	eb e3       	ldi	r30, 0x3B	; 59
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_writePin+0xa4>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_writePin+0xa0>
    2078:	84 2b       	or	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	f0 c0       	rjmp	.+480    	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    207e:	ab e3       	ldi	r26, 0x3B	; 59
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	eb e3       	ldi	r30, 0x3B	; 59
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <GPIO_writePin+0xcc>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <GPIO_writePin+0xc8>
    20a0:	80 95       	com	r24
    20a2:	84 23       	and	r24, r20
    20a4:	8c 93       	st	X, r24
    20a6:	db c0       	rjmp	.+438    	; 0x225e <GPIO_writePin+0x28e>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	a1 f4       	brne	.+40     	; 0x20d6 <GPIO_writePin+0x106>
			{
				SET_BIT(PORTB,pin_num);
    20ae:	a8 e3       	ldi	r26, 0x38	; 56
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e8 e3       	ldi	r30, 0x38	; 56
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_writePin+0xfc>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_writePin+0xf8>
    20d0:	84 2b       	or	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	c4 c0       	rjmp	.+392    	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20d6:	a8 e3       	ldi	r26, 0x38	; 56
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e8 e3       	ldi	r30, 0x38	; 56
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <GPIO_writePin+0x124>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <GPIO_writePin+0x120>
    20f8:	80 95       	com	r24
    20fa:	84 23       	and	r24, r20
    20fc:	8c 93       	st	X, r24
    20fe:	af c0       	rjmp	.+350    	; 0x225e <GPIO_writePin+0x28e>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	a1 f4       	brne	.+40     	; 0x212e <GPIO_writePin+0x15e>
			{
				SET_BIT(PORTC,pin_num);
    2106:	a5 e3       	ldi	r26, 0x35	; 53
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e3       	ldi	r30, 0x35	; 53
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <GPIO_writePin+0x154>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <GPIO_writePin+0x150>
    2128:	84 2b       	or	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	98 c0       	rjmp	.+304    	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    212e:	a5 e3       	ldi	r26, 0x35	; 53
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e3       	ldi	r30, 0x35	; 53
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <GPIO_writePin+0x17c>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <GPIO_writePin+0x178>
    2150:	80 95       	com	r24
    2152:	84 23       	and	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	83 c0       	rjmp	.+262    	; 0x225e <GPIO_writePin+0x28e>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	a1 f4       	brne	.+40     	; 0x2186 <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
    215e:	a2 e3       	ldi	r26, 0x32	; 50
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e2 e3       	ldi	r30, 0x32	; 50
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <GPIO_writePin+0x1ac>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <GPIO_writePin+0x1a8>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	6c c0       	rjmp	.+216    	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2186:	a2 e3       	ldi	r26, 0x32	; 50
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e2 e3       	ldi	r30, 0x32	; 50
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <GPIO_writePin+0x1d4>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <GPIO_writePin+0x1d0>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	57 c0       	rjmp	.+174    	; 0x225e <GPIO_writePin+0x28e>
			}
			break;
		case PORTE_ID:
			if(value == LOGIC_HIGH)
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	a1 f4       	brne	.+40     	; 0x21de <GPIO_writePin+0x20e>
			{
				SET_BIT(PORTE,pin_num);
    21b6:	a3 e2       	ldi	r26, 0x23	; 35
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e3 e2       	ldi	r30, 0x23	; 35
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	02 2e       	mov	r0, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <GPIO_writePin+0x204>
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	0a 94       	dec	r0
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <GPIO_writePin+0x200>
    21d8:	84 2b       	or	r24, r20
    21da:	8c 93       	st	X, r24
    21dc:	40 c0       	rjmp	.+128    	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTE,pin_num);
    21de:	a3 e2       	ldi	r26, 0x23	; 35
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e3 e2       	ldi	r30, 0x23	; 35
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <GPIO_writePin+0x22c>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <GPIO_writePin+0x228>
    2200:	80 95       	com	r24
    2202:	84 23       	and	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	2b c0       	rjmp	.+86     	; 0x225e <GPIO_writePin+0x28e>
			}
			break;
		case PORTF_ID:
			if(value == LOGIC_HIGH)
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	a1 f4       	brne	.+40     	; 0x2236 <GPIO_writePin+0x266>
			{
				SET_BIT(PORTF,pin_num);
    220e:	a2 e6       	ldi	r26, 0x62	; 98
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e2 e6       	ldi	r30, 0x62	; 98
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	48 2f       	mov	r20, r24
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <GPIO_writePin+0x25c>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <GPIO_writePin+0x258>
    2230:	84 2b       	or	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	14 c0       	rjmp	.+40     	; 0x225e <GPIO_writePin+0x28e>
			}
			else
			{
				CLEAR_BIT(PORTF,pin_num);
    2236:	a2 e6       	ldi	r26, 0x62	; 98
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e2 e6       	ldi	r30, 0x62	; 98
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	48 2f       	mov	r20, r24
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <GPIO_writePin+0x284>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <GPIO_writePin+0x280>
    2258:	80 95       	com	r24
    225a:	84 23       	and	r24, r20
    225c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <GPIO_readPin+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <GPIO_readPin+0x8>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2280:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	88 30       	cpi	r24, 0x08	; 8
    2286:	08 f0       	brcs	.+2      	; 0x228a <GPIO_readPin+0x1c>
    2288:	c1 c0       	rjmp	.+386    	; 0x240c <GPIO_readPin+0x19e>
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	86 30       	cpi	r24, 0x06	; 6
    228e:	08 f0       	brcs	.+2      	; 0x2292 <GPIO_readPin+0x24>
    2290:	bd c0       	rjmp	.+378    	; 0x240c <GPIO_readPin+0x19e>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3d 83       	std	Y+5, r19	; 0x05
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	4c 81       	ldd	r20, Y+4	; 0x04
    229e:	5d 81       	ldd	r21, Y+5	; 0x05
    22a0:	42 30       	cpi	r20, 0x02	; 2
    22a2:	51 05       	cpc	r21, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <GPIO_readPin+0x3a>
    22a6:	53 c0       	rjmp	.+166    	; 0x234e <GPIO_readPin+0xe0>
    22a8:	8c 81       	ldd	r24, Y+4	; 0x04
    22aa:	9d 81       	ldd	r25, Y+5	; 0x05
    22ac:	83 30       	cpi	r24, 0x03	; 3
    22ae:	91 05       	cpc	r25, r1
    22b0:	5c f4       	brge	.+22     	; 0x22c8 <GPIO_readPin+0x5a>
    22b2:	2c 81       	ldd	r18, Y+4	; 0x04
    22b4:	3d 81       	ldd	r19, Y+5	; 0x05
    22b6:	21 15       	cp	r18, r1
    22b8:	31 05       	cpc	r19, r1
    22ba:	c9 f0       	breq	.+50     	; 0x22ee <GPIO_readPin+0x80>
    22bc:	4c 81       	ldd	r20, Y+4	; 0x04
    22be:	5d 81       	ldd	r21, Y+5	; 0x05
    22c0:	41 30       	cpi	r20, 0x01	; 1
    22c2:	51 05       	cpc	r21, r1
    22c4:	61 f1       	breq	.+88     	; 0x231e <GPIO_readPin+0xb0>
    22c6:	a2 c0       	rjmp	.+324    	; 0x240c <GPIO_readPin+0x19e>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	84 30       	cpi	r24, 0x04	; 4
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <GPIO_readPin+0x66>
    22d2:	6d c0       	rjmp	.+218    	; 0x23ae <GPIO_readPin+0x140>
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	3d 81       	ldd	r19, Y+5	; 0x05
    22d8:	24 30       	cpi	r18, 0x04	; 4
    22da:	31 05       	cpc	r19, r1
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <GPIO_readPin+0x72>
    22de:	4f c0       	rjmp	.+158    	; 0x237e <GPIO_readPin+0x110>
    22e0:	4c 81       	ldd	r20, Y+4	; 0x04
    22e2:	5d 81       	ldd	r21, Y+5	; 0x05
    22e4:	45 30       	cpi	r20, 0x05	; 5
    22e6:	51 05       	cpc	r21, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <GPIO_readPin+0x7e>
    22ea:	79 c0       	rjmp	.+242    	; 0x23de <GPIO_readPin+0x170>
    22ec:	8f c0       	rjmp	.+286    	; 0x240c <GPIO_readPin+0x19e>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    22ee:	e9 e3       	ldi	r30, 0x39	; 57
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a9 01       	movw	r20, r18
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <GPIO_readPin+0x98>
    2302:	55 95       	asr	r21
    2304:	47 95       	ror	r20
    2306:	8a 95       	dec	r24
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <GPIO_readPin+0x94>
    230a:	ca 01       	movw	r24, r20
    230c:	81 70       	andi	r24, 0x01	; 1
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	88 23       	and	r24, r24
    2312:	19 f0       	breq	.+6      	; 0x231a <GPIO_readPin+0xac>
			{
				pin_value = LOGIC_HIGH;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	79 c0       	rjmp	.+242    	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	77 c0       	rjmp	.+238    	; 0x240c <GPIO_readPin+0x19e>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    231e:	e6 e3       	ldi	r30, 0x36	; 54
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a9 01       	movw	r20, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <GPIO_readPin+0xc8>
    2332:	55 95       	asr	r21
    2334:	47 95       	ror	r20
    2336:	8a 95       	dec	r24
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <GPIO_readPin+0xc4>
    233a:	ca 01       	movw	r24, r20
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	88 23       	and	r24, r24
    2342:	19 f0       	breq	.+6      	; 0x234a <GPIO_readPin+0xdc>
			{
				pin_value = LOGIC_HIGH;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	61 c0       	rjmp	.+194    	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	5f c0       	rjmp	.+190    	; 0x240c <GPIO_readPin+0x19e>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    234e:	e3 e3       	ldi	r30, 0x33	; 51
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a9 01       	movw	r20, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <GPIO_readPin+0xf8>
    2362:	55 95       	asr	r21
    2364:	47 95       	ror	r20
    2366:	8a 95       	dec	r24
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <GPIO_readPin+0xf4>
    236a:	ca 01       	movw	r24, r20
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	88 23       	and	r24, r24
    2372:	19 f0       	breq	.+6      	; 0x237a <GPIO_readPin+0x10c>
			{
				pin_value = LOGIC_HIGH;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	49 c0       	rjmp	.+146    	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    237a:	19 82       	std	Y+1, r1	; 0x01
    237c:	47 c0       	rjmp	.+142    	; 0x240c <GPIO_readPin+0x19e>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    237e:	e0 e3       	ldi	r30, 0x30	; 48
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	88 2f       	mov	r24, r24
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a9 01       	movw	r20, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <GPIO_readPin+0x128>
    2392:	55 95       	asr	r21
    2394:	47 95       	ror	r20
    2396:	8a 95       	dec	r24
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <GPIO_readPin+0x124>
    239a:	ca 01       	movw	r24, r20
    239c:	81 70       	andi	r24, 0x01	; 1
    239e:	90 70       	andi	r25, 0x00	; 0
    23a0:	88 23       	and	r24, r24
    23a2:	19 f0       	breq	.+6      	; 0x23aa <GPIO_readPin+0x13c>
			{
				pin_value = LOGIC_HIGH;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	31 c0       	rjmp	.+98     	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23aa:	19 82       	std	Y+1, r1	; 0x01
    23ac:	2f c0       	rjmp	.+94     	; 0x240c <GPIO_readPin+0x19e>
			}
			break;
		case PORTE_ID:
			if(BIT_IS_SET(PINE,pin_num))
    23ae:	e1 e2       	ldi	r30, 0x21	; 33
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a9 01       	movw	r20, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <GPIO_readPin+0x158>
    23c2:	55 95       	asr	r21
    23c4:	47 95       	ror	r20
    23c6:	8a 95       	dec	r24
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <GPIO_readPin+0x154>
    23ca:	ca 01       	movw	r24, r20
    23cc:	81 70       	andi	r24, 0x01	; 1
    23ce:	90 70       	andi	r25, 0x00	; 0
    23d0:	88 23       	and	r24, r24
    23d2:	19 f0       	breq	.+6      	; 0x23da <GPIO_readPin+0x16c>
			{
				pin_value = LOGIC_HIGH;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	19 c0       	rjmp	.+50     	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23da:	19 82       	std	Y+1, r1	; 0x01
    23dc:	17 c0       	rjmp	.+46     	; 0x240c <GPIO_readPin+0x19e>
			}
			break;
		case PORTF_ID:
			if(BIT_IS_SET(PINF,pin_num))
    23de:	e0 e2       	ldi	r30, 0x20	; 32
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	88 2f       	mov	r24, r24
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a9 01       	movw	r20, r18
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <GPIO_readPin+0x188>
    23f2:	55 95       	asr	r21
    23f4:	47 95       	ror	r20
    23f6:	8a 95       	dec	r24
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <GPIO_readPin+0x184>
    23fa:	ca 01       	movw	r24, r20
    23fc:	81 70       	andi	r24, 0x01	; 1
    23fe:	90 70       	andi	r25, 0x00	; 0
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <GPIO_readPin+0x19c>
			{
				pin_value = LOGIC_HIGH;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	01 c0       	rjmp	.+2      	; 0x240c <GPIO_readPin+0x19e>
			}
			else
			{
				pin_value = LOGIC_LOW;
    240a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	00 d0       	rcall	.+0      	; 0x2424 <GPIO_setupPortDirection+0x6>
    2424:	00 d0       	rcall	.+0      	; 0x2426 <GPIO_setupPortDirection+0x8>
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	86 30       	cpi	r24, 0x06	; 6
    2432:	08 f0       	brcs	.+2      	; 0x2436 <GPIO_setupPortDirection+0x18>
    2434:	46 c0       	rjmp	.+140    	; 0x24c2 <GPIO_setupPortDirection+0xa4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3c 83       	std	Y+4, r19	; 0x04
    243e:	2b 83       	std	Y+3, r18	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	49 f1       	breq	.+82     	; 0x249c <GPIO_setupPortDirection+0x7e>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	23 30       	cpi	r18, 0x03	; 3
    2450:	31 05       	cpc	r19, r1
    2452:	54 f4       	brge	.+20     	; 0x2468 <GPIO_setupPortDirection+0x4a>
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	b1 f0       	breq	.+44     	; 0x2488 <GPIO_setupPortDirection+0x6a>
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	21 30       	cpi	r18, 0x01	; 1
    2462:	31 05       	cpc	r19, r1
    2464:	b1 f0       	breq	.+44     	; 0x2492 <GPIO_setupPortDirection+0x74>
    2466:	2d c0       	rjmp	.+90     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	91 05       	cpc	r25, r1
    2470:	f9 f0       	breq	.+62     	; 0x24b0 <GPIO_setupPortDirection+0x92>
    2472:	2b 81       	ldd	r18, Y+3	; 0x03
    2474:	3c 81       	ldd	r19, Y+4	; 0x04
    2476:	24 30       	cpi	r18, 0x04	; 4
    2478:	31 05       	cpc	r19, r1
    247a:	ac f0       	brlt	.+42     	; 0x24a6 <GPIO_setupPortDirection+0x88>
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	85 30       	cpi	r24, 0x05	; 5
    2482:	91 05       	cpc	r25, r1
    2484:	d1 f0       	breq	.+52     	; 0x24ba <GPIO_setupPortDirection+0x9c>
    2486:	1d c0       	rjmp	.+58     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
		{
		case PORTA_ID:
			DDRA = direction;
    2488:	ea e3       	ldi	r30, 0x3A	; 58
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	80 83       	st	Z, r24
    2490:	18 c0       	rjmp	.+48     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
			break;
		case PORTB_ID:
			DDRB = direction;
    2492:	e7 e3       	ldi	r30, 0x37	; 55
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	80 83       	st	Z, r24
    249a:	13 c0       	rjmp	.+38     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
			break;
		case PORTC_ID:
			DDRC = direction;
    249c:	e4 e3       	ldi	r30, 0x34	; 52
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	80 83       	st	Z, r24
    24a4:	0e c0       	rjmp	.+28     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
			break;
		case PORTD_ID:
			DDRD = direction;
    24a6:	e1 e3       	ldi	r30, 0x31	; 49
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	80 83       	st	Z, r24
    24ae:	09 c0       	rjmp	.+18     	; 0x24c2 <GPIO_setupPortDirection+0xa4>
			break;
		case PORTE_ID:
			DDRE = direction;
    24b0:	e2 e2       	ldi	r30, 0x22	; 34
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	80 83       	st	Z, r24
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <GPIO_setupPortDirection+0xa4>
			break;
		case PORTF_ID:
			DDRF = direction;
    24ba:	e1 e6       	ldi	r30, 0x61	; 97
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <GPIO_writePort+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <GPIO_writePort+0x8>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	86 30       	cpi	r24, 0x06	; 6
    24e4:	08 f0       	brcs	.+2      	; 0x24e8 <GPIO_writePort+0x18>
    24e6:	46 c0       	rjmp	.+140    	; 0x2574 <GPIO_writePort+0xa4>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	3c 83       	std	Y+4, r19	; 0x04
    24f0:	2b 83       	std	Y+3, r18	; 0x03
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	91 05       	cpc	r25, r1
    24fa:	49 f1       	breq	.+82     	; 0x254e <GPIO_writePort+0x7e>
    24fc:	2b 81       	ldd	r18, Y+3	; 0x03
    24fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2500:	23 30       	cpi	r18, 0x03	; 3
    2502:	31 05       	cpc	r19, r1
    2504:	54 f4       	brge	.+20     	; 0x251a <GPIO_writePort+0x4a>
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	b1 f0       	breq	.+44     	; 0x253a <GPIO_writePort+0x6a>
    250e:	2b 81       	ldd	r18, Y+3	; 0x03
    2510:	3c 81       	ldd	r19, Y+4	; 0x04
    2512:	21 30       	cpi	r18, 0x01	; 1
    2514:	31 05       	cpc	r19, r1
    2516:	b1 f0       	breq	.+44     	; 0x2544 <GPIO_writePort+0x74>
    2518:	2d c0       	rjmp	.+90     	; 0x2574 <GPIO_writePort+0xa4>
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	84 30       	cpi	r24, 0x04	; 4
    2520:	91 05       	cpc	r25, r1
    2522:	f9 f0       	breq	.+62     	; 0x2562 <GPIO_writePort+0x92>
    2524:	2b 81       	ldd	r18, Y+3	; 0x03
    2526:	3c 81       	ldd	r19, Y+4	; 0x04
    2528:	24 30       	cpi	r18, 0x04	; 4
    252a:	31 05       	cpc	r19, r1
    252c:	ac f0       	brlt	.+42     	; 0x2558 <GPIO_writePort+0x88>
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	85 30       	cpi	r24, 0x05	; 5
    2534:	91 05       	cpc	r25, r1
    2536:	d1 f0       	breq	.+52     	; 0x256c <GPIO_writePort+0x9c>
    2538:	1d c0       	rjmp	.+58     	; 0x2574 <GPIO_writePort+0xa4>
		{
		case PORTA_ID:
			PORTA = value;
    253a:	eb e3       	ldi	r30, 0x3B	; 59
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	80 83       	st	Z, r24
    2542:	18 c0       	rjmp	.+48     	; 0x2574 <GPIO_writePort+0xa4>
			break;
		case PORTB_ID:
			PORTB = value;
    2544:	e8 e3       	ldi	r30, 0x38	; 56
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	80 83       	st	Z, r24
    254c:	13 c0       	rjmp	.+38     	; 0x2574 <GPIO_writePort+0xa4>
			break;
		case PORTC_ID:
			PORTC = value;
    254e:	e5 e3       	ldi	r30, 0x35	; 53
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	80 83       	st	Z, r24
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <GPIO_writePort+0xa4>
			break;
		case PORTD_ID:
			PORTD = value;
    2558:	e2 e3       	ldi	r30, 0x32	; 50
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	80 83       	st	Z, r24
    2560:	09 c0       	rjmp	.+18     	; 0x2574 <GPIO_writePort+0xa4>
			break;
		case PORTE_ID:
			PORTE = value;
    2562:	e3 e2       	ldi	r30, 0x23	; 35
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	80 83       	st	Z, r24
    256a:	04 c0       	rjmp	.+8      	; 0x2574 <GPIO_writePort+0xa4>
			break;
		case PORTF_ID:
			PORTF = value;
    256c:	e2 e6       	ldi	r30, 0x62	; 98
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	80 83       	st	Z, r24
			break;
		}
	}
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <GPIO_readPort+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <GPIO_readPort+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2590:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	86 30       	cpi	r24, 0x06	; 6
    2596:	08 f0       	brcs	.+2      	; 0x259a <GPIO_readPort+0x18>
    2598:	46 c0       	rjmp	.+140    	; 0x2626 <GPIO_readPort+0xa4>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3c 83       	std	Y+4, r19	; 0x04
    25a2:	2b 83       	std	Y+3, r18	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	91 05       	cpc	r25, r1
    25ac:	49 f1       	breq	.+82     	; 0x2600 <GPIO_readPort+0x7e>
    25ae:	2b 81       	ldd	r18, Y+3	; 0x03
    25b0:	3c 81       	ldd	r19, Y+4	; 0x04
    25b2:	23 30       	cpi	r18, 0x03	; 3
    25b4:	31 05       	cpc	r19, r1
    25b6:	54 f4       	brge	.+20     	; 0x25cc <GPIO_readPort+0x4a>
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	b1 f0       	breq	.+44     	; 0x25ec <GPIO_readPort+0x6a>
    25c0:	2b 81       	ldd	r18, Y+3	; 0x03
    25c2:	3c 81       	ldd	r19, Y+4	; 0x04
    25c4:	21 30       	cpi	r18, 0x01	; 1
    25c6:	31 05       	cpc	r19, r1
    25c8:	b1 f0       	breq	.+44     	; 0x25f6 <GPIO_readPort+0x74>
    25ca:	2d c0       	rjmp	.+90     	; 0x2626 <GPIO_readPort+0xa4>
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	84 30       	cpi	r24, 0x04	; 4
    25d2:	91 05       	cpc	r25, r1
    25d4:	f9 f0       	breq	.+62     	; 0x2614 <GPIO_readPort+0x92>
    25d6:	2b 81       	ldd	r18, Y+3	; 0x03
    25d8:	3c 81       	ldd	r19, Y+4	; 0x04
    25da:	24 30       	cpi	r18, 0x04	; 4
    25dc:	31 05       	cpc	r19, r1
    25de:	ac f0       	brlt	.+42     	; 0x260a <GPIO_readPort+0x88>
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	85 30       	cpi	r24, 0x05	; 5
    25e6:	91 05       	cpc	r25, r1
    25e8:	d1 f0       	breq	.+52     	; 0x261e <GPIO_readPort+0x9c>
    25ea:	1d c0       	rjmp	.+58     	; 0x2626 <GPIO_readPort+0xa4>
		{
		case PORTA_ID:
			value = PINA;
    25ec:	e9 e3       	ldi	r30, 0x39	; 57
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	18 c0       	rjmp	.+48     	; 0x2626 <GPIO_readPort+0xa4>
			break;
		case PORTB_ID:
			value = PINB;
    25f6:	e6 e3       	ldi	r30, 0x36	; 54
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	13 c0       	rjmp	.+38     	; 0x2626 <GPIO_readPort+0xa4>
			break;
		case PORTC_ID:
			value = PINC;
    2600:	e3 e3       	ldi	r30, 0x33	; 51
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <GPIO_readPort+0xa4>
			break;
		case PORTD_ID:
			value = PIND;
    260a:	e0 e3       	ldi	r30, 0x30	; 48
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	09 c0       	rjmp	.+18     	; 0x2626 <GPIO_readPort+0xa4>
			break;
		case PORTE_ID:
			value = PINE;
    2614:	e1 e2       	ldi	r30, 0x21	; 33
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	04 c0       	rjmp	.+8      	; 0x2626 <GPIO_readPort+0xa4>
			break;
		case PORTF_ID:
			value = PINF;
    261e:	e0 e2       	ldi	r30, 0x20	; 32
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <DIO_init>:


void DIO_init(void)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <DIO_init+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <DIO_init+0x8>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    2642:	1c 82       	std	Y+4, r1	; 0x04
    2644:	2f c0       	rjmp	.+94     	; 0x26a4 <DIO_init+0x6e>
		uint8_t portid=dio_config_array[loop].port_id;
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	c9 01       	movw	r24, r18
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	82 0f       	add	r24, r18
    2654:	93 1f       	adc	r25, r19
    2656:	fc 01       	movw	r30, r24
    2658:	e5 5e       	subi	r30, 0xE5	; 229
    265a:	fd 4f       	sbci	r31, 0xFD	; 253
    265c:	80 81       	ld	r24, Z
    265e:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[loop].pin_num;
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	c9 01       	movw	r24, r18
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	82 0f       	add	r24, r18
    266e:	93 1f       	adc	r25, r19
    2670:	fc 01       	movw	r30, r24
    2672:	e4 5e       	subi	r30, 0xE4	; 228
    2674:	fd 4f       	sbci	r31, 0xFD	; 253
    2676:	80 81       	ld	r24, Z
    2678:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t direction=dio_config_array[loop].direction;
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	c9 01       	movw	r24, r18
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	82 0f       	add	r24, r18
    2688:	93 1f       	adc	r25, r19
    268a:	fc 01       	movw	r30, r24
    268c:	e3 5e       	subi	r30, 0xE3	; 227
    268e:	fd 4f       	sbci	r31, 0xFD	; 253
    2690:	80 81       	ld	r24, Z
    2692:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(portid,pin_num,direction);
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	6a 81       	ldd	r22, Y+2	; 0x02
    2698:	49 81       	ldd	r20, Y+1	; 0x01
    269a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>


void DIO_init(void)
{
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8c 83       	std	Y+4, r24	; 0x04
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	86 30       	cpi	r24, 0x06	; 6
    26a8:	70 f2       	brcs	.-100    	; 0x2646 <DIO_init+0x10>
		uint8_t portid=dio_config_array[loop].port_id;
		uint8_t pin_num=dio_config_array[loop].pin_num;
		uint8_t direction=dio_config_array[loop].direction;
		GPIO_setupPinDirection(portid,pin_num,direction);
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <DIO_ChannelGroupWrite>:


void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
    26b8:	af 92       	push	r10
    26ba:	cf 92       	push	r12
    26bc:	df 92       	push	r13
    26be:	ef 92       	push	r14
    26c0:	ff 92       	push	r15
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	65 97       	sbiw	r28, 0x15	; 21
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 82       	std	Y+7, r12	; 0x07
    26dc:	d8 86       	std	Y+8, r13	; 0x08
    26de:	e9 86       	std	Y+9, r14	; 0x09
    26e0:	fa 86       	std	Y+10, r15	; 0x0a
    26e2:	0b 87       	std	Y+11, r16	; 0x0b
    26e4:	1c 87       	std	Y+12, r17	; 0x0c
    26e6:	2d 87       	std	Y+13, r18	; 0x0d
    26e8:	3e 87       	std	Y+14, r19	; 0x0e
    26ea:	4f 87       	std	Y+15, r20	; 0x0f
    26ec:	58 8b       	std	Y+16, r21	; 0x10
    26ee:	69 8b       	std	Y+17, r22	; 0x11
    26f0:	7a 8b       	std	Y+18, r23	; 0x12
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	ad 8a       	std	Y+21, r10	; 0x15
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    26f8:	8f 81       	ldd	r24, Y+7	; 0x07
    26fa:	98 85       	ldd	r25, Y+8	; 0x08
    26fc:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    26fe:	1e 82       	std	Y+6, r1	; 0x06
    2700:	4c c0       	rjmp	.+152    	; 0x279a <DIO_ChannelGroupWrite+0xe2>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    2702:	8e 81       	ldd	r24, Y+6	; 0x06
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	9c 01       	movw	r18, r24
    270c:	22 0f       	add	r18, r18
    270e:	33 1f       	adc	r19, r19
    2710:	ce 01       	movw	r24, r28
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	82 0f       	add	r24, r18
    2716:	93 1f       	adc	r25, r19
    2718:	fc 01       	movw	r30, r24
    271a:	36 96       	adiw	r30, 0x06	; 6
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    2722:	8c 81       	ldd	r24, Y+4	; 0x04
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	c9 01       	movw	r24, r18
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	82 0f       	add	r24, r18
    2730:	93 1f       	adc	r25, r19
    2732:	fc 01       	movw	r30, r24
    2734:	e5 5e       	subi	r30, 0xE5	; 229
    2736:	fd 4f       	sbci	r31, 0xFD	; 253
    2738:	80 81       	ld	r24, Z
    273a:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	c9 01       	movw	r24, r18
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	82 0f       	add	r24, r18
    274a:	93 1f       	adc	r25, r19
    274c:	fc 01       	movw	r30, r24
    274e:	e4 5e       	subi	r30, 0xE4	; 228
    2750:	fd 4f       	sbci	r31, 0xFD	; 253
    2752:	80 81       	ld	r24, Z
    2754:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t bit_data=READ_BIT(data,loop);
    2756:	8e 81       	ldd	r24, Y+6	; 0x06
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_ChannelGroupWrite+0xae>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	2a 95       	dec	r18
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_ChannelGroupWrite+0xaa>
    276a:	98 2f       	mov	r25, r24
    276c:	8d 89       	ldd	r24, Y+21	; 0x15
    276e:	89 23       	and	r24, r25
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8e 81       	ldd	r24, Y+6	; 0x06
    2776:	88 2f       	mov	r24, r24
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a9 01       	movw	r20, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_ChannelGroupWrite+0xca>
    277e:	55 95       	asr	r21
    2780:	47 95       	ror	r20
    2782:	8a 95       	dec	r24
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_ChannelGroupWrite+0xc6>
    2786:	ca 01       	movw	r24, r20
    2788:	89 83       	std	Y+1, r24	; 0x01
		GPIO_writePin(portid,pin_num,bit_data);
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	6a 81       	ldd	r22, Y+2	; 0x02
    278e:	49 81       	ldd	r20, Y+1	; 0x01
    2790:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    2794:	8e 81       	ldd	r24, Y+6	; 0x06
    2796:	8f 5f       	subi	r24, 0xFF	; 255
    2798:	8e 83       	std	Y+6, r24	; 0x06
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	98 17       	cp	r25, r24
    27a0:	08 f4       	brcc	.+2      	; 0x27a4 <DIO_ChannelGroupWrite+0xec>
    27a2:	af cf       	rjmp	.-162    	; 0x2702 <DIO_ChannelGroupWrite+0x4a>
		GPIO_writePin(portid,pin_num,bit_data);

	}


}
    27a4:	65 96       	adiw	r28, 0x15	; 21
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
    27c0:	af 90       	pop	r10
    27c2:	08 95       	ret

000027c4 <DIO_ChannelGroupRead>:


void DIO_ChannelGroupRead(ChannelGroupType channel_group_variabe ,uint8_t * data_ptr)
{
    27c4:	af 92       	push	r10
    27c6:	bf 92       	push	r11
    27c8:	cf 92       	push	r12
    27ca:	df 92       	push	r13
    27cc:	ef 92       	push	r14
    27ce:	ff 92       	push	r15
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	66 97       	sbiw	r28, 0x16	; 22
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 82       	std	Y+7, r12	; 0x07
    27ea:	d8 86       	std	Y+8, r13	; 0x08
    27ec:	e9 86       	std	Y+9, r14	; 0x09
    27ee:	fa 86       	std	Y+10, r15	; 0x0a
    27f0:	0b 87       	std	Y+11, r16	; 0x0b
    27f2:	1c 87       	std	Y+12, r17	; 0x0c
    27f4:	2d 87       	std	Y+13, r18	; 0x0d
    27f6:	3e 87       	std	Y+14, r19	; 0x0e
    27f8:	4f 87       	std	Y+15, r20	; 0x0f
    27fa:	58 8b       	std	Y+16, r21	; 0x10
    27fc:	69 8b       	std	Y+17, r22	; 0x11
    27fe:	7a 8b       	std	Y+18, r23	; 0x12
    2800:	8b 8b       	std	Y+19, r24	; 0x13
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	be 8a       	std	Y+22, r11	; 0x16
    2806:	ad 8a       	std	Y+21, r10	; 0x15

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    2808:	8f 81       	ldd	r24, Y+7	; 0x07
    280a:	98 85       	ldd	r25, Y+8	; 0x08
    280c:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    280e:	1e 82       	std	Y+6, r1	; 0x06
    2810:	5d c0       	rjmp	.+186    	; 0x28cc <DIO_ChannelGroupRead+0x108>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	9c 01       	movw	r18, r24
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	82 0f       	add	r24, r18
    2826:	93 1f       	adc	r25, r19
    2828:	fc 01       	movw	r30, r24
    282a:	36 96       	adiw	r30, 0x06	; 6
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	c9 01       	movw	r24, r18
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	82 0f       	add	r24, r18
    2840:	93 1f       	adc	r25, r19
    2842:	fc 01       	movw	r30, r24
    2844:	e5 5e       	subi	r30, 0xE5	; 229
    2846:	fd 4f       	sbci	r31, 0xFD	; 253
    2848:	80 81       	ld	r24, Z
    284a:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	c9 01       	movw	r24, r18
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	82 0f       	add	r24, r18
    285a:	93 1f       	adc	r25, r19
    285c:	fc 01       	movw	r30, r24
    285e:	e4 5e       	subi	r30, 0xE4	; 228
    2860:	fd 4f       	sbci	r31, 0xFD	; 253
    2862:	80 81       	ld	r24, Z
    2864:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t data = GPIO_readPin(portid, pin_num);
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	6a 81       	ldd	r22, Y+2	; 0x02
    286a:	0e 94 37 11 	call	0x226e	; 0x226e <GPIO_readPin>
    286e:	89 83       	std	Y+1, r24	; 0x01
		if(data == LOGIC_HIGH){
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	a1 f4       	brne	.+40     	; 0x289e <DIO_ChannelGroupRead+0xda>
			SET_BIT(* data_ptr,loop);
    2876:	ed 89       	ldd	r30, Y+21	; 0x15
    2878:	fe 89       	ldd	r31, Y+22	; 0x16
    287a:	80 81       	ld	r24, Z
    287c:	48 2f       	mov	r20, r24
    287e:	8e 81       	ldd	r24, Y+6	; 0x06
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 2e       	mov	r0, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_ChannelGroupRead+0xcc>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_ChannelGroupRead+0xc8>
    2894:	84 2b       	or	r24, r20
    2896:	ed 89       	ldd	r30, Y+21	; 0x15
    2898:	fe 89       	ldd	r31, Y+22	; 0x16
    289a:	80 83       	st	Z, r24
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <DIO_ChannelGroupRead+0x102>
		}else{
			CLEAR_BIT(* data_ptr,loop);
    289e:	ed 89       	ldd	r30, Y+21	; 0x15
    28a0:	fe 89       	ldd	r31, Y+22	; 0x16
    28a2:	80 81       	ld	r24, Z
    28a4:	48 2f       	mov	r20, r24
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	02 2e       	mov	r0, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <DIO_ChannelGroupRead+0xf4>
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	0a 94       	dec	r0
    28ba:	e2 f7       	brpl	.-8      	; 0x28b4 <DIO_ChannelGroupRead+0xf0>
    28bc:	80 95       	com	r24
    28be:	84 23       	and	r24, r20
    28c0:	ed 89       	ldd	r30, Y+21	; 0x15
    28c2:	fe 89       	ldd	r31, Y+22	; 0x16
    28c4:	80 83       	st	Z, r24
{

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	8e 83       	std	Y+6, r24	; 0x06
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	98 17       	cp	r25, r24
    28d2:	08 f4       	brcc	.+2      	; 0x28d6 <DIO_ChannelGroupRead+0x112>
    28d4:	9e cf       	rjmp	.-196    	; 0x2812 <DIO_ChannelGroupRead+0x4e>
		}else{
			CLEAR_BIT(* data_ptr,loop);
		}
	}

}
    28d6:	66 96       	adiw	r28, 0x16	; 22
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
    28f4:	af 90       	pop	r10
    28f6:	08 95       	ret

000028f8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	2e 97       	sbiw	r28, 0x0e	; 14
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	62 e0       	ldi	r22, 0x02	; 2
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 ea       	ldi	r26, 0xA0	; 160
    2926:	b1 e4       	ldi	r27, 0x41	; 65
    2928:	8b 87       	std	Y+11, r24	; 0x0b
    292a:	9c 87       	std	Y+12, r25	; 0x0c
    292c:	ad 87       	std	Y+13, r26	; 0x0d
    292e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	55 e4       	ldi	r21, 0x45	; 69
    2940:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	a9 87       	std	Y+9, r26	; 0x09
    294e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <LCD_init+0x7a>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <LCD_init+0xda>
    29b4:	80 e9       	ldi	r24, 0x90	; 144
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_init+0xc8>
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <LCD_init+0xbc>
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_init+0x104>
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2a04:	83 e0       	ldi	r24, 0x03	; 3
    2a06:	64 e0       	ldi	r22, 0x04	; 4
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	65 e0       	ldi	r22, 0x05	; 5
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	66 e0       	ldi	r22, 0x06	; 6
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	67 e0       	ldi	r22, 0x07	; 7
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2a2c:	83 e3       	ldi	r24, 0x33	; 51
    2a2e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2a32:	82 e3       	ldi	r24, 0x32	; 50
    2a34:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2a38:	88 e2       	ldi	r24, 0x28	; 40
    2a3a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2a3e:	8c e0       	ldi	r24, 0x0C	; 12
    2a40:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
}
    2a4a:	2e 96       	adiw	r28, 0x0e	; 14
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	c3 56       	subi	r28, 0x63	; 99
    2a6a:	d0 40       	sbci	r29, 0x00	; 0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	fe 01       	movw	r30, r28
    2a78:	ed 59       	subi	r30, 0x9D	; 157
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2a7e:	83 e0       	ldi	r24, 0x03	; 3
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e1 5a       	subi	r30, 0xA1	; 161
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	a0 e8       	ldi	r26, 0x80	; 128
    2a94:	bf e3       	ldi	r27, 0x3F	; 63
    2a96:	80 83       	st	Z, r24
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	a2 83       	std	Z+2, r26	; 0x02
    2a9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	05 5a       	subi	r16, 0xA5	; 165
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e1 5a       	subi	r30, 0xA1	; 161
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a e7       	ldi	r20, 0x7A	; 122
    2ab8:	55 e4       	ldi	r21, 0x45	; 69
    2aba:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2acc:	fe 01       	movw	r30, r28
    2ace:	e5 5a       	subi	r30, 0xA5	; 165
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	44 f4       	brge	.+16     	; 0x2afa <LCD_sendCommand+0x9e>
		__ticks = 1;
    2aea:	fe 01       	movw	r30, r28
    2aec:	e7 5a       	subi	r30, 0xA7	; 167
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	64 c0       	rjmp	.+200    	; 0x2bc2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2afa:	fe 01       	movw	r30, r28
    2afc:	e5 5a       	subi	r30, 0xA5	; 165
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	60 81       	ld	r22, Z
    2b02:	71 81       	ldd	r23, Z+1	; 0x01
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	3f ef       	ldi	r19, 0xFF	; 255
    2b0c:	4f e7       	ldi	r20, 0x7F	; 127
    2b0e:	57 e4       	ldi	r21, 0x47	; 71
    2b10:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    2b14:	18 16       	cp	r1, r24
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <LCD_sendCommand+0xbe>
    2b18:	43 c0       	rjmp	.+134    	; 0x2ba0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e1 5a       	subi	r30, 0xA1	; 161
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	51 e4       	ldi	r21, 0x41	; 65
    2b30:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8e 01       	movw	r16, r28
    2b3a:	07 5a       	subi	r16, 0xA7	; 167
    2b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
    2b50:	1f c0       	rjmp	.+62     	; 0x2b90 <LCD_sendCommand+0x134>
    2b52:	fe 01       	movw	r30, r28
    2b54:	e9 5a       	subi	r30, 0xA9	; 169
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	fe 01       	movw	r30, r28
    2b62:	e9 5a       	subi	r30, 0xA9	; 169
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_sendCommand+0x10e>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e9 5a       	subi	r30, 0xA9	; 169
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	de 01       	movw	r26, r28
    2b7a:	a7 5a       	subi	r26, 0xA7	; 167
    2b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e7 5a       	subi	r30, 0xA7	; 167
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	9c 93       	st	X, r25
    2b8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	fe 01       	movw	r30, r28
    2b92:	e7 5a       	subi	r30, 0xA7	; 167
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	d1 f6       	brne	.-76     	; 0x2b52 <LCD_sendCommand+0xf6>
    2b9e:	27 c0       	rjmp	.+78     	; 0x2bee <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	07 5a       	subi	r16, 0xA7	; 167
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e5 5a       	subi	r30, 0xA5	; 165
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	de 01       	movw	r26, r28
    2bc4:	ab 5a       	subi	r26, 0xAB	; 171
    2bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e7 5a       	subi	r30, 0xA7	; 167
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	8d 93       	st	X+, r24
    2bd4:	9c 93       	st	X, r25
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	eb 5a       	subi	r30, 0xAB	; 171
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_sendCommand+0x184>
    2be4:	fe 01       	movw	r30, r28
    2be6:	eb 5a       	subi	r30, 0xAB	; 171
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bee:	83 e0       	ldi	r24, 0x03	; 3
    2bf0:	62 e0       	ldi	r22, 0x02	; 2
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 5a       	subi	r30, 0xAF	; 175
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a0 e8       	ldi	r26, 0x80	; 128
    2c04:	bf e3       	ldi	r27, 0x3F	; 63
    2c06:	80 83       	st	Z, r24
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	a2 83       	std	Z+2, r26	; 0x02
    2c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0e:	8e 01       	movw	r16, r28
    2c10:	03 5b       	subi	r16, 0xB3	; 179
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	fe 01       	movw	r30, r28
    2c16:	ef 5a       	subi	r30, 0xAF	; 175
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	60 81       	ld	r22, Z
    2c1c:	71 81       	ldd	r23, Z+1	; 0x01
    2c1e:	82 81       	ldd	r24, Z+2	; 0x02
    2c20:	93 81       	ldd	r25, Z+3	; 0x03
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	4a e7       	ldi	r20, 0x7A	; 122
    2c28:	55 e4       	ldi	r21, 0x45	; 69
    2c2a:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	f8 01       	movw	r30, r16
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e3 5b       	subi	r30, 0xB3	; 179
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	44 f4       	brge	.+16     	; 0x2c6a <LCD_sendCommand+0x20e>
		__ticks = 1;
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e5 5b       	subi	r30, 0xB5	; 181
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	64 c0       	rjmp	.+200    	; 0x2d32 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e3 5b       	subi	r30, 0xB3	; 179
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	0c f0       	brlt	.+2      	; 0x2c8a <LCD_sendCommand+0x22e>
    2c88:	43 c0       	rjmp	.+134    	; 0x2d10 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 5a       	subi	r30, 0xAF	; 175
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8e 01       	movw	r16, r28
    2caa:	05 5b       	subi	r16, 0xB5	; 181
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	f8 01       	movw	r30, r16
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	1f c0       	rjmp	.+62     	; 0x2d00 <LCD_sendCommand+0x2a4>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e7 5b       	subi	r30, 0xB7	; 183
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 e9       	ldi	r24, 0x90	; 144
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e7 5b       	subi	r30, 0xB7	; 183
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_sendCommand+0x27e>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e7 5b       	subi	r30, 0xB7	; 183
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	de 01       	movw	r26, r28
    2cea:	a5 5b       	subi	r26, 0xB5	; 181
    2cec:	bf 4f       	sbci	r27, 0xFF	; 255
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e5 5b       	subi	r30, 0xB5	; 181
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	11 96       	adiw	r26, 0x01	; 1
    2cfc:	9c 93       	st	X, r25
    2cfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 5b       	subi	r30, 0xB5	; 181
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	d1 f6       	brne	.-76     	; 0x2cc2 <LCD_sendCommand+0x266>
    2d0e:	27 c0       	rjmp	.+78     	; 0x2d5e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	8e 01       	movw	r16, r28
    2d12:	05 5b       	subi	r16, 0xB5	; 181
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	fe 01       	movw	r30, r28
    2d18:	e3 5b       	subi	r30, 0xB3	; 179
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	de 01       	movw	r26, r28
    2d34:	a9 5b       	subi	r26, 0xB9	; 185
    2d36:	bf 4f       	sbci	r27, 0xFF	; 255
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e5 5b       	subi	r30, 0xB5	; 181
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	8d 93       	st	X+, r24
    2d44:	9c 93       	st	X, r25
    2d46:	fe 01       	movw	r30, r28
    2d48:	e9 5b       	subi	r30, 0xB9	; 185
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_sendCommand+0x2f4>
    2d54:	fe 01       	movw	r30, r28
    2d56:	e9 5b       	subi	r30, 0xB9	; 185
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ed 59       	subi	r30, 0x9D	; 157
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	80 71       	andi	r24, 0x10	; 16
    2d6c:	90 70       	andi	r25, 0x00	; 0
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	95 95       	asr	r25
    2d74:	87 95       	ror	r24
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	95 95       	asr	r25
    2d7c:	87 95       	ror	r24
    2d7e:	98 2f       	mov	r25, r24
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	64 e0       	ldi	r22, 0x04	; 4
    2d84:	49 2f       	mov	r20, r25
    2d86:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	ed 59       	subi	r30, 0x9D	; 157
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	80 72       	andi	r24, 0x20	; 32
    2d98:	90 70       	andi	r25, 0x00	; 0
    2d9a:	95 95       	asr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	95 95       	asr	r25
    2da0:	87 95       	ror	r24
    2da2:	95 95       	asr	r25
    2da4:	87 95       	ror	r24
    2da6:	95 95       	asr	r25
    2da8:	87 95       	ror	r24
    2daa:	95 95       	asr	r25
    2dac:	87 95       	ror	r24
    2dae:	98 2f       	mov	r25, r24
    2db0:	83 e0       	ldi	r24, 0x03	; 3
    2db2:	65 e0       	ldi	r22, 0x05	; 5
    2db4:	49 2f       	mov	r20, r25
    2db6:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ed 59       	subi	r30, 0x9D	; 157
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	80 74       	andi	r24, 0x40	; 64
    2dc8:	90 70       	andi	r25, 0x00	; 0
    2dca:	08 2e       	mov	r0, r24
    2dcc:	89 2f       	mov	r24, r25
    2dce:	00 0c       	add	r0, r0
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 0b       	sbc	r25, r25
    2dd4:	00 0c       	add	r0, r0
    2dd6:	88 1f       	adc	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	98 2f       	mov	r25, r24
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	66 e0       	ldi	r22, 0x06	; 6
    2de0:	49 2f       	mov	r20, r25
    2de2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 59       	subi	r30, 0x9D	; 157
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	98 2f       	mov	r25, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	99 27       	eor	r25, r25
    2df4:	99 1f       	adc	r25, r25
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	67 e0       	ldi	r22, 0x07	; 7
    2dfa:	49 2f       	mov	r20, r25
    2dfc:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 5b       	subi	r30, 0xBD	; 189
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	a0 e8       	ldi	r26, 0x80	; 128
    2e0c:	bf e3       	ldi	r27, 0x3F	; 63
    2e0e:	80 83       	st	Z, r24
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	a2 83       	std	Z+2, r26	; 0x02
    2e14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e16:	8e 01       	movw	r16, r28
    2e18:	01 5c       	subi	r16, 0xC1	; 193
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ed 5b       	subi	r30, 0xBD	; 189
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a e7       	ldi	r20, 0x7A	; 122
    2e30:	55 e4       	ldi	r21, 0x45	; 69
    2e32:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 83       	st	Z, r24
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	a2 83       	std	Z+2, r26	; 0x02
    2e42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e44:	fe 01       	movw	r30, r28
    2e46:	ff 96       	adiw	r30, 0x3f	; 63
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    2e5c:	88 23       	and	r24, r24
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9e af       	std	Y+62, r25	; 0x3e
    2e66:	8d af       	std	Y+61, r24	; 0x3d
    2e68:	46 c0       	rjmp	.+140    	; 0x2ef6 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ff 96       	adiw	r30, 0x3f	; 63
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	64 f5       	brge	.+88     	; 0x2ede <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	fe 01       	movw	r30, r28
    2e88:	ed 5b       	subi	r30, 0xBD	; 189
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e2       	ldi	r20, 0x20	; 32
    2e9a:	51 e4       	ldi	r21, 0x41	; 65
    2e9c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9e af       	std	Y+62, r25	; 0x3e
    2eb2:	8d af       	std	Y+61, r24	; 0x3d
    2eb4:	0f c0       	rjmp	.+30     	; 0x2ed4 <LCD_sendCommand+0x478>
    2eb6:	80 e9       	ldi	r24, 0x90	; 144
    2eb8:	91 e0       	ldi	r25, 0x01	; 1
    2eba:	9c af       	std	Y+60, r25	; 0x3c
    2ebc:	8b af       	std	Y+59, r24	; 0x3b
    2ebe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ec0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCD_sendCommand+0x466>
    2ec6:	9c af       	std	Y+60, r25	; 0x3c
    2ec8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ecc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	9e af       	std	Y+62, r25	; 0x3e
    2ed2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	69 f7       	brne	.-38     	; 0x2eb6 <LCD_sendCommand+0x45a>
    2edc:	16 c0       	rjmp	.+44     	; 0x2f0a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ff 96       	adiw	r30, 0x3f	; 63
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9e af       	std	Y+62, r25	; 0x3e
    2ef4:	8d af       	std	Y+61, r24	; 0x3d
    2ef6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2efa:	9a af       	std	Y+58, r25	; 0x3a
    2efc:	89 af       	std	Y+57, r24	; 0x39
    2efe:	89 ad       	ldd	r24, Y+57	; 0x39
    2f00:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_sendCommand+0x4a6>
    2f06:	9a af       	std	Y+58, r25	; 0x3a
    2f08:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f0a:	83 e0       	ldi	r24, 0x03	; 3
    2f0c:	62 e0       	ldi	r22, 0x02	; 2
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a0 e8       	ldi	r26, 0x80	; 128
    2f1a:	bf e3       	ldi	r27, 0x3F	; 63
    2f1c:	8d ab       	std	Y+53, r24	; 0x35
    2f1e:	9e ab       	std	Y+54, r25	; 0x36
    2f20:	af ab       	std	Y+55, r26	; 0x37
    2f22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f24:	6d a9       	ldd	r22, Y+53	; 0x35
    2f26:	7e a9       	ldd	r23, Y+54	; 0x36
    2f28:	8f a9       	ldd	r24, Y+55	; 0x37
    2f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a e7       	ldi	r20, 0x7A	; 122
    2f32:	55 e4       	ldi	r21, 0x45	; 69
    2f34:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	89 ab       	std	Y+49, r24	; 0x31
    2f3e:	9a ab       	std	Y+50, r25	; 0x32
    2f40:	ab ab       	std	Y+51, r26	; 0x33
    2f42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f44:	69 a9       	ldd	r22, Y+49	; 0x31
    2f46:	7a a9       	ldd	r23, Y+50	; 0x32
    2f48:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e8       	ldi	r20, 0x80	; 128
    2f52:	5f e3       	ldi	r21, 0x3F	; 63
    2f54:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    2f58:	88 23       	and	r24, r24
    2f5a:	2c f4       	brge	.+10     	; 0x2f66 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	98 ab       	std	Y+48, r25	; 0x30
    2f62:	8f a7       	std	Y+47, r24	; 0x2f
    2f64:	3f c0       	rjmp	.+126    	; 0x2fe4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2f66:	69 a9       	ldd	r22, Y+49	; 0x31
    2f68:	7a a9       	ldd	r23, Y+50	; 0x32
    2f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	3f ef       	ldi	r19, 0xFF	; 255
    2f72:	4f e7       	ldi	r20, 0x7F	; 127
    2f74:	57 e4       	ldi	r21, 0x47	; 71
    2f76:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    2f7a:	18 16       	cp	r1, r24
    2f7c:	4c f5       	brge	.+82     	; 0x2fd0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f80:	7e a9       	ldd	r23, Y+54	; 0x36
    2f82:	8f a9       	ldd	r24, Y+55	; 0x37
    2f84:	98 ad       	ldd	r25, Y+56	; 0x38
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e2       	ldi	r20, 0x20	; 32
    2f8c:	51 e4       	ldi	r21, 0x41	; 65
    2f8e:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	98 ab       	std	Y+48, r25	; 0x30
    2fa4:	8f a7       	std	Y+47, r24	; 0x2f
    2fa6:	0f c0       	rjmp	.+30     	; 0x2fc6 <LCD_sendCommand+0x56a>
    2fa8:	80 e9       	ldi	r24, 0x90	; 144
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	9e a7       	std	Y+46, r25	; 0x2e
    2fae:	8d a7       	std	Y+45, r24	; 0x2d
    2fb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_sendCommand+0x558>
    2fb8:	9e a7       	std	Y+46, r25	; 0x2e
    2fba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	98 ab       	std	Y+48, r25	; 0x30
    2fc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	69 f7       	brne	.-38     	; 0x2fa8 <LCD_sendCommand+0x54c>
    2fce:	14 c0       	rjmp	.+40     	; 0x2ff8 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd8:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	98 ab       	std	Y+48, r25	; 0x30
    2fe2:	8f a7       	std	Y+47, r24	; 0x2f
    2fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe8:	9c a7       	std	Y+44, r25	; 0x2c
    2fea:	8b a7       	std	Y+43, r24	; 0x2b
    2fec:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fee:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <LCD_sendCommand+0x594>
    2ff4:	9c a7       	std	Y+44, r25	; 0x2c
    2ff6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ff8:	83 e0       	ldi	r24, 0x03	; 3
    2ffa:	62 e0       	ldi	r22, 0x02	; 2
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e8       	ldi	r26, 0x80	; 128
    3008:	bf e3       	ldi	r27, 0x3F	; 63
    300a:	8f a3       	std	Y+39, r24	; 0x27
    300c:	98 a7       	std	Y+40, r25	; 0x28
    300e:	a9 a7       	std	Y+41, r26	; 0x29
    3010:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6f a1       	ldd	r22, Y+39	; 0x27
    3014:	78 a5       	ldd	r23, Y+40	; 0x28
    3016:	89 a5       	ldd	r24, Y+41	; 0x29
    3018:	9a a5       	ldd	r25, Y+42	; 0x2a
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a e7       	ldi	r20, 0x7A	; 122
    3020:	55 e4       	ldi	r21, 0x45	; 69
    3022:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8b a3       	std	Y+35, r24	; 0x23
    302c:	9c a3       	std	Y+36, r25	; 0x24
    302e:	ad a3       	std	Y+37, r26	; 0x25
    3030:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3032:	6b a1       	ldd	r22, Y+35	; 0x23
    3034:	7c a1       	ldd	r23, Y+36	; 0x24
    3036:	8d a1       	ldd	r24, Y+37	; 0x25
    3038:	9e a1       	ldd	r25, Y+38	; 0x26
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9a a3       	std	Y+34, r25	; 0x22
    3050:	89 a3       	std	Y+33, r24	; 0x21
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3054:	6b a1       	ldd	r22, Y+35	; 0x23
    3056:	7c a1       	ldd	r23, Y+36	; 0x24
    3058:	8d a1       	ldd	r24, Y+37	; 0x25
    305a:	9e a1       	ldd	r25, Y+38	; 0x26
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6f a1       	ldd	r22, Y+39	; 0x27
    306e:	78 a5       	ldd	r23, Y+40	; 0x28
    3070:	89 a5       	ldd	r24, Y+41	; 0x29
    3072:	9a a5       	ldd	r25, Y+42	; 0x2a
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9a a3       	std	Y+34, r25	; 0x22
    3092:	89 a3       	std	Y+33, r24	; 0x21
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <LCD_sendCommand+0x658>
    3096:	80 e9       	ldi	r24, 0x90	; 144
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	98 a3       	std	Y+32, r25	; 0x20
    309c:	8f 8f       	std	Y+31, r24	; 0x1f
    309e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a0:	98 a1       	ldd	r25, Y+32	; 0x20
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <LCD_sendCommand+0x646>
    30a6:	98 a3       	std	Y+32, r25	; 0x20
    30a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	89 a1       	ldd	r24, Y+33	; 0x21
    30ac:	9a a1       	ldd	r25, Y+34	; 0x22
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9a a3       	std	Y+34, r25	; 0x22
    30b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	89 a1       	ldd	r24, Y+33	; 0x21
    30b6:	9a a1       	ldd	r25, Y+34	; 0x22
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <LCD_sendCommand+0x63a>
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	6b a1       	ldd	r22, Y+35	; 0x23
    30c0:	7c a1       	ldd	r23, Y+36	; 0x24
    30c2:	8d a1       	ldd	r24, Y+37	; 0x25
    30c4:	9e a1       	ldd	r25, Y+38	; 0x26
    30c6:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9a a3       	std	Y+34, r25	; 0x22
    30d0:	89 a3       	std	Y+33, r24	; 0x21
    30d2:	89 a1       	ldd	r24, Y+33	; 0x21
    30d4:	9a a1       	ldd	r25, Y+34	; 0x22
    30d6:	9e 8f       	std	Y+30, r25	; 0x1e
    30d8:	8d 8f       	std	Y+29, r24	; 0x1d
    30da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_sendCommand+0x682>
    30e2:	9e 8f       	std	Y+30, r25	; 0x1e
    30e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    30e6:	fe 01       	movw	r30, r28
    30e8:	ed 59       	subi	r30, 0x9D	; 157
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	98 2f       	mov	r25, r24
    30f0:	91 70       	andi	r25, 0x01	; 1
    30f2:	83 e0       	ldi	r24, 0x03	; 3
    30f4:	64 e0       	ldi	r22, 0x04	; 4
    30f6:	49 2f       	mov	r20, r25
    30f8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    30fc:	fe 01       	movw	r30, r28
    30fe:	ed 59       	subi	r30, 0x9D	; 157
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	88 2f       	mov	r24, r24
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	82 70       	andi	r24, 0x02	; 2
    310a:	90 70       	andi	r25, 0x00	; 0
    310c:	95 95       	asr	r25
    310e:	87 95       	ror	r24
    3110:	98 2f       	mov	r25, r24
    3112:	83 e0       	ldi	r24, 0x03	; 3
    3114:	65 e0       	ldi	r22, 0x05	; 5
    3116:	49 2f       	mov	r20, r25
    3118:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    311c:	fe 01       	movw	r30, r28
    311e:	ed 59       	subi	r30, 0x9D	; 157
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	84 70       	andi	r24, 0x04	; 4
    312a:	90 70       	andi	r25, 0x00	; 0
    312c:	95 95       	asr	r25
    312e:	87 95       	ror	r24
    3130:	95 95       	asr	r25
    3132:	87 95       	ror	r24
    3134:	98 2f       	mov	r25, r24
    3136:	83 e0       	ldi	r24, 0x03	; 3
    3138:	66 e0       	ldi	r22, 0x06	; 6
    313a:	49 2f       	mov	r20, r25
    313c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3140:	fe 01       	movw	r30, r28
    3142:	ed 59       	subi	r30, 0x9D	; 157
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	88 70       	andi	r24, 0x08	; 8
    314e:	90 70       	andi	r25, 0x00	; 0
    3150:	95 95       	asr	r25
    3152:	87 95       	ror	r24
    3154:	95 95       	asr	r25
    3156:	87 95       	ror	r24
    3158:	95 95       	asr	r25
    315a:	87 95       	ror	r24
    315c:	98 2f       	mov	r25, r24
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	67 e0       	ldi	r22, 0x07	; 7
    3162:	49 2f       	mov	r20, r25
    3164:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e8       	ldi	r26, 0x80	; 128
    316e:	bf e3       	ldi	r27, 0x3F	; 63
    3170:	89 8f       	std	Y+25, r24	; 0x19
    3172:	9a 8f       	std	Y+26, r25	; 0x1a
    3174:	ab 8f       	std	Y+27, r26	; 0x1b
    3176:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	69 8d       	ldd	r22, Y+25	; 0x19
    317a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a e7       	ldi	r20, 0x7A	; 122
    3186:	55 e4       	ldi	r21, 0x45	; 69
    3188:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8d 8b       	std	Y+21, r24	; 0x15
    3192:	9e 8b       	std	Y+22, r25	; 0x16
    3194:	af 8b       	std	Y+23, r26	; 0x17
    3196:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3198:	6d 89       	ldd	r22, Y+21	; 0x15
    319a:	7e 89       	ldd	r23, Y+22	; 0x16
    319c:	8f 89       	ldd	r24, Y+23	; 0x17
    319e:	98 8d       	ldd	r25, Y+24	; 0x18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <LCD_sendCommand+0x75e>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    31ba:	6d 89       	ldd	r22, Y+21	; 0x15
    31bc:	7e 89       	ldd	r23, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9c 8b       	std	Y+20, r25	; 0x14
    31f8:	8b 8b       	std	Y+19, r24	; 0x13
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <LCD_sendCommand+0x7be>
    31fc:	80 e9       	ldi	r24, 0x90	; 144
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	9a 8b       	std	Y+18, r25	; 0x12
    3202:	89 8b       	std	Y+17, r24	; 0x11
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	9a 89       	ldd	r25, Y+18	; 0x12
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_sendCommand+0x7ac>
    320c:	9a 8b       	std	Y+18, r25	; 0x12
    320e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	8b 89       	ldd	r24, Y+19	; 0x13
    321c:	9c 89       	ldd	r25, Y+20	; 0x14
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <LCD_sendCommand+0x7a0>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	8b 89       	ldd	r24, Y+19	; 0x13
    323a:	9c 89       	ldd	r25, Y+20	; 0x14
    323c:	98 8b       	std	Y+16, r25	; 0x10
    323e:	8f 87       	std	Y+15, r24	; 0x0f
    3240:	8f 85       	ldd	r24, Y+15	; 0x0f
    3242:	98 89       	ldd	r25, Y+16	; 0x10
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_sendCommand+0x7e8>
    3248:	98 8b       	std	Y+16, r25	; 0x10
    324a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	62 e0       	ldi	r22, 0x02	; 2
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a0 e8       	ldi	r26, 0x80	; 128
    325c:	bf e3       	ldi	r27, 0x3F	; 63
    325e:	8b 87       	std	Y+11, r24	; 0x0b
    3260:	9c 87       	std	Y+12, r25	; 0x0c
    3262:	ad 87       	std	Y+13, r26	; 0x0d
    3264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	4a e7       	ldi	r20, 0x7A	; 122
    3274:	55 e4       	ldi	r21, 0x45	; 69
    3276:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8f 83       	std	Y+7, r24	; 0x07
    3280:	98 87       	std	Y+8, r25	; 0x08
    3282:	a9 87       	std	Y+9, r26	; 0x09
    3284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	2c f4       	brge	.+10     	; 0x32a8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
    32a6:	3f c0       	rjmp	.+126    	; 0x3326 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    32a8:	6f 81       	ldd	r22, Y+7	; 0x07
    32aa:	78 85       	ldd	r23, Y+8	; 0x08
    32ac:	89 85       	ldd	r24, Y+9	; 0x09
    32ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	3f ef       	ldi	r19, 0xFF	; 255
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	57 e4       	ldi	r21, 0x47	; 71
    32b8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	4c f5       	brge	.+82     	; 0x3312 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <LCD_sendCommand+0x8ac>
    32ea:	80 e9       	ldi	r24, 0x90	; 144
    32ec:	91 e0       	ldi	r25, 0x01	; 1
    32ee:	9c 83       	std	Y+4, r25	; 0x04
    32f0:	8b 83       	std	Y+3, r24	; 0x03
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <LCD_sendCommand+0x89a>
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	69 f7       	brne	.-38     	; 0x32ea <LCD_sendCommand+0x88e>
    3310:	14 c0       	rjmp	.+40     	; 0x333a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3312:	6f 81       	ldd	r22, Y+7	; 0x07
    3314:	78 85       	ldd	r23, Y+8	; 0x08
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <LCD_sendCommand+0x8d6>
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    333a:	cd 59       	subi	r28, 0x9D	; 157
    333c:	df 4f       	sbci	r29, 0xFF	; 255
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	08 95       	ret

00003352 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	c3 56       	subi	r28, 0x63	; 99
    3360:	d0 40       	sbci	r29, 0x00	; 0
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	fe 01       	movw	r30, r28
    336e:	ed 59       	subi	r30, 0x9D	; 157
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    337e:	fe 01       	movw	r30, r28
    3380:	e1 5a       	subi	r30, 0xA1	; 161
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e8       	ldi	r26, 0x80	; 128
    338a:	bf e3       	ldi	r27, 0x3F	; 63
    338c:	80 83       	st	Z, r24
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	a2 83       	std	Z+2, r26	; 0x02
    3392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	8e 01       	movw	r16, r28
    3396:	05 5a       	subi	r16, 0xA5	; 165
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	fe 01       	movw	r30, r28
    339c:	e1 5a       	subi	r30, 0xA1	; 161
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	4a e7       	ldi	r20, 0x7A	; 122
    33ae:	55 e4       	ldi	r21, 0x45	; 69
    33b0:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	f8 01       	movw	r30, r16
    33ba:	80 83       	st	Z, r24
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	a2 83       	std	Z+2, r26	; 0x02
    33c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c2:	fe 01       	movw	r30, r28
    33c4:	e5 5a       	subi	r30, 0xA5	; 165
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	44 f4       	brge	.+16     	; 0x33f0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    33e0:	fe 01       	movw	r30, r28
    33e2:	e7 5a       	subi	r30, 0xA7	; 167
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
    33ee:	64 c0       	rjmp	.+200    	; 0x34b8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    33f0:	fe 01       	movw	r30, r28
    33f2:	e5 5a       	subi	r30, 0xA5	; 165
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	0c f0       	brlt	.+2      	; 0x3410 <LCD_displayCharacter+0xbe>
    340e:	43 c0       	rjmp	.+134    	; 0x3496 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	fe 01       	movw	r30, r28
    3412:	e1 5a       	subi	r30, 0xA1	; 161
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8e 01       	movw	r16, r28
    3430:	07 5a       	subi	r16, 0xA7	; 167
    3432:	1f 4f       	sbci	r17, 0xFF	; 255
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	f8 01       	movw	r30, r16
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
    3446:	1f c0       	rjmp	.+62     	; 0x3486 <LCD_displayCharacter+0x134>
    3448:	fe 01       	movw	r30, r28
    344a:	e9 5a       	subi	r30, 0xA9	; 169
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 e9       	ldi	r24, 0x90	; 144
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
    3456:	fe 01       	movw	r30, r28
    3458:	e9 5a       	subi	r30, 0xA9	; 169
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LCD_displayCharacter+0x10e>
    3464:	fe 01       	movw	r30, r28
    3466:	e9 5a       	subi	r30, 0xA9	; 169
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346e:	de 01       	movw	r26, r28
    3470:	a7 5a       	subi	r26, 0xA7	; 167
    3472:	bf 4f       	sbci	r27, 0xFF	; 255
    3474:	fe 01       	movw	r30, r28
    3476:	e7 5a       	subi	r30, 0xA7	; 167
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	11 96       	adiw	r26, 0x01	; 1
    3482:	9c 93       	st	X, r25
    3484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3486:	fe 01       	movw	r30, r28
    3488:	e7 5a       	subi	r30, 0xA7	; 167
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	d1 f6       	brne	.-76     	; 0x3448 <LCD_displayCharacter+0xf6>
    3494:	27 c0       	rjmp	.+78     	; 0x34e4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	8e 01       	movw	r16, r28
    3498:	07 5a       	subi	r16, 0xA7	; 167
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	e5 5a       	subi	r30, 0xA5	; 165
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	f8 01       	movw	r30, r16
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
    34b8:	de 01       	movw	r26, r28
    34ba:	ab 5a       	subi	r26, 0xAB	; 171
    34bc:	bf 4f       	sbci	r27, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e7 5a       	subi	r30, 0xA7	; 167
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	8d 93       	st	X+, r24
    34ca:	9c 93       	st	X, r25
    34cc:	fe 01       	movw	r30, r28
    34ce:	eb 5a       	subi	r30, 0xAB	; 171
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 81       	ld	r24, Z
    34d4:	91 81       	ldd	r25, Z+1	; 0x01
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <LCD_displayCharacter+0x184>
    34da:	fe 01       	movw	r30, r28
    34dc:	eb 5a       	subi	r30, 0xAB	; 171
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34e4:	83 e0       	ldi	r24, 0x03	; 3
    34e6:	62 e0       	ldi	r22, 0x02	; 2
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 5a       	subi	r30, 0xAF	; 175
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 e8       	ldi	r26, 0x80	; 128
    34fa:	bf e3       	ldi	r27, 0x3F	; 63
    34fc:	80 83       	st	Z, r24
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	a2 83       	std	Z+2, r26	; 0x02
    3502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	8e 01       	movw	r16, r28
    3506:	03 5b       	subi	r16, 0xB3	; 179
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	fe 01       	movw	r30, r28
    350c:	ef 5a       	subi	r30, 0xAF	; 175
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	4a e7       	ldi	r20, 0x7A	; 122
    351e:	55 e4       	ldi	r21, 0x45	; 69
    3520:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	f8 01       	movw	r30, r16
    352a:	80 83       	st	Z, r24
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	a2 83       	std	Z+2, r26	; 0x02
    3530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3532:	fe 01       	movw	r30, r28
    3534:	e3 5b       	subi	r30, 0xB3	; 179
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	44 f4       	brge	.+16     	; 0x3560 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3550:	fe 01       	movw	r30, r28
    3552:	e5 5b       	subi	r30, 0xB5	; 181
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	64 c0       	rjmp	.+200    	; 0x3628 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3560:	fe 01       	movw	r30, r28
    3562:	e3 5b       	subi	r30, 0xB3	; 179
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	60 81       	ld	r22, Z
    3568:	71 81       	ldd	r23, Z+1	; 0x01
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	0c f0       	brlt	.+2      	; 0x3580 <LCD_displayCharacter+0x22e>
    357e:	43 c0       	rjmp	.+134    	; 0x3606 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	fe 01       	movw	r30, r28
    3582:	ef 5a       	subi	r30, 0xAF	; 175
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	82 81       	ldd	r24, Z+2	; 0x02
    358c:	93 81       	ldd	r25, Z+3	; 0x03
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	8e 01       	movw	r16, r28
    35a0:	05 5b       	subi	r16, 0xB5	; 181
    35a2:	1f 4f       	sbci	r17, 0xFF	; 255
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	f8 01       	movw	r30, r16
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
    35b6:	1f c0       	rjmp	.+62     	; 0x35f6 <LCD_displayCharacter+0x2a4>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e7 5b       	subi	r30, 0xB7	; 183
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	80 e9       	ldi	r24, 0x90	; 144
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	fe 01       	movw	r30, r28
    35c8:	e7 5b       	subi	r30, 0xB7	; 183
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_displayCharacter+0x27e>
    35d4:	fe 01       	movw	r30, r28
    35d6:	e7 5b       	subi	r30, 0xB7	; 183
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	de 01       	movw	r26, r28
    35e0:	a5 5b       	subi	r26, 0xB5	; 181
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 5b       	subi	r30, 0xB5	; 181
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	11 96       	adiw	r26, 0x01	; 1
    35f2:	9c 93       	st	X, r25
    35f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	fe 01       	movw	r30, r28
    35f8:	e5 5b       	subi	r30, 0xB5	; 181
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	d1 f6       	brne	.-76     	; 0x35b8 <LCD_displayCharacter+0x266>
    3604:	27 c0       	rjmp	.+78     	; 0x3654 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	8e 01       	movw	r16, r28
    3608:	05 5b       	subi	r16, 0xB5	; 181
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	e3 5b       	subi	r30, 0xB3	; 179
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	f8 01       	movw	r30, r16
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
    3628:	de 01       	movw	r26, r28
    362a:	a9 5b       	subi	r26, 0xB9	; 185
    362c:	bf 4f       	sbci	r27, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	e5 5b       	subi	r30, 0xB5	; 181
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	8d 93       	st	X+, r24
    363a:	9c 93       	st	X, r25
    363c:	fe 01       	movw	r30, r28
    363e:	e9 5b       	subi	r30, 0xB9	; 185
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 81       	ld	r24, Z
    3644:	91 81       	ldd	r25, Z+1	; 0x01
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <LCD_displayCharacter+0x2f4>
    364a:	fe 01       	movw	r30, r28
    364c:	e9 5b       	subi	r30, 0xB9	; 185
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3654:	fe 01       	movw	r30, r28
    3656:	ed 59       	subi	r30, 0x9D	; 157
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 81       	ld	r24, Z
    365c:	88 2f       	mov	r24, r24
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	80 71       	andi	r24, 0x10	; 16
    3662:	90 70       	andi	r25, 0x00	; 0
    3664:	95 95       	asr	r25
    3666:	87 95       	ror	r24
    3668:	95 95       	asr	r25
    366a:	87 95       	ror	r24
    366c:	95 95       	asr	r25
    366e:	87 95       	ror	r24
    3670:	95 95       	asr	r25
    3672:	87 95       	ror	r24
    3674:	98 2f       	mov	r25, r24
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	64 e0       	ldi	r22, 0x04	; 4
    367a:	49 2f       	mov	r20, r25
    367c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3680:	fe 01       	movw	r30, r28
    3682:	ed 59       	subi	r30, 0x9D	; 157
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	80 81       	ld	r24, Z
    3688:	88 2f       	mov	r24, r24
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	80 72       	andi	r24, 0x20	; 32
    368e:	90 70       	andi	r25, 0x00	; 0
    3690:	95 95       	asr	r25
    3692:	87 95       	ror	r24
    3694:	95 95       	asr	r25
    3696:	87 95       	ror	r24
    3698:	95 95       	asr	r25
    369a:	87 95       	ror	r24
    369c:	95 95       	asr	r25
    369e:	87 95       	ror	r24
    36a0:	95 95       	asr	r25
    36a2:	87 95       	ror	r24
    36a4:	98 2f       	mov	r25, r24
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	65 e0       	ldi	r22, 0x05	; 5
    36aa:	49 2f       	mov	r20, r25
    36ac:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    36b0:	fe 01       	movw	r30, r28
    36b2:	ed 59       	subi	r30, 0x9D	; 157
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 81       	ld	r24, Z
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 74       	andi	r24, 0x40	; 64
    36be:	90 70       	andi	r25, 0x00	; 0
    36c0:	08 2e       	mov	r0, r24
    36c2:	89 2f       	mov	r24, r25
    36c4:	00 0c       	add	r0, r0
    36c6:	88 1f       	adc	r24, r24
    36c8:	99 0b       	sbc	r25, r25
    36ca:	00 0c       	add	r0, r0
    36cc:	88 1f       	adc	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	98 2f       	mov	r25, r24
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	66 e0       	ldi	r22, 0x06	; 6
    36d6:	49 2f       	mov	r20, r25
    36d8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 59       	subi	r30, 0x9D	; 157
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	98 2f       	mov	r25, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	99 27       	eor	r25, r25
    36ea:	99 1f       	adc	r25, r25
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	67 e0       	ldi	r22, 0x07	; 7
    36f0:	49 2f       	mov	r20, r25
    36f2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    36f6:	fe 01       	movw	r30, r28
    36f8:	ed 5b       	subi	r30, 0xBD	; 189
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	a0 e8       	ldi	r26, 0x80	; 128
    3702:	bf e3       	ldi	r27, 0x3F	; 63
    3704:	80 83       	st	Z, r24
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	a2 83       	std	Z+2, r26	; 0x02
    370a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370c:	8e 01       	movw	r16, r28
    370e:	01 5c       	subi	r16, 0xC1	; 193
    3710:	1f 4f       	sbci	r17, 0xFF	; 255
    3712:	fe 01       	movw	r30, r28
    3714:	ed 5b       	subi	r30, 0xBD	; 189
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	4a e7       	ldi	r20, 0x7A	; 122
    3726:	55 e4       	ldi	r21, 0x45	; 69
    3728:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	f8 01       	movw	r30, r16
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    373a:	fe 01       	movw	r30, r28
    373c:	ff 96       	adiw	r30, 0x3f	; 63
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e8       	ldi	r20, 0x80	; 128
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    3752:	88 23       	and	r24, r24
    3754:	2c f4       	brge	.+10     	; 0x3760 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	9e af       	std	Y+62, r25	; 0x3e
    375c:	8d af       	std	Y+61, r24	; 0x3d
    375e:	46 c0       	rjmp	.+140    	; 0x37ec <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3760:	fe 01       	movw	r30, r28
    3762:	ff 96       	adiw	r30, 0x3f	; 63
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	3f ef       	ldi	r19, 0xFF	; 255
    3770:	4f e7       	ldi	r20, 0x7F	; 127
    3772:	57 e4       	ldi	r21, 0x47	; 71
    3774:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    3778:	18 16       	cp	r1, r24
    377a:	64 f5       	brge	.+88     	; 0x37d4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377c:	fe 01       	movw	r30, r28
    377e:	ed 5b       	subi	r30, 0xBD	; 189
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e2       	ldi	r20, 0x20	; 32
    3790:	51 e4       	ldi	r21, 0x41	; 65
    3792:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	9e af       	std	Y+62, r25	; 0x3e
    37a8:	8d af       	std	Y+61, r24	; 0x3d
    37aa:	0f c0       	rjmp	.+30     	; 0x37ca <LCD_displayCharacter+0x478>
    37ac:	80 e9       	ldi	r24, 0x90	; 144
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	9c af       	std	Y+60, r25	; 0x3c
    37b2:	8b af       	std	Y+59, r24	; 0x3b
    37b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	f1 f7       	brne	.-4      	; 0x37b8 <LCD_displayCharacter+0x466>
    37bc:	9c af       	std	Y+60, r25	; 0x3c
    37be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	9e af       	std	Y+62, r25	; 0x3e
    37c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    37cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	69 f7       	brne	.-38     	; 0x37ac <LCD_displayCharacter+0x45a>
    37d2:	16 c0       	rjmp	.+44     	; 0x3800 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d4:	fe 01       	movw	r30, r28
    37d6:	ff 96       	adiw	r30, 0x3f	; 63
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e af       	std	Y+62, r25	; 0x3e
    37ea:	8d af       	std	Y+61, r24	; 0x3d
    37ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    37f0:	9a af       	std	Y+58, r25	; 0x3a
    37f2:	89 af       	std	Y+57, r24	; 0x39
    37f4:	89 ad       	ldd	r24, Y+57	; 0x39
    37f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_displayCharacter+0x4a6>
    37fc:	9a af       	std	Y+58, r25	; 0x3a
    37fe:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3800:	83 e0       	ldi	r24, 0x03	; 3
    3802:	62 e0       	ldi	r22, 0x02	; 2
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 e8       	ldi	r26, 0x80	; 128
    3810:	bf e3       	ldi	r27, 0x3F	; 63
    3812:	8d ab       	std	Y+53, r24	; 0x35
    3814:	9e ab       	std	Y+54, r25	; 0x36
    3816:	af ab       	std	Y+55, r26	; 0x37
    3818:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381a:	6d a9       	ldd	r22, Y+53	; 0x35
    381c:	7e a9       	ldd	r23, Y+54	; 0x36
    381e:	8f a9       	ldd	r24, Y+55	; 0x37
    3820:	98 ad       	ldd	r25, Y+56	; 0x38
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	4a e7       	ldi	r20, 0x7A	; 122
    3828:	55 e4       	ldi	r21, 0x45	; 69
    382a:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	89 ab       	std	Y+49, r24	; 0x31
    3834:	9a ab       	std	Y+50, r25	; 0x32
    3836:	ab ab       	std	Y+51, r26	; 0x33
    3838:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    383a:	69 a9       	ldd	r22, Y+49	; 0x31
    383c:	7a a9       	ldd	r23, Y+50	; 0x32
    383e:	8b a9       	ldd	r24, Y+51	; 0x33
    3840:	9c a9       	ldd	r25, Y+52	; 0x34
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e8       	ldi	r20, 0x80	; 128
    3848:	5f e3       	ldi	r21, 0x3F	; 63
    384a:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    384e:	88 23       	and	r24, r24
    3850:	2c f4       	brge	.+10     	; 0x385c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	98 ab       	std	Y+48, r25	; 0x30
    3858:	8f a7       	std	Y+47, r24	; 0x2f
    385a:	3f c0       	rjmp	.+126    	; 0x38da <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    385c:	69 a9       	ldd	r22, Y+49	; 0x31
    385e:	7a a9       	ldd	r23, Y+50	; 0x32
    3860:	8b a9       	ldd	r24, Y+51	; 0x33
    3862:	9c a9       	ldd	r25, Y+52	; 0x34
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	3f ef       	ldi	r19, 0xFF	; 255
    3868:	4f e7       	ldi	r20, 0x7F	; 127
    386a:	57 e4       	ldi	r21, 0x47	; 71
    386c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    3870:	18 16       	cp	r1, r24
    3872:	4c f5       	brge	.+82     	; 0x38c6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3874:	6d a9       	ldd	r22, Y+53	; 0x35
    3876:	7e a9       	ldd	r23, Y+54	; 0x36
    3878:	8f a9       	ldd	r24, Y+55	; 0x37
    387a:	98 ad       	ldd	r25, Y+56	; 0x38
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e2       	ldi	r20, 0x20	; 32
    3882:	51 e4       	ldi	r21, 0x41	; 65
    3884:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	98 ab       	std	Y+48, r25	; 0x30
    389a:	8f a7       	std	Y+47, r24	; 0x2f
    389c:	0f c0       	rjmp	.+30     	; 0x38bc <LCD_displayCharacter+0x56a>
    389e:	80 e9       	ldi	r24, 0x90	; 144
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
    38a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    38a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <LCD_displayCharacter+0x558>
    38ae:	9e a7       	std	Y+46, r25	; 0x2e
    38b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b4:	98 a9       	ldd	r25, Y+48	; 0x30
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	98 ab       	std	Y+48, r25	; 0x30
    38ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38be:	98 a9       	ldd	r25, Y+48	; 0x30
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	69 f7       	brne	.-38     	; 0x389e <LCD_displayCharacter+0x54c>
    38c4:	14 c0       	rjmp	.+40     	; 0x38ee <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c6:	69 a9       	ldd	r22, Y+49	; 0x31
    38c8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ca:	8b a9       	ldd	r24, Y+51	; 0x33
    38cc:	9c a9       	ldd	r25, Y+52	; 0x34
    38ce:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	98 ab       	std	Y+48, r25	; 0x30
    38d8:	8f a7       	std	Y+47, r24	; 0x2f
    38da:	8f a5       	ldd	r24, Y+47	; 0x2f
    38dc:	98 a9       	ldd	r25, Y+48	; 0x30
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
    38e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    38e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <LCD_displayCharacter+0x594>
    38ea:	9c a7       	std	Y+44, r25	; 0x2c
    38ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    38ee:	83 e0       	ldi	r24, 0x03	; 3
    38f0:	62 e0       	ldi	r22, 0x02	; 2
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e8       	ldi	r26, 0x80	; 128
    38fe:	bf e3       	ldi	r27, 0x3F	; 63
    3900:	8f a3       	std	Y+39, r24	; 0x27
    3902:	98 a7       	std	Y+40, r25	; 0x28
    3904:	a9 a7       	std	Y+41, r26	; 0x29
    3906:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6f a1       	ldd	r22, Y+39	; 0x27
    390a:	78 a5       	ldd	r23, Y+40	; 0x28
    390c:	89 a5       	ldd	r24, Y+41	; 0x29
    390e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a e7       	ldi	r20, 0x7A	; 122
    3916:	55 e4       	ldi	r21, 0x45	; 69
    3918:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8b a3       	std	Y+35, r24	; 0x23
    3922:	9c a3       	std	Y+36, r25	; 0x24
    3924:	ad a3       	std	Y+37, r26	; 0x25
    3926:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3928:	6b a1       	ldd	r22, Y+35	; 0x23
    392a:	7c a1       	ldd	r23, Y+36	; 0x24
    392c:	8d a1       	ldd	r24, Y+37	; 0x25
    392e:	9e a1       	ldd	r25, Y+38	; 0x26
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9a a3       	std	Y+34, r25	; 0x22
    3946:	89 a3       	std	Y+33, r24	; 0x21
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    394a:	6b a1       	ldd	r22, Y+35	; 0x23
    394c:	7c a1       	ldd	r23, Y+36	; 0x24
    394e:	8d a1       	ldd	r24, Y+37	; 0x25
    3950:	9e a1       	ldd	r25, Y+38	; 0x26
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6f a1       	ldd	r22, Y+39	; 0x27
    3964:	78 a5       	ldd	r23, Y+40	; 0x28
    3966:	89 a5       	ldd	r24, Y+41	; 0x29
    3968:	9a a5       	ldd	r25, Y+42	; 0x2a
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9a a3       	std	Y+34, r25	; 0x22
    3988:	89 a3       	std	Y+33, r24	; 0x21
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <LCD_displayCharacter+0x658>
    398c:	80 e9       	ldi	r24, 0x90	; 144
    398e:	91 e0       	ldi	r25, 0x01	; 1
    3990:	98 a3       	std	Y+32, r25	; 0x20
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
    3994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3996:	98 a1       	ldd	r25, Y+32	; 0x20
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_displayCharacter+0x646>
    399c:	98 a3       	std	Y+32, r25	; 0x20
    399e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	89 a1       	ldd	r24, Y+33	; 0x21
    39a2:	9a a1       	ldd	r25, Y+34	; 0x22
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9a a3       	std	Y+34, r25	; 0x22
    39a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	89 a1       	ldd	r24, Y+33	; 0x21
    39ac:	9a a1       	ldd	r25, Y+34	; 0x22
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <LCD_displayCharacter+0x63a>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6b a1       	ldd	r22, Y+35	; 0x23
    39b6:	7c a1       	ldd	r23, Y+36	; 0x24
    39b8:	8d a1       	ldd	r24, Y+37	; 0x25
    39ba:	9e a1       	ldd	r25, Y+38	; 0x26
    39bc:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9a a3       	std	Y+34, r25	; 0x22
    39c6:	89 a3       	std	Y+33, r24	; 0x21
    39c8:	89 a1       	ldd	r24, Y+33	; 0x21
    39ca:	9a a1       	ldd	r25, Y+34	; 0x22
    39cc:	9e 8f       	std	Y+30, r25	; 0x1e
    39ce:	8d 8f       	std	Y+29, r24	; 0x1d
    39d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_displayCharacter+0x682>
    39d8:	9e 8f       	std	Y+30, r25	; 0x1e
    39da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    39dc:	fe 01       	movw	r30, r28
    39de:	ed 59       	subi	r30, 0x9D	; 157
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	98 2f       	mov	r25, r24
    39e6:	91 70       	andi	r25, 0x01	; 1
    39e8:	83 e0       	ldi	r24, 0x03	; 3
    39ea:	64 e0       	ldi	r22, 0x04	; 4
    39ec:	49 2f       	mov	r20, r25
    39ee:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 59       	subi	r30, 0x9D	; 157
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	80 81       	ld	r24, Z
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	82 70       	andi	r24, 0x02	; 2
    3a00:	90 70       	andi	r25, 0x00	; 0
    3a02:	95 95       	asr	r25
    3a04:	87 95       	ror	r24
    3a06:	98 2f       	mov	r25, r24
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	65 e0       	ldi	r22, 0x05	; 5
    3a0c:	49 2f       	mov	r20, r25
    3a0e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3a12:	fe 01       	movw	r30, r28
    3a14:	ed 59       	subi	r30, 0x9D	; 157
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	84 70       	andi	r24, 0x04	; 4
    3a20:	90 70       	andi	r25, 0x00	; 0
    3a22:	95 95       	asr	r25
    3a24:	87 95       	ror	r24
    3a26:	95 95       	asr	r25
    3a28:	87 95       	ror	r24
    3a2a:	98 2f       	mov	r25, r24
    3a2c:	83 e0       	ldi	r24, 0x03	; 3
    3a2e:	66 e0       	ldi	r22, 0x06	; 6
    3a30:	49 2f       	mov	r20, r25
    3a32:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3a36:	fe 01       	movw	r30, r28
    3a38:	ed 59       	subi	r30, 0x9D	; 157
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	88 2f       	mov	r24, r24
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	88 70       	andi	r24, 0x08	; 8
    3a44:	90 70       	andi	r25, 0x00	; 0
    3a46:	95 95       	asr	r25
    3a48:	87 95       	ror	r24
    3a4a:	95 95       	asr	r25
    3a4c:	87 95       	ror	r24
    3a4e:	95 95       	asr	r25
    3a50:	87 95       	ror	r24
    3a52:	98 2f       	mov	r25, r24
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	67 e0       	ldi	r22, 0x07	; 7
    3a58:	49 2f       	mov	r20, r25
    3a5a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	a0 e8       	ldi	r26, 0x80	; 128
    3a64:	bf e3       	ldi	r27, 0x3F	; 63
    3a66:	89 8f       	std	Y+25, r24	; 0x19
    3a68:	9a 8f       	std	Y+26, r25	; 0x1a
    3a6a:	ab 8f       	std	Y+27, r26	; 0x1b
    3a6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	4a e7       	ldi	r20, 0x7A	; 122
    3a7c:	55 e4       	ldi	r21, 0x45	; 69
    3a7e:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8d 8b       	std	Y+21, r24	; 0x15
    3a88:	9e 8b       	std	Y+22, r25	; 0x16
    3a8a:	af 8b       	std	Y+23, r26	; 0x17
    3a8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a90:	7e 89       	ldd	r23, Y+22	; 0x16
    3a92:	8f 89       	ldd	r24, Y+23	; 0x17
    3a94:	98 8d       	ldd	r25, Y+24	; 0x18
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e8       	ldi	r20, 0x80	; 128
    3a9c:	5f e3       	ldi	r21, 0x3F	; 63
    3a9e:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    3aa2:	88 23       	and	r24, r24
    3aa4:	2c f4       	brge	.+10     	; 0x3ab0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	9c 8b       	std	Y+20, r25	; 0x14
    3aac:	8b 8b       	std	Y+19, r24	; 0x13
    3aae:	3f c0       	rjmp	.+126    	; 0x3b2e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	3f ef       	ldi	r19, 0xFF	; 255
    3abc:	4f e7       	ldi	r20, 0x7F	; 127
    3abe:	57 e4       	ldi	r21, 0x47	; 71
    3ac0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    3ac4:	18 16       	cp	r1, r24
    3ac6:	4c f5       	brge	.+82     	; 0x3b1a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    3aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e2       	ldi	r20, 0x20	; 32
    3ad6:	51 e4       	ldi	r21, 0x41	; 65
    3ad8:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	9c 8b       	std	Y+20, r25	; 0x14
    3aee:	8b 8b       	std	Y+19, r24	; 0x13
    3af0:	0f c0       	rjmp	.+30     	; 0x3b10 <LCD_displayCharacter+0x7be>
    3af2:	80 e9       	ldi	r24, 0x90	; 144
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	9a 8b       	std	Y+18, r25	; 0x12
    3af8:	89 8b       	std	Y+17, r24	; 0x11
    3afa:	89 89       	ldd	r24, Y+17	; 0x11
    3afc:	9a 89       	ldd	r25, Y+18	; 0x12
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <LCD_displayCharacter+0x7ac>
    3b02:	9a 8b       	std	Y+18, r25	; 0x12
    3b04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b06:	8b 89       	ldd	r24, Y+19	; 0x13
    3b08:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	9c 8b       	std	Y+20, r25	; 0x14
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b10:	8b 89       	ldd	r24, Y+19	; 0x13
    3b12:	9c 89       	ldd	r25, Y+20	; 0x14
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	69 f7       	brne	.-38     	; 0x3af2 <LCD_displayCharacter+0x7a0>
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b20:	98 8d       	ldd	r25, Y+24	; 0x18
    3b22:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9c 8b       	std	Y+20, r25	; 0x14
    3b2c:	8b 8b       	std	Y+19, r24	; 0x13
    3b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b30:	9c 89       	ldd	r25, Y+20	; 0x14
    3b32:	98 8b       	std	Y+16, r25	; 0x10
    3b34:	8f 87       	std	Y+15, r24	; 0x0f
    3b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b38:	98 89       	ldd	r25, Y+16	; 0x10
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <LCD_displayCharacter+0x7e8>
    3b3e:	98 8b       	std	Y+16, r25	; 0x10
    3b40:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b42:	83 e0       	ldi	r24, 0x03	; 3
    3b44:	62 e0       	ldi	r22, 0x02	; 2
    3b46:	40 e0       	ldi	r20, 0x00	; 0
    3b48:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <GPIO_writePin>
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	a0 e8       	ldi	r26, 0x80	; 128
    3b52:	bf e3       	ldi	r27, 0x3F	; 63
    3b54:	8b 87       	std	Y+11, r24	; 0x0b
    3b56:	9c 87       	std	Y+12, r25	; 0x0c
    3b58:	ad 87       	std	Y+13, r26	; 0x0d
    3b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a e7       	ldi	r20, 0x7A	; 122
    3b6a:	55 e4       	ldi	r21, 0x45	; 69
    3b6c:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	8f 83       	std	Y+7, r24	; 0x07
    3b76:	98 87       	std	Y+8, r25	; 0x08
    3b78:	a9 87       	std	Y+9, r26	; 0x09
    3b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7e:	78 85       	ldd	r23, Y+8	; 0x08
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e8       	ldi	r20, 0x80	; 128
    3b8a:	5f e3       	ldi	r21, 0x3F	; 63
    3b8c:	0e 94 41 04 	call	0x882	; 0x882 <__ltsf2>
    3b90:	88 23       	and	r24, r24
    3b92:	2c f4       	brge	.+10     	; 0x3b9e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    3b9c:	3f c0       	rjmp	.+126    	; 0x3c1c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba0:	78 85       	ldd	r23, Y+8	; 0x08
    3ba2:	89 85       	ldd	r24, Y+9	; 0x09
    3ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	3f ef       	ldi	r19, 0xFF	; 255
    3baa:	4f e7       	ldi	r20, 0x7F	; 127
    3bac:	57 e4       	ldi	r21, 0x47	; 71
    3bae:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__gtsf2>
    3bb2:	18 16       	cp	r1, r24
    3bb4:	4c f5       	brge	.+82     	; 0x3c08 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e2       	ldi	r20, 0x20	; 32
    3bc4:	51 e4       	ldi	r21, 0x41	; 65
    3bc6:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	0f c0       	rjmp	.+30     	; 0x3bfe <LCD_displayCharacter+0x8ac>
    3be0:	80 e9       	ldi	r24, 0x90	; 144
    3be2:	91 e0       	ldi	r25, 0x01	; 1
    3be4:	9c 83       	std	Y+4, r25	; 0x04
    3be6:	8b 83       	std	Y+3, r24	; 0x03
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	9c 81       	ldd	r25, Y+4	; 0x04
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <LCD_displayCharacter+0x89a>
    3bf0:	9c 83       	std	Y+4, r25	; 0x04
    3bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	69 f7       	brne	.-38     	; 0x3be0 <LCD_displayCharacter+0x88e>
    3c06:	14 c0       	rjmp	.+40     	; 0x3c30 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c08:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0a:	78 85       	ldd	r23, Y+8	; 0x08
    3c0c:	89 85       	ldd	r24, Y+9	; 0x09
    3c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c10:	0e 94 65 00 	call	0xca	; 0xca <__fixunssfsi>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	9e 83       	std	Y+6, r25	; 0x06
    3c1a:	8d 83       	std	Y+5, r24	; 0x05
    3c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c20:	9a 83       	std	Y+2, r25	; 0x02
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <LCD_displayCharacter+0x8d6>
    3c2c:	9a 83       	std	Y+2, r25	; 0x02
    3c2e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3c30:	cd 59       	subi	r28, 0x9D	; 157
    3c32:	df 4f       	sbci	r29, 0xFF	; 255
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	08 95       	ret

00003c48 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	00 d0       	rcall	.+0      	; 0x3c4e <LCD_displayString+0x6>
    3c4e:	0f 92       	push	r0
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	9b 83       	std	Y+3, r25	; 0x03
    3c56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c58:	19 82       	std	Y+1, r1	; 0x01
    3c5a:	0e c0       	rjmp	.+28     	; 0x3c78 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	9b 81       	ldd	r25, Y+3	; 0x03
    3c66:	fc 01       	movw	r30, r24
    3c68:	e2 0f       	add	r30, r18
    3c6a:	f3 1f       	adc	r31, r19
    3c6c:	80 81       	ld	r24, Z
    3c6e:	0e 94 a9 19 	call	0x3352	; 0x3352 <LCD_displayCharacter>
		i++;
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	8f 5f       	subi	r24, 0xFF	; 255
    3c76:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	28 2f       	mov	r18, r24
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	9b 81       	ldd	r25, Y+3	; 0x03
    3c82:	fc 01       	movw	r30, r24
    3c84:	e2 0f       	add	r30, r18
    3c86:	f3 1f       	adc	r31, r19
    3c88:	80 81       	ld	r24, Z
    3c8a:	88 23       	and	r24, r24
    3c8c:	39 f7       	brne	.-50     	; 0x3c5c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <LCD_moveCursor+0x6>
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <LCD_moveCursor+0x8>
    3ca2:	0f 92       	push	r0
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	8a 83       	std	Y+2, r24	; 0x02
    3caa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3cac:	8a 81       	ldd	r24, Y+2	; 0x02
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	3d 83       	std	Y+5, r19	; 0x05
    3cb4:	2c 83       	std	Y+4, r18	; 0x04
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cba:	81 30       	cpi	r24, 0x01	; 1
    3cbc:	91 05       	cpc	r25, r1
    3cbe:	c1 f0       	breq	.+48     	; 0x3cf0 <LCD_moveCursor+0x56>
    3cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc4:	22 30       	cpi	r18, 0x02	; 2
    3cc6:	31 05       	cpc	r19, r1
    3cc8:	2c f4       	brge	.+10     	; 0x3cd4 <LCD_moveCursor+0x3a>
    3cca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	61 f0       	breq	.+24     	; 0x3cea <LCD_moveCursor+0x50>
    3cd2:	19 c0       	rjmp	.+50     	; 0x3d06 <LCD_moveCursor+0x6c>
    3cd4:	2c 81       	ldd	r18, Y+4	; 0x04
    3cd6:	3d 81       	ldd	r19, Y+5	; 0x05
    3cd8:	22 30       	cpi	r18, 0x02	; 2
    3cda:	31 05       	cpc	r19, r1
    3cdc:	69 f0       	breq	.+26     	; 0x3cf8 <LCD_moveCursor+0x5e>
    3cde:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce2:	83 30       	cpi	r24, 0x03	; 3
    3ce4:	91 05       	cpc	r25, r1
    3ce6:	61 f0       	breq	.+24     	; 0x3d00 <LCD_moveCursor+0x66>
    3ce8:	0e c0       	rjmp	.+28     	; 0x3d06 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	89 83       	std	Y+1, r24	; 0x01
    3cee:	0b c0       	rjmp	.+22     	; 0x3d06 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf2:	80 5c       	subi	r24, 0xC0	; 192
    3cf4:	89 83       	std	Y+1, r24	; 0x01
    3cf6:	07 c0       	rjmp	.+14     	; 0x3d06 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	80 5f       	subi	r24, 0xF0	; 240
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	03 c0       	rjmp	.+6      	; 0x3d06 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3d00:	8b 81       	ldd	r24, Y+3	; 0x03
    3d02:	80 5b       	subi	r24, 0xB0	; 176
    3d04:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	80 68       	ori	r24, 0x80	; 128
    3d0a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
}
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <LCD_displayStringRowColumn+0x6>
    3d24:	00 d0       	rcall	.+0      	; 0x3d26 <LCD_displayStringRowColumn+0x8>
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    3d2c:	6a 83       	std	Y+2, r22	; 0x02
    3d2e:	5c 83       	std	Y+4, r21	; 0x04
    3d30:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	6a 81       	ldd	r22, Y+2	; 0x02
    3d36:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3e:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
}
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	08 95       	ret

00003d50 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	62 97       	sbiw	r28, 0x12	; 18
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	cd bf       	out	0x3d, r28	; 61
    3d64:	9a 8b       	std	Y+18, r25	; 0x12
    3d66:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3d68:	89 89       	ldd	r24, Y+17	; 0x11
    3d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d6c:	9e 01       	movw	r18, r28
    3d6e:	2f 5f       	subi	r18, 0xFF	; 255
    3d70:	3f 4f       	sbci	r19, 0xFF	; 255
    3d72:	b9 01       	movw	r22, r18
    3d74:	4a e0       	ldi	r20, 0x0A	; 10
    3d76:	50 e0       	ldi	r21, 0x00	; 0
    3d78:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <itoa>
   LCD_displayString(buff); /* Display the string */
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	01 96       	adiw	r24, 0x01	; 1
    3d80:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_displayString>
}
    3d84:	62 96       	adiw	r28, 0x12	; 18
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	cf 91       	pop	r28
    3d92:	df 91       	pop	r29
    3d94:	08 95       	ret

00003d96 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_sendCommand>
}
    3da4:	cf 91       	pop	r28
    3da6:	df 91       	pop	r29
    3da8:	08 95       	ret

00003daa <main>:
#include "Timer1_PWM.h"

long timeCounter = 0;

int main(void)
{
    3daa:	df 93       	push	r29
    3dac:	cf 93       	push	r28
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    3db2:	0e 94 1b 13 	call	0x2636	; 0x2636 <DIO_init>
	LCD_init();
    3db6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_init>
	timer1_PWM_Init();
    3dba:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <timer1_PWM_Init>

	SREG |=(1<<7);			// I bit Enabled
    3dbe:	af e5       	ldi	r26, 0x5F	; 95
    3dc0:	b0 e0       	ldi	r27, 0x00	; 0
    3dc2:	ef e5       	ldi	r30, 0x5F	; 95
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	80 81       	ld	r24, Z
    3dc8:	80 68       	ori	r24, 0x80	; 128
    3dca:	8c 93       	st	X, r24
	SetPollingTime(100);
    3dcc:	84 e6       	ldi	r24, 0x64	; 100
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <SetPollingTime>
	Timer2_Init_CTC_Mode(50);
    3dd4:	82 e3       	ldi	r24, 0x32	; 50
    3dd6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Timer2_Init_CTC_Mode>
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <main+0x30>

00003ddc <__vector_9>:

	}
}

ISR(TIMER2_COMP_vect)
{
    3ddc:	1f 92       	push	r1
    3dde:	0f 92       	push	r0
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	0f 92       	push	r0
    3de4:	11 24       	eor	r1, r1
    3de6:	2f 93       	push	r18
    3de8:	3f 93       	push	r19
    3dea:	4f 93       	push	r20
    3dec:	5f 93       	push	r21
    3dee:	6f 93       	push	r22
    3df0:	7f 93       	push	r23
    3df2:	8f 93       	push	r24
    3df4:	9f 93       	push	r25
    3df6:	af 93       	push	r26
    3df8:	bf 93       	push	r27
    3dfa:	ef 93       	push	r30
    3dfc:	ff 93       	push	r31
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
	Poll();
    3e06:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <Poll>
}
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	ff 91       	pop	r31
    3e10:	ef 91       	pop	r30
    3e12:	bf 91       	pop	r27
    3e14:	af 91       	pop	r26
    3e16:	9f 91       	pop	r25
    3e18:	8f 91       	pop	r24
    3e1a:	7f 91       	pop	r23
    3e1c:	6f 91       	pop	r22
    3e1e:	5f 91       	pop	r21
    3e20:	4f 91       	pop	r20
    3e22:	3f 91       	pop	r19
    3e24:	2f 91       	pop	r18
    3e26:	0f 90       	pop	r0
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	0f 90       	pop	r0
    3e2c:	1f 90       	pop	r1
    3e2e:	18 95       	reti

00003e30 <Poll>:

int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;
void Poll(void)
{
    3e30:	df 93       	push	r29
    3e32:	cf 93       	push	r28
    3e34:	00 d0       	rcall	.+0      	; 0x3e36 <Poll+0x6>
    3e36:	00 d0       	rcall	.+0      	; 0x3e38 <Poll+0x8>
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    3e3c:	80 91 17 02 	lds	r24, 0x0217
    3e40:	90 91 18 02 	lds	r25, 0x0218
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	91 f0       	breq	.+36     	; 0x3e6c <Poll+0x3c>
    3e48:	80 91 36 02 	lds	r24, 0x0236
    3e4c:	90 91 37 02 	lds	r25, 0x0237
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	61 f4       	brne	.+24     	; 0x3e6c <Poll+0x3c>
	{
		States_GroupType data;
		data = Get_Data();
    3e54:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Get_Data>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	ab 83       	std	Y+3, r26	; 0x03
    3e62:	bc 83       	std	Y+4, r27	; 0x04
		Handle_data(&data);
    3e64:	ce 01       	movw	r24, r28
    3e66:	01 96       	adiw	r24, 0x01	; 1
    3e68:	0e 94 33 07 	call	0xe66	; 0xe66 <Handle_data>

	}
	counter++;
    3e6c:	80 91 36 02 	lds	r24, 0x0236
    3e70:	90 91 37 02 	lds	r25, 0x0237
    3e74:	01 96       	adiw	r24, 0x01	; 1
    3e76:	90 93 37 02 	sts	0x0237, r25
    3e7a:	80 93 36 02 	sts	0x0236, r24
	counter = counter%polling_counter;
    3e7e:	80 91 36 02 	lds	r24, 0x0236
    3e82:	90 91 37 02 	lds	r25, 0x0237
    3e86:	20 91 19 02 	lds	r18, 0x0219
    3e8a:	30 91 1a 02 	lds	r19, 0x021A
    3e8e:	b9 01       	movw	r22, r18
    3e90:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__divmodhi4>
    3e94:	90 93 37 02 	sts	0x0237, r25
    3e98:	80 93 36 02 	sts	0x0236, r24
}
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	08 95       	ret

00003eaa <StartPolling>:

void StartPolling(void)
{
    3eaa:	df 93       	push	r29
    3eac:	cf 93       	push	r28
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	90 93 18 02 	sts	0x0218, r25
    3eba:	80 93 17 02 	sts	0x0217, r24
}
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <StopPolling>:

void StopPolling(void)
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    3ecc:	10 92 18 02 	sts	0x0218, r1
    3ed0:	10 92 17 02 	sts	0x0217, r1
}
    3ed4:	cf 91       	pop	r28
    3ed6:	df 91       	pop	r29
    3ed8:	08 95       	ret

00003eda <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    3eda:	df 93       	push	r29
    3edc:	cf 93       	push	r28
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <SetPollingTime+0x6>
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/(50*2);
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	9a 81       	ldd	r25, Y+2	; 0x02
    3eec:	24 e6       	ldi	r18, 0x64	; 100
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	b9 01       	movw	r22, r18
    3ef2:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__divmodhi4>
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	90 93 1a 02 	sts	0x021A, r25
    3efc:	80 93 19 02 	sts	0x0219, r24
	 *
	 *
	 *
	 *
	 * */
}
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <__divmodhi4>:
    3f0a:	97 fb       	bst	r25, 7
    3f0c:	09 2e       	mov	r0, r25
    3f0e:	07 26       	eor	r0, r23
    3f10:	0a d0       	rcall	.+20     	; 0x3f26 <__divmodhi4_neg1>
    3f12:	77 fd       	sbrc	r23, 7
    3f14:	04 d0       	rcall	.+8      	; 0x3f1e <__divmodhi4_neg2>
    3f16:	0c d0       	rcall	.+24     	; 0x3f30 <__udivmodhi4>
    3f18:	06 d0       	rcall	.+12     	; 0x3f26 <__divmodhi4_neg1>
    3f1a:	00 20       	and	r0, r0
    3f1c:	1a f4       	brpl	.+6      	; 0x3f24 <__divmodhi4_exit>

00003f1e <__divmodhi4_neg2>:
    3f1e:	70 95       	com	r23
    3f20:	61 95       	neg	r22
    3f22:	7f 4f       	sbci	r23, 0xFF	; 255

00003f24 <__divmodhi4_exit>:
    3f24:	08 95       	ret

00003f26 <__divmodhi4_neg1>:
    3f26:	f6 f7       	brtc	.-4      	; 0x3f24 <__divmodhi4_exit>
    3f28:	90 95       	com	r25
    3f2a:	81 95       	neg	r24
    3f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2e:	08 95       	ret

00003f30 <__udivmodhi4>:
    3f30:	aa 1b       	sub	r26, r26
    3f32:	bb 1b       	sub	r27, r27
    3f34:	51 e1       	ldi	r21, 0x11	; 17
    3f36:	07 c0       	rjmp	.+14     	; 0x3f46 <__udivmodhi4_ep>

00003f38 <__udivmodhi4_loop>:
    3f38:	aa 1f       	adc	r26, r26
    3f3a:	bb 1f       	adc	r27, r27
    3f3c:	a6 17       	cp	r26, r22
    3f3e:	b7 07       	cpc	r27, r23
    3f40:	10 f0       	brcs	.+4      	; 0x3f46 <__udivmodhi4_ep>
    3f42:	a6 1b       	sub	r26, r22
    3f44:	b7 0b       	sbc	r27, r23

00003f46 <__udivmodhi4_ep>:
    3f46:	88 1f       	adc	r24, r24
    3f48:	99 1f       	adc	r25, r25
    3f4a:	5a 95       	dec	r21
    3f4c:	a9 f7       	brne	.-22     	; 0x3f38 <__udivmodhi4_loop>
    3f4e:	80 95       	com	r24
    3f50:	90 95       	com	r25
    3f52:	bc 01       	movw	r22, r24
    3f54:	cd 01       	movw	r24, r26
    3f56:	08 95       	ret

00003f58 <__prologue_saves__>:
    3f58:	2f 92       	push	r2
    3f5a:	3f 92       	push	r3
    3f5c:	4f 92       	push	r4
    3f5e:	5f 92       	push	r5
    3f60:	6f 92       	push	r6
    3f62:	7f 92       	push	r7
    3f64:	8f 92       	push	r8
    3f66:	9f 92       	push	r9
    3f68:	af 92       	push	r10
    3f6a:	bf 92       	push	r11
    3f6c:	cf 92       	push	r12
    3f6e:	df 92       	push	r13
    3f70:	ef 92       	push	r14
    3f72:	ff 92       	push	r15
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	ca 1b       	sub	r28, r26
    3f82:	db 0b       	sbc	r29, r27
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	09 94       	ijmp

00003f90 <__epilogue_restores__>:
    3f90:	2a 88       	ldd	r2, Y+18	; 0x12
    3f92:	39 88       	ldd	r3, Y+17	; 0x11
    3f94:	48 88       	ldd	r4, Y+16	; 0x10
    3f96:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f98:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    3fa4:	c8 84       	ldd	r12, Y+8	; 0x08
    3fa6:	df 80       	ldd	r13, Y+7	; 0x07
    3fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    3faa:	fd 80       	ldd	r15, Y+5	; 0x05
    3fac:	0c 81       	ldd	r16, Y+4	; 0x04
    3fae:	1b 81       	ldd	r17, Y+3	; 0x03
    3fb0:	aa 81       	ldd	r26, Y+2	; 0x02
    3fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    3fb4:	ce 0f       	add	r28, r30
    3fb6:	d1 1d       	adc	r29, r1
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	ed 01       	movw	r28, r26
    3fc4:	08 95       	ret

00003fc6 <itoa>:
    3fc6:	fb 01       	movw	r30, r22
    3fc8:	9f 01       	movw	r18, r30
    3fca:	e8 94       	clt
    3fcc:	42 30       	cpi	r20, 0x02	; 2
    3fce:	c4 f0       	brlt	.+48     	; 0x4000 <itoa+0x3a>
    3fd0:	45 32       	cpi	r20, 0x25	; 37
    3fd2:	b4 f4       	brge	.+44     	; 0x4000 <itoa+0x3a>
    3fd4:	4a 30       	cpi	r20, 0x0A	; 10
    3fd6:	29 f4       	brne	.+10     	; 0x3fe2 <itoa+0x1c>
    3fd8:	97 fb       	bst	r25, 7
    3fda:	1e f4       	brtc	.+6      	; 0x3fe2 <itoa+0x1c>
    3fdc:	90 95       	com	r25
    3fde:	81 95       	neg	r24
    3fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe2:	64 2f       	mov	r22, r20
    3fe4:	77 27       	eor	r23, r23
    3fe6:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__udivmodhi4>
    3fea:	80 5d       	subi	r24, 0xD0	; 208
    3fec:	8a 33       	cpi	r24, 0x3A	; 58
    3fee:	0c f0       	brlt	.+2      	; 0x3ff2 <itoa+0x2c>
    3ff0:	89 5d       	subi	r24, 0xD9	; 217
    3ff2:	81 93       	st	Z+, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	00 97       	sbiw	r24, 0x00	; 0
    3ff8:	a1 f7       	brne	.-24     	; 0x3fe2 <itoa+0x1c>
    3ffa:	16 f4       	brtc	.+4      	; 0x4000 <itoa+0x3a>
    3ffc:	5d e2       	ldi	r21, 0x2D	; 45
    3ffe:	51 93       	st	Z+, r21
    4000:	10 82       	st	Z, r1
    4002:	c9 01       	movw	r24, r18
    4004:	0c 94 04 20 	jmp	0x4008	; 0x4008 <strrev>

00004008 <strrev>:
    4008:	dc 01       	movw	r26, r24
    400a:	fc 01       	movw	r30, r24
    400c:	67 2f       	mov	r22, r23
    400e:	71 91       	ld	r23, Z+
    4010:	77 23       	and	r23, r23
    4012:	e1 f7       	brne	.-8      	; 0x400c <strrev+0x4>
    4014:	32 97       	sbiw	r30, 0x02	; 2
    4016:	04 c0       	rjmp	.+8      	; 0x4020 <strrev+0x18>
    4018:	7c 91       	ld	r23, X
    401a:	6d 93       	st	X+, r22
    401c:	70 83       	st	Z, r23
    401e:	62 91       	ld	r22, -Z
    4020:	ae 17       	cp	r26, r30
    4022:	bf 07       	cpc	r27, r31
    4024:	c8 f3       	brcs	.-14     	; 0x4018 <strrev+0x10>
    4026:	08 95       	ret

00004028 <_exit>:
    4028:	f8 94       	cli

0000402a <__stop_program>:
    402a:	ff cf       	rjmp	.-2      	; 0x402a <__stop_program>
