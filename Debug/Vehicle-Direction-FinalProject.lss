
Vehicle-Direction-FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00003610  000036a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080008e  0080008e  000036d2  2**0
                  ALLOC
  3 .stab         00002f70  00000000  00000000  000036d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102c  00000000  00000000  00006644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b204  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 19 	call	0x332e	; 0x332e <main>
      8a:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Handle_data>:
#include <util/delay.h>

uint8_t state;

void Handle_data(States_GroupType *Sates_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Handle_data+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(0, 0);
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_displayString("H:"); //hazard button
     b5c:	80 e6       	ldi	r24, 0x60	; 96
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->hazard_Btn);
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_intgerToString>
	LCD_displayString(" I:");	//ignition button
     b72:	83 e6       	ldi	r24, 0x63	; 99
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->ignition_key);
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	80 81       	ld	r24, Z
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_intgerToString>
	LCD_moveCursor(1, 0);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_displayString("L:");	//left indicator
     b90:	87 e6       	ldi	r24, 0x67	; 103
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->leftIndicator);
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_intgerToString>
	LCD_displayString(" R:");	//right indicator
     ba6:	8a e6       	ldi	r24, 0x6A	; 106
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
	LCD_intgerToString(Sates_Ptr->rightIndicator);
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_intgerToString>


	if(Sates_Ptr->ignition_key==TRUE)
     bbc:	e9 81       	ldd	r30, Y+1	; 0x01
     bbe:	fa 81       	ldd	r31, Y+2	; 0x02
     bc0:	80 81       	ld	r24, Z
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	b1 f4       	brne	.+44     	; 0xbf2 <Handle_data+0xac>
	{
		if(Sates_Ptr->rightIndicator==TRUE)
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	21 f4       	brne	.+8      	; 0xbd8 <Handle_data+0x92>
		{
			state = RIGHT_INDICATOR;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 98 00 	sts	0x0098, r24
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <Handle_data+0xbc>
		}
		else if(Sates_Ptr->leftIndicator==TRUE)
     bd8:	e9 81       	ldd	r30, Y+1	; 0x01
     bda:	fa 81       	ldd	r31, Y+2	; 0x02
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	21 f4       	brne	.+8      	; 0xbea <Handle_data+0xa4>
		{
			state = LEFT_INDICATOR;
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	80 93 98 00 	sts	0x0098, r24
     be8:	0c c0       	rjmp	.+24     	; 0xc02 <Handle_data+0xbc>
		}
		else
		{
			state = NO_INDICATOR;
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	80 93 98 00 	sts	0x0098, r24
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <Handle_data+0xbc>
		}
	}
	else if(Sates_Ptr->ignition_key==FALSE)
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	80 81       	ld	r24, Z
     bf8:	88 23       	and	r24, r24
     bfa:	19 f4       	brne	.+6      	; 0xc02 <Handle_data+0xbc>
	{
		state = NO_INDICATOR;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	80 93 98 00 	sts	0x0098, r24
	}


	if(Sates_Ptr->hazard_Btn==TRUE)
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02
     c06:	83 81       	ldd	r24, Z+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <Handle_data+0xcc>
	{
		state = HAZARD_BUTTON;
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	80 93 98 00 	sts	0x0098, r24
	}



	State_Handler();
     c12:	0e 94 10 06 	call	0xc20	; 0xc20 <State_Handler>
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <State_Handler>:

void State_Handler(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <State_Handler+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
	switch(state)
     c2a:	80 91 98 00 	lds	r24, 0x0098
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	29 83       	std	Y+1, r18	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	91 05       	cpc	r25, r1
     c3e:	e1 f0       	breq	.+56     	; 0xc78 <State_Handler+0x58>
     c40:	29 81       	ldd	r18, Y+1	; 0x01
     c42:	3a 81       	ldd	r19, Y+2	; 0x02
     c44:	23 30       	cpi	r18, 0x03	; 3
     c46:	31 05       	cpc	r19, r1
     c48:	34 f4       	brge	.+12     	; 0xc56 <State_Handler+0x36>
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	79 f0       	breq	.+30     	; 0xc72 <State_Handler+0x52>
     c54:	16 c0       	rjmp	.+44     	; 0xc82 <State_Handler+0x62>
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	23 30       	cpi	r18, 0x03	; 3
     c5c:	31 05       	cpc	r19, r1
     c5e:	31 f0       	breq	.+12     	; 0xc6c <State_Handler+0x4c>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	91 05       	cpc	r25, r1
     c68:	51 f0       	breq	.+20     	; 0xc7e <State_Handler+0x5e>
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <State_Handler+0x62>
		{
			case NO_INDICATOR:
				LEDS_Off();
     c6c:	0e 94 46 06 	call	0xc8c	; 0xc8c <LEDS_Off>
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <State_Handler+0x62>
				break;
			case RIGHT_INDICATOR:
				RightLED_Blink();
     c72:	0e 94 5d 06 	call	0xcba	; 0xcba <RightLED_Blink>
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <State_Handler+0x62>
				break;
			case LEFT_INDICATOR:
				LeftLED_Blink();
     c78:	0e 94 64 07 	call	0xec8	; 0xec8 <LeftLED_Blink>
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <State_Handler+0x62>
				break;
			case HAZARD_BUTTON:
				BothLEDS_Blink();
     c7e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <BothLEDS_Blink>
				break;

		}

}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <LEDS_Off>:


void LEDS_Off(void)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(dio_config_array[RIGHT_LED_ID].port_id, dio_config_array[RIGHT_LED_ID].pin_num, LOGIC_LOW);
     c94:	80 91 87 00 	lds	r24, 0x0087
     c98:	90 91 88 00 	lds	r25, 0x0088
     c9c:	69 2f       	mov	r22, r25
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(dio_config_array[LEFT_LED_ID].port_id, dio_config_array[LEFT_LED_ID].pin_num, LOGIC_LOW);
     ca4:	80 91 8a 00 	lds	r24, 0x008A
     ca8:	90 91 8b 00 	lds	r25, 0x008B
     cac:	69 2f       	mov	r22, r25
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <RightLED_Blink>:
void RightLED_Blink(void)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	6c 97       	sbiw	r28, 0x1c	; 28
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(dio_config_array[RIGHT_LED_ID].port_id, dio_config_array[RIGHT_LED_ID].pin_num, LOGIC_HIGH);
     cce:	80 91 87 00 	lds	r24, 0x0087
     cd2:	90 91 88 00 	lds	r25, 0x0088
     cd6:	69 2f       	mov	r22, r25
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	aa ef       	ldi	r26, 0xFA	; 250
     ce4:	b3 e4       	ldi	r27, 0x43	; 67
     ce6:	89 8f       	std	Y+25, r24	; 0x19
     ce8:	9a 8f       	std	Y+26, r25	; 0x1a
     cea:	ab 8f       	std	Y+27, r26	; 0x1b
     cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	69 8d       	ldd	r22, Y+25	; 0x19
     cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	4a e7       	ldi	r20, 0x7A	; 122
     cfc:	53 e4       	ldi	r21, 0x43	; 67
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8d 8b       	std	Y+21, r24	; 0x15
     d08:	9e 8b       	std	Y+22, r25	; 0x16
     d0a:	af 8b       	std	Y+23, r26	; 0x17
     d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d0e:	6d 89       	ldd	r22, Y+21	; 0x15
     d10:	7e 89       	ldd	r23, Y+22	; 0x16
     d12:	8f 89       	ldd	r24, Y+23	; 0x17
     d14:	98 8d       	ldd	r25, Y+24	; 0x18
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	2c f4       	brge	.+10     	; 0xd30 <RightLED_Blink+0x76>
		__ticks = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	3f c0       	rjmp	.+126    	; 0xdae <RightLED_Blink+0xf4>
	else if (__tmp > 65535)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	3f ef       	ldi	r19, 0xFF	; 255
     d3c:	4f e7       	ldi	r20, 0x7F	; 127
     d3e:	57 e4       	ldi	r21, 0x47	; 71
     d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d44:	18 16       	cp	r1, r24
     d46:	4c f5       	brge	.+82     	; 0xd9a <RightLED_Blink+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	69 8d       	ldd	r22, Y+25	; 0x19
     d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9c 8b       	std	Y+20, r25	; 0x14
     d6e:	8b 8b       	std	Y+19, r24	; 0x13
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <RightLED_Blink+0xd6>
     d72:	89 e1       	ldi	r24, 0x19	; 25
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9a 8b       	std	Y+18, r25	; 0x12
     d78:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d7a:	89 89       	ldd	r24, Y+17	; 0x11
     d7c:	9a 89       	ldd	r25, Y+18	; 0x12
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <RightLED_Blink+0xc4>
     d82:	9a 8b       	std	Y+18, r25	; 0x12
     d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	69 f7       	brne	.-38     	; 0xd72 <RightLED_Blink+0xb8>
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <RightLED_Blink+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	6d 89       	ldd	r22, Y+21	; 0x15
     d9c:	7e 89       	ldd	r23, Y+22	; 0x16
     d9e:	8f 89       	ldd	r24, Y+23	; 0x17
     da0:	98 8d       	ldd	r25, Y+24	; 0x18
     da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9c 8b       	std	Y+20, r25	; 0x14
     dac:	8b 8b       	std	Y+19, r24	; 0x13
     dae:	8b 89       	ldd	r24, Y+19	; 0x13
     db0:	9c 89       	ldd	r25, Y+20	; 0x14
     db2:	98 8b       	std	Y+16, r25	; 0x10
     db4:	8f 87       	std	Y+15, r24	; 0x0f
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
     db8:	98 89       	ldd	r25, Y+16	; 0x10
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <RightLED_Blink+0x100>
     dbe:	98 8b       	std	Y+16, r25	; 0x10
     dc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	GPIO_writePin(dio_config_array[RIGHT_LED_ID].port_id, dio_config_array[RIGHT_LED_ID].pin_num, LOGIC_LOW);
     dc2:	80 91 87 00 	lds	r24, 0x0087
     dc6:	90 91 88 00 	lds	r25, 0x0088
     dca:	69 2f       	mov	r22, r25
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	aa ef       	ldi	r26, 0xFA	; 250
     dd8:	b3 e4       	ldi	r27, 0x43	; 67
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a e7       	ldi	r20, 0x7A	; 122
     df0:	53 e4       	ldi	r21, 0x43	; 67
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <RightLED_Blink+0x16a>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <RightLED_Blink+0x1e8>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <RightLED_Blink+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <RightLED_Blink+0x1ca>
     e66:	89 e1       	ldi	r24, 0x19	; 25
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <RightLED_Blink+0x1b8>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <RightLED_Blink+0x1ac>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <RightLED_Blink+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <RightLED_Blink+0x1f4>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     eb6:	6c 96       	adiw	r28, 0x1c	; 28
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <LeftLED_Blink>:

void LeftLED_Blink(void)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	6c 97       	sbiw	r28, 0x1c	; 28
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(dio_config_array[LEFT_LED_ID].port_id, dio_config_array[LEFT_LED_ID].pin_num, LOGIC_HIGH);
     edc:	80 91 8a 00 	lds	r24, 0x008A
     ee0:	90 91 8b 00 	lds	r25, 0x008B
     ee4:	69 2f       	mov	r22, r25
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	aa ef       	ldi	r26, 0xFA	; 250
     ef2:	b3 e4       	ldi	r27, 0x43	; 67
     ef4:	89 8f       	std	Y+25, r24	; 0x19
     ef6:	9a 8f       	std	Y+26, r25	; 0x1a
     ef8:	ab 8f       	std	Y+27, r26	; 0x1b
     efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	69 8d       	ldd	r22, Y+25	; 0x19
     efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a e7       	ldi	r20, 0x7A	; 122
     f0a:	53 e4       	ldi	r21, 0x43	; 67
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8d 8b       	std	Y+21, r24	; 0x15
     f16:	9e 8b       	std	Y+22, r25	; 0x16
     f18:	af 8b       	std	Y+23, r26	; 0x17
     f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <LeftLED_Blink+0x76>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <LeftLED_Blink+0xf4>
	else if (__tmp > 65535)
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <LeftLED_Blink+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <LeftLED_Blink+0xd6>
     f80:	89 e1       	ldi	r24, 0x19	; 25
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9a 8b       	std	Y+18, r25	; 0x12
     f86:	89 8b       	std	Y+17, r24	; 0x11
     f88:	89 89       	ldd	r24, Y+17	; 0x11
     f8a:	9a 89       	ldd	r25, Y+18	; 0x12
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <LeftLED_Blink+0xc4>
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <LeftLED_Blink+0xb8>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <LeftLED_Blink+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	98 8b       	std	Y+16, r25	; 0x10
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	98 89       	ldd	r25, Y+16	; 0x10
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LeftLED_Blink+0x100>
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	GPIO_writePin(dio_config_array[LEFT_LED_ID].port_id, dio_config_array[LEFT_LED_ID].pin_num, LOGIC_LOW);
     fd0:	80 91 8a 00 	lds	r24, 0x008A
     fd4:	90 91 8b 00 	lds	r25, 0x008B
     fd8:	69 2f       	mov	r22, r25
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	aa ef       	ldi	r26, 0xFA	; 250
     fe6:	b3 e4       	ldi	r27, 0x43	; 67
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
     fea:	9c 87       	std	Y+12, r25	; 0x0c
     fec:	ad 87       	std	Y+13, r26	; 0x0d
     fee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a e7       	ldi	r20, 0x7A	; 122
     ffe:	53 e4       	ldi	r21, 0x43	; 67
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8f 83       	std	Y+7, r24	; 0x07
    100a:	98 87       	std	Y+8, r25	; 0x08
    100c:	a9 87       	std	Y+9, r26	; 0x09
    100e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <LeftLED_Blink+0x16a>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <LeftLED_Blink+0x1e8>
	else if (__tmp > 65535)
    1032:	6f 81       	ldd	r22, Y+7	; 0x07
    1034:	78 85       	ldd	r23, Y+8	; 0x08
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <LeftLED_Blink+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <LeftLED_Blink+0x1ca>
    1074:	89 e1       	ldi	r24, 0x19	; 25
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <LeftLED_Blink+0x1b8>
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <LeftLED_Blink+0x1ac>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <LeftLED_Blink+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <LeftLED_Blink+0x1f4>
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    10c4:	6c 96       	adiw	r28, 0x1c	; 28
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <BothLEDS_Blink>:

void BothLEDS_Blink(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	6c 97       	sbiw	r28, 0x1c	; 28
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(dio_config_array[RIGHT_LED_ID].port_id, dio_config_array[RIGHT_LED_ID].pin_num, LOGIC_HIGH);
    10ea:	80 91 87 00 	lds	r24, 0x0087
    10ee:	90 91 88 00 	lds	r25, 0x0088
    10f2:	69 2f       	mov	r22, r25
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(dio_config_array[LEFT_LED_ID].port_id, dio_config_array[LEFT_LED_ID].pin_num, LOGIC_HIGH);
    10fa:	80 91 8a 00 	lds	r24, 0x008A
    10fe:	90 91 8b 00 	lds	r25, 0x008B
    1102:	69 2f       	mov	r22, r25
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	aa ef       	ldi	r26, 0xFA	; 250
    1110:	b3 e4       	ldi	r27, 0x43	; 67
    1112:	89 8f       	std	Y+25, r24	; 0x19
    1114:	9a 8f       	std	Y+26, r25	; 0x1a
    1116:	ab 8f       	std	Y+27, r26	; 0x1b
    1118:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111a:	69 8d       	ldd	r22, Y+25	; 0x19
    111c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a e7       	ldi	r20, 0x7A	; 122
    1128:	53 e4       	ldi	r21, 0x43	; 67
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8d 8b       	std	Y+21, r24	; 0x15
    1134:	9e 8b       	std	Y+22, r25	; 0x16
    1136:	af 8b       	std	Y+23, r26	; 0x17
    1138:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    113a:	6d 89       	ldd	r22, Y+21	; 0x15
    113c:	7e 89       	ldd	r23, Y+22	; 0x16
    113e:	8f 89       	ldd	r24, Y+23	; 0x17
    1140:	98 8d       	ldd	r25, Y+24	; 0x18
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <BothLEDS_Blink+0x86>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 8b       	std	Y+20, r25	; 0x14
    1158:	8b 8b       	std	Y+19, r24	; 0x13
    115a:	3f c0       	rjmp	.+126    	; 0x11da <BothLEDS_Blink+0x104>
	else if (__tmp > 65535)
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	4c f5       	brge	.+82     	; 0x11c6 <BothLEDS_Blink+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	69 8d       	ldd	r22, Y+25	; 0x19
    1176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9c 8b       	std	Y+20, r25	; 0x14
    119a:	8b 8b       	std	Y+19, r24	; 0x13
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <BothLEDS_Blink+0xe6>
    119e:	89 e1       	ldi	r24, 0x19	; 25
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9a 8b       	std	Y+18, r25	; 0x12
    11a4:	89 8b       	std	Y+17, r24	; 0x11
    11a6:	89 89       	ldd	r24, Y+17	; 0x11
    11a8:	9a 89       	ldd	r25, Y+18	; 0x12
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <BothLEDS_Blink+0xd4>
    11ae:	9a 8b       	std	Y+18, r25	; 0x12
    11b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	9c 8b       	std	Y+20, r25	; 0x14
    11ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	8b 89       	ldd	r24, Y+19	; 0x13
    11be:	9c 89       	ldd	r25, Y+20	; 0x14
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f7       	brne	.-38     	; 0x119e <BothLEDS_Blink+0xc8>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <BothLEDS_Blink+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	6d 89       	ldd	r22, Y+21	; 0x15
    11c8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ca:	8f 89       	ldd	r24, Y+23	; 0x17
    11cc:	98 8d       	ldd	r25, Y+24	; 0x18
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	8b 89       	ldd	r24, Y+19	; 0x13
    11dc:	9c 89       	ldd	r25, Y+20	; 0x14
    11de:	98 8b       	std	Y+16, r25	; 0x10
    11e0:	8f 87       	std	Y+15, r24	; 0x0f
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	98 89       	ldd	r25, Y+16	; 0x10
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <BothLEDS_Blink+0x110>
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	GPIO_writePin(dio_config_array[RIGHT_LED_ID].port_id, dio_config_array[RIGHT_LED_ID].pin_num, LOGIC_LOW);
    11ee:	80 91 87 00 	lds	r24, 0x0087
    11f2:	90 91 88 00 	lds	r25, 0x0088
    11f6:	69 2f       	mov	r22, r25
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(dio_config_array[LEFT_LED_ID].port_id, dio_config_array[LEFT_LED_ID].pin_num, LOGIC_LOW);
    11fe:	80 91 8a 00 	lds	r24, 0x008A
    1202:	90 91 8b 00 	lds	r25, 0x008B
    1206:	69 2f       	mov	r22, r25
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	aa ef       	ldi	r26, 0xFA	; 250
    1214:	b3 e4       	ldi	r27, 0x43	; 67
    1216:	8b 87       	std	Y+11, r24	; 0x0b
    1218:	9c 87       	std	Y+12, r25	; 0x0c
    121a:	ad 87       	std	Y+13, r26	; 0x0d
    121c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1220:	7c 85       	ldd	r23, Y+12	; 0x0c
    1222:	8d 85       	ldd	r24, Y+13	; 0x0d
    1224:	9e 85       	ldd	r25, Y+14	; 0x0e
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a e7       	ldi	r20, 0x7A	; 122
    122c:	53 e4       	ldi	r21, 0x43	; 67
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8f 83       	std	Y+7, r24	; 0x07
    1238:	98 87       	std	Y+8, r25	; 0x08
    123a:	a9 87       	std	Y+9, r26	; 0x09
    123c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <BothLEDS_Blink+0x18a>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	3f c0       	rjmp	.+126    	; 0x12de <BothLEDS_Blink+0x208>
	else if (__tmp > 65535)
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <BothLEDS_Blink+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6b 85       	ldd	r22, Y+11	; 0x0b
    127a:	7c 85       	ldd	r23, Y+12	; 0x0c
    127c:	8d 85       	ldd	r24, Y+13	; 0x0d
    127e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <BothLEDS_Blink+0x1ea>
    12a2:	89 e1       	ldi	r24, 0x19	; 25
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <BothLEDS_Blink+0x1d8>
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <BothLEDS_Blink+0x1cc>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <BothLEDS_Blink+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <BothLEDS_Blink+0x214>
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    12f2:	6c 96       	adiw	r28, 0x1c	; 28
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <Timer2_Init_CTC_Mode>:
 */

#include "avr/io.h"

void Timer2_Init_CTC_Mode(unsigned char tick)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;    // Set Timer initial value to 0
    1310:	e4 e4       	ldi	r30, 0x44	; 68
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	10 82       	st	Z, r1
	OCR2  = tick; // Set Compare Value
    1316:	e3 e4       	ldi	r30, 0x43	; 67
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
    131e:	a9 e5       	ldi	r26, 0x59	; 89
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e9 e5       	ldi	r30, 0x59	; 89
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 68       	ori	r24, 0x80	; 128
    132a:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/8 CS22=0 CS21=1 CS20=0
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21)  | (1<<CS21);
    132c:	e5 e4       	ldi	r30, 0x45	; 69
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a e8       	ldi	r24, 0x8A	; 138
    1332:	80 83       	st	Z, r24
}
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Get_Data>:
unsigned char data;

#include<util/delay.h>

States_GroupType Get_Data(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	2f 97       	sbiw	r28, 0x0f	; 15
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	static unsigned char hazardBtn_releaseFlag = TRUE;
	static States_GroupType ButtonState = { 0, 0, 0, 0 };

	if (GPIO_readPin(dio_config_array[HAZARD_BUTTON_ID].port_id,dio_config_array[HAZARD_BUTTON_ID].pin_num))
    1350:	80 91 7b 00 	lds	r24, 0x007B
    1354:	90 91 7c 00 	lds	r25, 0x007C
    1358:	69 2f       	mov	r22, r25
    135a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    135e:	88 23       	and	r24, r24
    1360:	89 f0       	breq	.+34     	; 0x1384 <Get_Data+0x48>
	{
		if (hazardBtn_releaseFlag == TRUE)
    1362:	80 91 76 00 	lds	r24, 0x0076
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	81 f4       	brne	.+32     	; 0x138a <Get_Data+0x4e>
		{
			hazardBtn_releaseFlag = FALSE;
    136a:	10 92 76 00 	sts	0x0076, r1
			ButtonState.hazard_Btn = !ButtonState.hazard_Btn;
    136e:	80 91 91 00 	lds	r24, 0x0091
    1372:	1f 86       	std	Y+15, r1	; 0x0f
    1374:	88 23       	and	r24, r24
    1376:	11 f4       	brne	.+4      	; 0x137c <Get_Data+0x40>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	8f 87       	std	Y+15, r24	; 0x0f
    137c:	8f 85       	ldd	r24, Y+15	; 0x0f
    137e:	80 93 91 00 	sts	0x0091, r24
    1382:	03 c0       	rjmp	.+6      	; 0x138a <Get_Data+0x4e>
		}

	} else
	{
		hazardBtn_releaseFlag = TRUE;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 76 00 	sts	0x0076, r24
	}

	if ((!GPIO_readPin(dio_config_array[RIGHT_INDICATOR_BUTTON_ID].port_id,dio_config_array[RIGHT_INDICATOR_BUTTON_ID].pin_num)
    138a:	80 91 81 00 	lds	r24, 0x0081
    138e:	90 91 82 00 	lds	r25, 0x0082
    1392:	69 2f       	mov	r22, r25
    1394:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    1398:	88 23       	and	r24, r24
    139a:	51 f0       	breq	.+20     	; 0x13b0 <Get_Data+0x74>
    139c:	80 91 7e 00 	lds	r24, 0x007E
    13a0:	90 91 7f 00 	lds	r25, 0x007F
    13a4:	69 2f       	mov	r22, r25
    13a6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    13aa:	88 23       	and	r24, r24
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <Get_Data+0x74>
    13ae:	ae c0       	rjmp	.+348    	; 0x150c <Get_Data+0x1d0>
    13b0:	80 91 84 00 	lds	r24, 0x0084
    13b4:	90 91 85 00 	lds	r25, 0x0085
    13b8:	69 2f       	mov	r22, r25
    13ba:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    13be:	88 23       	and	r24, r24
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <Get_Data+0x88>
    13c2:	a4 c0       	rjmp	.+328    	; 0x150c <Get_Data+0x1d0>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a8 e4       	ldi	r26, 0x48	; 72
    13ca:	b2 e4       	ldi	r27, 0x42	; 66
    13cc:	8b 87       	std	Y+11, r24	; 0x0b
    13ce:	9c 87       	std	Y+12, r25	; 0x0c
    13d0:	ad 87       	std	Y+13, r26	; 0x0d
    13d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a e7       	ldi	r20, 0x7A	; 122
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8f 83       	std	Y+7, r24	; 0x07
    13ee:	98 87       	std	Y+8, r25	; 0x08
    13f0:	a9 87       	std	Y+9, r26	; 0x09
    13f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f4:	6f 81       	ldd	r22, Y+7	; 0x07
    13f6:	78 85       	ldd	r23, Y+8	; 0x08
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <Get_Data+0xda>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <Get_Data+0x158>
	else if (__tmp > 65535)
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <Get_Data+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1430:	7c 85       	ldd	r23, Y+12	; 0x0c
    1432:	8d 85       	ldd	r24, Y+13	; 0x0d
    1434:	9e 85       	ldd	r25, Y+14	; 0x0e
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <Get_Data+0x13a>
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <Get_Data+0x128>
    1468:	9c 83       	std	Y+4, r25	; 0x04
    146a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <Get_Data+0x11c>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <Get_Data+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <Get_Data+0x164>
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
			|| !GPIO_readPin(dio_config_array[LEFT_INDICATOR_BUTTON_ID].port_id,dio_config_array[LEFT_INDICATOR_BUTTON_ID].pin_num))
			&& !GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num))
	{
		_delay_ms(50);
		if (!GPIO_readPin(dio_config_array[IGNITION_SWICH_ID].port_id,dio_config_array[IGNITION_SWICH_ID].pin_num))
    14a8:	80 91 84 00 	lds	r24, 0x0084
    14ac:	90 91 85 00 	lds	r25, 0x0085
    14b0:	69 2f       	mov	r22, r25
    14b2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    14b6:	88 23       	and	r24, r24
    14b8:	11 f5       	brne	.+68     	; 0x14fe <Get_Data+0x1c2>
		{
			ButtonState.ignition_key = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 93 8e 00 	sts	0x008E, r24
			if (!GPIO_readPin(dio_config_array[RIGHT_INDICATOR_BUTTON_ID].port_id,dio_config_array[RIGHT_INDICATOR_BUTTON_ID].pin_num))
    14c0:	80 91 81 00 	lds	r24, 0x0081
    14c4:	90 91 82 00 	lds	r25, 0x0082
    14c8:	69 2f       	mov	r22, r25
    14ca:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    14ce:	88 23       	and	r24, r24
    14d0:	21 f4       	brne	.+8      	; 0x14da <Get_Data+0x19e>
			{
				ButtonState.rightIndicator = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 90 00 	sts	0x0090, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <Get_Data+0x1a2>
			} else
			{
				ButtonState.rightIndicator = 0;
    14da:	10 92 90 00 	sts	0x0090, r1
			}

			if (!GPIO_readPin(dio_config_array[LEFT_INDICATOR_BUTTON_ID].port_id,dio_config_array[LEFT_INDICATOR_BUTTON_ID].pin_num))
    14de:	80 91 7e 00 	lds	r24, 0x007E
    14e2:	90 91 7f 00 	lds	r25, 0x007F
    14e6:	69 2f       	mov	r22, r25
    14e8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    14ec:	88 23       	and	r24, r24
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <Get_Data+0x1bc>
			{
				ButtonState.leftIndicator = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	80 93 8f 00 	sts	0x008F, r24
    14f6:	10 c0       	rjmp	.+32     	; 0x1518 <Get_Data+0x1dc>
			} else
			{
				ButtonState.leftIndicator = 0;
    14f8:	10 92 8f 00 	sts	0x008F, r1
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <Get_Data+0x1dc>
			}

		}
		else
		{
			ButtonState.ignition_key = 0;
    14fe:	10 92 8e 00 	sts	0x008E, r1
			ButtonState.rightIndicator = 0;
    1502:	10 92 90 00 	sts	0x0090, r1
			ButtonState.leftIndicator = 0;
    1506:	10 92 8f 00 	sts	0x008F, r1
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <Get_Data+0x1dc>
		}

	}
	else
	{
		ButtonState.rightIndicator = 0;
    150c:	10 92 90 00 	sts	0x0090, r1
		ButtonState.leftIndicator = 0;
    1510:	10 92 8f 00 	sts	0x008F, r1
		ButtonState.ignition_key = 0;
    1514:	10 92 8e 00 	sts	0x008E, r1
//	}
//	else{
//		ButtonState.ignition_key = 0;
//	}

	return ButtonState;
    1518:	80 91 8e 00 	lds	r24, 0x008E
    151c:	90 91 8f 00 	lds	r25, 0x008F
    1520:	a0 91 90 00 	lds	r26, 0x0090
    1524:	b0 91 91 00 	lds	r27, 0x0091
}
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	2f 96       	adiw	r28, 0x0f	; 15
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_setupPinDirection+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <GPIO_setupPinDirection+0x8>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	6a 83       	std	Y+2, r22	; 0x02
    1550:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <GPIO_setupPinDirection+0x1c>
    1558:	d5 c0       	rjmp	.+426    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f0       	brcs	.+2      	; 0x1562 <GPIO_setupPinDirection+0x24>
    1560:	d1 c0       	rjmp	.+418    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3d 83       	std	Y+5, r19	; 0x05
    156a:	2c 83       	std	Y+4, r18	; 0x04
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_setupPinDirection+0x3a>
    1576:	43 c0       	rjmp	.+134    	; 0x15fe <GPIO_setupPinDirection+0xc0>
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	2c f4       	brge	.+10     	; 0x158c <GPIO_setupPinDirection+0x4e>
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	71 f0       	breq	.+28     	; 0x15a6 <GPIO_setupPinDirection+0x68>
    158a:	bc c0       	rjmp	.+376    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
    158c:	2c 81       	ldd	r18, Y+4	; 0x04
    158e:	3d 81       	ldd	r19, Y+5	; 0x05
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <GPIO_setupPinDirection+0x5a>
    1596:	5f c0       	rjmp	.+190    	; 0x1656 <GPIO_setupPinDirection+0x118>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <GPIO_setupPinDirection+0x66>
    15a2:	85 c0       	rjmp	.+266    	; 0x16ae <GPIO_setupPinDirection+0x170>
    15a4:	af c0       	rjmp	.+350    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15ac:	aa e3       	ldi	r26, 0x3A	; 58
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ea e3       	ldi	r30, 0x3A	; 58
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <GPIO_setupPinDirection+0x8c>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <GPIO_setupPinDirection+0x88>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	98 c0       	rjmp	.+304    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15d4:	aa e3       	ldi	r26, 0x3A	; 58
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ea e3       	ldi	r30, 0x3A	; 58
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_setupPinDirection+0xb4>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_setupPinDirection+0xb0>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	83 c0       	rjmp	.+262    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1604:	a7 e3       	ldi	r26, 0x37	; 55
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e7 e3       	ldi	r30, 0x37	; 55
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_setupPinDirection+0xe4>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_setupPinDirection+0xe0>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	6c c0       	rjmp	.+216    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    162c:	a7 e3       	ldi	r26, 0x37	; 55
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e7 e3       	ldi	r30, 0x37	; 55
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_setupPinDirection+0x10c>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_setupPinDirection+0x108>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	57 c0       	rjmp	.+174    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	a1 f4       	brne	.+40     	; 0x1684 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    165c:	a4 e3       	ldi	r26, 0x34	; 52
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e4 e3       	ldi	r30, 0x34	; 52
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_setupPinDirection+0x13c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_setupPinDirection+0x138>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	40 c0       	rjmp	.+128    	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1684:	a4 e3       	ldi	r26, 0x34	; 52
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e4 e3       	ldi	r30, 0x34	; 52
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_setupPinDirection+0x164>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_setupPinDirection+0x160>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	2b c0       	rjmp	.+86     	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	a1 f4       	brne	.+40     	; 0x16dc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_setupPinDirection+0x194>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_setupPinDirection+0x190>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16dc:	a1 e3       	ldi	r26, 0x31	; 49
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e1 e3       	ldi	r30, 0x31	; 49
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_setupPinDirection+0x1bc>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_setupPinDirection+0x1b8>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <GPIO_writePin+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <GPIO_writePin+0x8>
    171c:	0f 92       	push	r0
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
    1726:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	08 f0       	brcs	.+2      	; 0x1730 <GPIO_writePin+0x1c>
    172e:	d5 c0       	rjmp	.+426    	; 0x18da <GPIO_writePin+0x1c6>
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	08 f0       	brcs	.+2      	; 0x1738 <GPIO_writePin+0x24>
    1736:	d1 c0       	rjmp	.+418    	; 0x18da <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3d 83       	std	Y+5, r19	; 0x05
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <GPIO_writePin+0x3a>
    174c:	43 c0       	rjmp	.+134    	; 0x17d4 <GPIO_writePin+0xc0>
    174e:	2c 81       	ldd	r18, Y+4	; 0x04
    1750:	3d 81       	ldd	r19, Y+5	; 0x05
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <GPIO_writePin+0x4e>
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	71 f0       	breq	.+28     	; 0x177c <GPIO_writePin+0x68>
    1760:	bc c0       	rjmp	.+376    	; 0x18da <GPIO_writePin+0x1c6>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <GPIO_writePin+0x5a>
    176c:	5f c0       	rjmp	.+190    	; 0x182c <GPIO_writePin+0x118>
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <GPIO_writePin+0x66>
    1778:	85 c0       	rjmp	.+266    	; 0x1884 <GPIO_writePin+0x170>
    177a:	af c0       	rjmp	.+350    	; 0x18da <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f4       	brne	.+40     	; 0x17aa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1782:	ab e3       	ldi	r26, 0x3B	; 59
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_writePin+0x8c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_writePin+0x88>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	98 c0       	rjmp	.+304    	; 0x18da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17aa:	ab e3       	ldi	r26, 0x3B	; 59
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_writePin+0xb4>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_writePin+0xb0>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	83 c0       	rjmp	.+262    	; 0x18da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_writePin+0xe4>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_writePin+0xe0>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	6c c0       	rjmp	.+216    	; 0x18da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1802:	a8 e3       	ldi	r26, 0x38	; 56
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e8 e3       	ldi	r30, 0x38	; 56
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_writePin+0x10c>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_writePin+0x108>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	57 c0       	rjmp	.+174    	; 0x18da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	a1 f4       	brne	.+40     	; 0x185a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <GPIO_writePin+0x13c>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <GPIO_writePin+0x138>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	40 c0       	rjmp	.+128    	; 0x18da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    185a:	a5 e3       	ldi	r26, 0x35	; 53
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e3       	ldi	r30, 0x35	; 53
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_writePin+0x164>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_writePin+0x160>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	2b c0       	rjmp	.+86     	; 0x18da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	a1 f4       	brne	.+40     	; 0x18b2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_writePin+0x194>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_writePin+0x190>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18b2:	a2 e3       	ldi	r26, 0x32	; 50
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e2 e3       	ldi	r30, 0x32	; 50
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_writePin+0x1bc>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_writePin+0x1b8>
    18d4:	80 95       	com	r24
    18d6:	84 23       	and	r24, r20
    18d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <GPIO_readPin+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <GPIO_readPin+0x8>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18fc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 30       	cpi	r24, 0x08	; 8
    1902:	08 f0       	brcs	.+2      	; 0x1906 <GPIO_readPin+0x1c>
    1904:	84 c0       	rjmp	.+264    	; 0x1a0e <GPIO_readPin+0x124>
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	08 f0       	brcs	.+2      	; 0x190e <GPIO_readPin+0x24>
    190c:	80 c0       	rjmp	.+256    	; 0x1a0e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3d 83       	std	Y+5, r19	; 0x05
    1916:	2c 83       	std	Y+4, r18	; 0x04
    1918:	4c 81       	ldd	r20, Y+4	; 0x04
    191a:	5d 81       	ldd	r21, Y+5	; 0x05
    191c:	41 30       	cpi	r20, 0x01	; 1
    191e:	51 05       	cpc	r21, r1
    1920:	79 f1       	breq	.+94     	; 0x1980 <GPIO_readPin+0x96>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	91 05       	cpc	r25, r1
    192a:	34 f4       	brge	.+12     	; 0x1938 <GPIO_readPin+0x4e>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	69 f0       	breq	.+26     	; 0x1950 <GPIO_readPin+0x66>
    1936:	6b c0       	rjmp	.+214    	; 0x1a0e <GPIO_readPin+0x124>
    1938:	4c 81       	ldd	r20, Y+4	; 0x04
    193a:	5d 81       	ldd	r21, Y+5	; 0x05
    193c:	42 30       	cpi	r20, 0x02	; 2
    193e:	51 05       	cpc	r21, r1
    1940:	b9 f1       	breq	.+110    	; 0x19b0 <GPIO_readPin+0xc6>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	09 f4       	brne	.+2      	; 0x194e <GPIO_readPin+0x64>
    194c:	49 c0       	rjmp	.+146    	; 0x19e0 <GPIO_readPin+0xf6>
    194e:	5f c0       	rjmp	.+190    	; 0x1a0e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1950:	e9 e3       	ldi	r30, 0x39	; 57
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_readPin+0x7e>
    1964:	55 95       	asr	r21
    1966:	47 95       	ror	r20
    1968:	8a 95       	dec	r24
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_readPin+0x7a>
    196c:	ca 01       	movw	r24, r20
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	88 23       	and	r24, r24
    1974:	19 f0       	breq	.+6      	; 0x197c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	49 c0       	rjmp	.+146    	; 0x1a0e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    197c:	19 82       	std	Y+1, r1	; 0x01
    197e:	47 c0       	rjmp	.+142    	; 0x1a0e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1980:	e6 e3       	ldi	r30, 0x36	; 54
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_readPin+0xae>
    1994:	55 95       	asr	r21
    1996:	47 95       	ror	r20
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_readPin+0xaa>
    199c:	ca 01       	movw	r24, r20
    199e:	81 70       	andi	r24, 0x01	; 1
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	88 23       	and	r24, r24
    19a4:	19 f0       	breq	.+6      	; 0x19ac <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	31 c0       	rjmp	.+98     	; 0x1a0e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ac:	19 82       	std	Y+1, r1	; 0x01
    19ae:	2f c0       	rjmp	.+94     	; 0x1a0e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19b0:	e3 e3       	ldi	r30, 0x33	; 51
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a9 01       	movw	r20, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_readPin+0xde>
    19c4:	55 95       	asr	r21
    19c6:	47 95       	ror	r20
    19c8:	8a 95       	dec	r24
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_readPin+0xda>
    19cc:	ca 01       	movw	r24, r20
    19ce:	81 70       	andi	r24, 0x01	; 1
    19d0:	90 70       	andi	r25, 0x00	; 0
    19d2:	88 23       	and	r24, r24
    19d4:	19 f0       	breq	.+6      	; 0x19dc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	19 c0       	rjmp	.+50     	; 0x1a0e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19dc:	19 82       	std	Y+1, r1	; 0x01
    19de:	17 c0       	rjmp	.+46     	; 0x1a0e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19e0:	e0 e3       	ldi	r30, 0x30	; 48
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_readPin+0x10e>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_readPin+0x10a>
    19fc:	ca 01       	movw	r24, r20
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	90 70       	andi	r25, 0x00	; 0
    1a02:	88 23       	and	r24, r24
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a0c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <GPIO_setupPortDirection+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <GPIO_setupPortDirection+0x8>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	90 f5       	brcc	.+100    	; 0x1a9a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3c 83       	std	Y+4, r19	; 0x04
    1a3e:	2b 83       	std	Y+3, r18	; 0x03
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	d1 f0       	breq	.+52     	; 0x1a7e <GPIO_setupPortDirection+0x5e>
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <GPIO_setupPortDirection+0x3e>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <GPIO_setupPortDirection+0x54>
    1a5c:	1e c0       	rjmp	.+60     	; 0x1a9a <GPIO_setupPortDirection+0x7a>
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <GPIO_setupPortDirection+0x68>
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	81 f0       	breq	.+32     	; 0x1a92 <GPIO_setupPortDirection+0x72>
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a74:	ea e3       	ldi	r30, 0x3A	; 58
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	0e c0       	rjmp	.+28     	; 0x1a9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a7e:	e7 e3       	ldi	r30, 0x37	; 55
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a92:	e1 e3       	ldi	r30, 0x31	; 49
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <GPIO_writePort+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <GPIO_writePort+0x8>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	90 f5       	brcc	.+100    	; 0x1b22 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	3c 83       	std	Y+4, r19	; 0x04
    1ac6:	2b 83       	std	Y+3, r18	; 0x03
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	d1 f0       	breq	.+52     	; 0x1b06 <GPIO_writePort+0x5e>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <GPIO_writePort+0x3e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	61 f0       	breq	.+24     	; 0x1afc <GPIO_writePort+0x54>
    1ae4:	1e c0       	rjmp	.+60     	; 0x1b22 <GPIO_writePort+0x7a>
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	81 f0       	breq	.+32     	; 0x1b10 <GPIO_writePort+0x68>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	91 05       	cpc	r25, r1
    1af8:	81 f0       	breq	.+32     	; 0x1b1a <GPIO_writePort+0x72>
    1afa:	13 c0       	rjmp	.+38     	; 0x1b22 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b06:	e8 e3       	ldi	r30, 0x38	; 56
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	80 83       	st	Z, r24
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b10:	e5 e3       	ldi	r30, 0x35	; 53
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b1a:	e2 e3       	ldi	r30, 0x32	; 50
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <GPIO_readPort+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <GPIO_readPort+0x8>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b3e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	90 f5       	brcc	.+100    	; 0x1baa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3c 83       	std	Y+4, r19	; 0x04
    1b4e:	2b 83       	std	Y+3, r18	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	91 05       	cpc	r25, r1
    1b58:	d1 f0       	breq	.+52     	; 0x1b8e <GPIO_readPort+0x5e>
    1b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <GPIO_readPort+0x3e>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <GPIO_readPort+0x54>
    1b6c:	1e c0       	rjmp	.+60     	; 0x1baa <GPIO_readPort+0x7a>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <GPIO_readPort+0x68>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	81 f0       	breq	.+32     	; 0x1ba2 <GPIO_readPort+0x72>
    1b82:	13 c0       	rjmp	.+38     	; 0x1baa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b84:	e9 e3       	ldi	r30, 0x39	; 57
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	0e c0       	rjmp	.+28     	; 0x1baa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b8e:	e6 e3       	ldi	r30, 0x36	; 54
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b98:	e3 e3       	ldi	r30, 0x33	; 51
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ba2:	e0 e3       	ldi	r30, 0x30	; 48
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <DIO_init>:


void DIO_init(void)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <DIO_init+0x6>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <DIO_init+0x8>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    1bc6:	1c 82       	std	Y+4, r1	; 0x04
    1bc8:	2f c0       	rjmp	.+94     	; 0x1c28 <DIO_init+0x6e>
		uint8_t portid=dio_config_array[loop].port_id;
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	c9 01       	movw	r24, r18
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e5 58       	subi	r30, 0x85	; 133
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[loop].pin_num;
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	c9 01       	movw	r24, r18
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	82 0f       	add	r24, r18
    1bf2:	93 1f       	adc	r25, r19
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e4 58       	subi	r30, 0x84	; 132
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t direction=dio_config_array[loop].direction;
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	c9 01       	movw	r24, r18
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	82 0f       	add	r24, r18
    1c0c:	93 1f       	adc	r25, r19
    1c0e:	fc 01       	movw	r30, r24
    1c10:	e3 58       	subi	r30, 0x83	; 131
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(portid,pin_num,direction);
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c1c:	49 81       	ldd	r20, Y+1	; 0x01
    1c1e:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>


void DIO_init(void)
{
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	8c 83       	std	Y+4, r24	; 0x04
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	86 30       	cpi	r24, 0x06	; 6
    1c2c:	70 f2       	brcs	.-100    	; 0x1bca <DIO_init+0x10>
		uint8_t portid=dio_config_array[loop].port_id;
		uint8_t pin_num=dio_config_array[loop].pin_num;
		uint8_t direction=dio_config_array[loop].direction;
		GPIO_setupPinDirection(portid,pin_num,direction);
	}
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <DIO_ChannelGroupWrite>:


void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
    1c3c:	af 92       	push	r10
    1c3e:	cf 92       	push	r12
    1c40:	df 92       	push	r13
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	65 97       	sbiw	r28, 0x15	; 21
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 82       	std	Y+7, r12	; 0x07
    1c60:	d8 86       	std	Y+8, r13	; 0x08
    1c62:	e9 86       	std	Y+9, r14	; 0x09
    1c64:	fa 86       	std	Y+10, r15	; 0x0a
    1c66:	0b 87       	std	Y+11, r16	; 0x0b
    1c68:	1c 87       	std	Y+12, r17	; 0x0c
    1c6a:	2d 87       	std	Y+13, r18	; 0x0d
    1c6c:	3e 87       	std	Y+14, r19	; 0x0e
    1c6e:	4f 87       	std	Y+15, r20	; 0x0f
    1c70:	58 8b       	std	Y+16, r21	; 0x10
    1c72:	69 8b       	std	Y+17, r22	; 0x11
    1c74:	7a 8b       	std	Y+18, r23	; 0x12
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	ad 8a       	std	Y+21, r10	; 0x15
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1c82:	1e 82       	std	Y+6, r1	; 0x06
    1c84:	4c c0       	rjmp	.+152    	; 0x1d1e <DIO_ChannelGroupWrite+0xe2>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	9c 01       	movw	r18, r24
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	ce 01       	movw	r24, r28
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	36 96       	adiw	r30, 0x06	; 6
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	c9 01       	movw	r24, r18
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e5 58       	subi	r30, 0x85	; 133
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e4 58       	subi	r30, 0x84	; 132
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t bit_data=READ_BIT(data,loop);
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_ChannelGroupWrite+0xae>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	2a 95       	dec	r18
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_ChannelGroupWrite+0xaa>
    1cee:	98 2f       	mov	r25, r24
    1cf0:	8d 89       	ldd	r24, Y+21	; 0x15
    1cf2:	89 23       	and	r24, r25
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a9 01       	movw	r20, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_ChannelGroupWrite+0xca>
    1d02:	55 95       	asr	r21
    1d04:	47 95       	ror	r20
    1d06:	8a 95       	dec	r24
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_ChannelGroupWrite+0xc6>
    1d0a:	ca 01       	movw	r24, r20
    1d0c:	89 83       	std	Y+1, r24	; 0x01
		GPIO_writePin(portid,pin_num,bit_data);
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	6a 81       	ldd	r22, Y+2	; 0x02
    1d12:	49 81       	ldd	r20, Y+1	; 0x01
    1d14:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    1d18:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	8e 83       	std	Y+6, r24	; 0x06
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	98 17       	cp	r25, r24
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <DIO_ChannelGroupWrite+0xec>
    1d26:	af cf       	rjmp	.-162    	; 0x1c86 <DIO_ChannelGroupWrite+0x4a>
		GPIO_writePin(portid,pin_num,bit_data);

	}


}
    1d28:	65 96       	adiw	r28, 0x15	; 21
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	af 90       	pop	r10
    1d46:	08 95       	ret

00001d48 <DIO_ChannelGroupRead>:


void DIO_ChannelGroupRead(ChannelGroupType channel_group_variabe ,uint8_t * data_ptr)
{
    1d48:	af 92       	push	r10
    1d4a:	bf 92       	push	r11
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	66 97       	sbiw	r28, 0x16	; 22
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 82       	std	Y+7, r12	; 0x07
    1d6e:	d8 86       	std	Y+8, r13	; 0x08
    1d70:	e9 86       	std	Y+9, r14	; 0x09
    1d72:	fa 86       	std	Y+10, r15	; 0x0a
    1d74:	0b 87       	std	Y+11, r16	; 0x0b
    1d76:	1c 87       	std	Y+12, r17	; 0x0c
    1d78:	2d 87       	std	Y+13, r18	; 0x0d
    1d7a:	3e 87       	std	Y+14, r19	; 0x0e
    1d7c:	4f 87       	std	Y+15, r20	; 0x0f
    1d7e:	58 8b       	std	Y+16, r21	; 0x10
    1d80:	69 8b       	std	Y+17, r22	; 0x11
    1d82:	7a 8b       	std	Y+18, r23	; 0x12
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	be 8a       	std	Y+22, r11	; 0x16
    1d8a:	ad 8a       	std	Y+21, r10	; 0x15

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    1d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8e:	98 85       	ldd	r25, Y+8	; 0x08
    1d90:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1d92:	1e 82       	std	Y+6, r1	; 0x06
    1d94:	5d c0       	rjmp	.+186    	; 0x1e50 <DIO_ChannelGroupRead+0x108>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	9c 01       	movw	r18, r24
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	ce 01       	movw	r24, r28
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	fc 01       	movw	r30, r24
    1dae:	36 96       	adiw	r30, 0x06	; 6
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e5 58       	subi	r30, 0x85	; 133
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	82 0f       	add	r24, r18
    1dde:	93 1f       	adc	r25, r19
    1de0:	fc 01       	movw	r30, r24
    1de2:	e4 58       	subi	r30, 0x84	; 132
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t data = GPIO_readPin(portid, pin_num);
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	6a 81       	ldd	r22, Y+2	; 0x02
    1dee:	0e 94 75 0c 	call	0x18ea	; 0x18ea <GPIO_readPin>
    1df2:	89 83       	std	Y+1, r24	; 0x01
		if(data == LOGIC_HIGH){
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	a1 f4       	brne	.+40     	; 0x1e22 <DIO_ChannelGroupRead+0xda>
			SET_BIT(* data_ptr,loop);
    1dfa:	ed 89       	ldd	r30, Y+21	; 0x15
    1dfc:	fe 89       	ldd	r31, Y+22	; 0x16
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8e 81       	ldd	r24, Y+6	; 0x06
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_ChannelGroupRead+0xcc>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_ChannelGroupRead+0xc8>
    1e18:	84 2b       	or	r24, r20
    1e1a:	ed 89       	ldd	r30, Y+21	; 0x15
    1e1c:	fe 89       	ldd	r31, Y+22	; 0x16
    1e1e:	80 83       	st	Z, r24
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <DIO_ChannelGroupRead+0x102>
		}else{
			CLEAR_BIT(* data_ptr,loop);
    1e22:	ed 89       	ldd	r30, Y+21	; 0x15
    1e24:	fe 89       	ldd	r31, Y+22	; 0x16
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_ChannelGroupRead+0xf4>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_ChannelGroupRead+0xf0>
    1e40:	80 95       	com	r24
    1e42:	84 23       	and	r24, r20
    1e44:	ed 89       	ldd	r30, Y+21	; 0x15
    1e46:	fe 89       	ldd	r31, Y+22	; 0x16
    1e48:	80 83       	st	Z, r24
{

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8e 83       	std	Y+6, r24	; 0x06
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	98 17       	cp	r25, r24
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <DIO_ChannelGroupRead+0x112>
    1e58:	9e cf       	rjmp	.-196    	; 0x1d96 <DIO_ChannelGroupRead+0x4e>
		}else{
			CLEAR_BIT(* data_ptr,loop);
		}
	}

}
    1e5a:	66 96       	adiw	r28, 0x16	; 22
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	bf 90       	pop	r11
    1e78:	af 90       	pop	r10
    1e7a:	08 95       	ret

00001e7c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	2e 97       	sbiw	r28, 0x0e	; 14
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eaa:	b1 e4       	ldi	r27, 0x41	; 65
    1eac:	8b 87       	std	Y+11, r24	; 0x0b
    1eae:	9c 87       	std	Y+12, r25	; 0x0c
    1eb0:	ad 87       	std	Y+13, r26	; 0x0d
    1eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a e7       	ldi	r20, 0x7A	; 122
    1ec2:	53 e4       	ldi	r21, 0x43	; 67
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8f 83       	std	Y+7, r24	; 0x07
    1ece:	98 87       	std	Y+8, r25	; 0x08
    1ed0:	a9 87       	std	Y+9, r26	; 0x09
    1ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_init+0x7a>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <LCD_init+0xda>
    1f38:	89 e1       	ldi	r24, 0x19	; 25
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_init+0xc8>
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <LCD_init+0xbc>
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_init+0x104>
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	64 e0       	ldi	r22, 0x04	; 4
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	65 e0       	ldi	r22, 0x05	; 5
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	66 e0       	ldi	r22, 0x06	; 6
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	67 e0       	ldi	r22, 0x07	; 7
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1fb0:	83 e3       	ldi	r24, 0x33	; 51
    1fb2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1fb6:	82 e3       	ldi	r24, 0x32	; 50
    1fb8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1fbc:	88 e2       	ldi	r24, 0x28	; 40
    1fbe:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1fc2:	8c e0       	ldi	r24, 0x0C	; 12
    1fc4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    1fce:	2e 96       	adiw	r28, 0x0e	; 14
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	c3 56       	subi	r28, 0x63	; 99
    1fee:	d0 40       	sbci	r29, 0x00	; 0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ed 59       	subi	r30, 0x9D	; 157
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    200c:	fe 01       	movw	r30, r28
    200e:	e1 5a       	subi	r30, 0xA1	; 161
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e8       	ldi	r26, 0x80	; 128
    2018:	bf e3       	ldi	r27, 0x3F	; 63
    201a:	80 83       	st	Z, r24
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	a2 83       	std	Z+2, r26	; 0x02
    2020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	8e 01       	movw	r16, r28
    2024:	05 5a       	subi	r16, 0xA5	; 165
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	e1 5a       	subi	r30, 0xA1	; 161
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	53 e4       	ldi	r21, 0x43	; 67
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	f8 01       	movw	r30, r16
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2050:	fe 01       	movw	r30, r28
    2052:	e5 5a       	subi	r30, 0xA5	; 165
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	44 f4       	brge	.+16     	; 0x207e <LCD_sendCommand+0x9e>
		__ticks = 1;
    206e:	fe 01       	movw	r30, r28
    2070:	e7 5a       	subi	r30, 0xA7	; 167
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
    207c:	64 c0       	rjmp	.+200    	; 0x2146 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    207e:	fe 01       	movw	r30, r28
    2080:	e5 5a       	subi	r30, 0xA5	; 165
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	0c f0       	brlt	.+2      	; 0x209e <LCD_sendCommand+0xbe>
    209c:	43 c0       	rjmp	.+134    	; 0x2124 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	fe 01       	movw	r30, r28
    20a0:	e1 5a       	subi	r30, 0xA1	; 161
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8e 01       	movw	r16, r28
    20be:	07 5a       	subi	r16, 0xA7	; 167
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	f8 01       	movw	r30, r16
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    20d4:	1f c0       	rjmp	.+62     	; 0x2114 <LCD_sendCommand+0x134>
    20d6:	fe 01       	movw	r30, r28
    20d8:	e9 5a       	subi	r30, 0xA9	; 169
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	89 e1       	ldi	r24, 0x19	; 25
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 5a       	subi	r30, 0xA9	; 169
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_sendCommand+0x10e>
    20f2:	fe 01       	movw	r30, r28
    20f4:	e9 5a       	subi	r30, 0xA9	; 169
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	de 01       	movw	r26, r28
    20fe:	a7 5a       	subi	r26, 0xA7	; 167
    2100:	bf 4f       	sbci	r27, 0xFF	; 255
    2102:	fe 01       	movw	r30, r28
    2104:	e7 5a       	subi	r30, 0xA7	; 167
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	9c 93       	st	X, r25
    2112:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	fe 01       	movw	r30, r28
    2116:	e7 5a       	subi	r30, 0xA7	; 167
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	d1 f6       	brne	.-76     	; 0x20d6 <LCD_sendCommand+0xf6>
    2122:	27 c0       	rjmp	.+78     	; 0x2172 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	8e 01       	movw	r16, r28
    2126:	07 5a       	subi	r16, 0xA7	; 167
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e5 5a       	subi	r30, 0xA5	; 165
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	de 01       	movw	r26, r28
    2148:	ab 5a       	subi	r26, 0xAB	; 171
    214a:	bf 4f       	sbci	r27, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5a       	subi	r30, 0xA7	; 167
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	8d 93       	st	X+, r24
    2158:	9c 93       	st	X, r25
    215a:	fe 01       	movw	r30, r28
    215c:	eb 5a       	subi	r30, 0xAB	; 171
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_sendCommand+0x184>
    2168:	fe 01       	movw	r30, r28
    216a:	eb 5a       	subi	r30, 0xAB	; 171
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    217c:	fe 01       	movw	r30, r28
    217e:	ef 5a       	subi	r30, 0xAF	; 175
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	8e 01       	movw	r16, r28
    2194:	03 5b       	subi	r16, 0xB3	; 179
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	ef 5a       	subi	r30, 0xAF	; 175
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a e7       	ldi	r20, 0x7A	; 122
    21ac:	53 e4       	ldi	r21, 0x43	; 67
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	f8 01       	movw	r30, r16
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e3 5b       	subi	r30, 0xB3	; 179
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	44 f4       	brge	.+16     	; 0x21ee <LCD_sendCommand+0x20e>
		__ticks = 1;
    21de:	fe 01       	movw	r30, r28
    21e0:	e5 5b       	subi	r30, 0xB5	; 181
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	64 c0       	rjmp	.+200    	; 0x22b6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21ee:	fe 01       	movw	r30, r28
    21f0:	e3 5b       	subi	r30, 0xB3	; 179
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <LCD_sendCommand+0x22e>
    220c:	43 c0       	rjmp	.+134    	; 0x2294 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	fe 01       	movw	r30, r28
    2210:	ef 5a       	subi	r30, 0xAF	; 175
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8e 01       	movw	r16, r28
    222e:	05 5b       	subi	r16, 0xB5	; 181
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	1f c0       	rjmp	.+62     	; 0x2284 <LCD_sendCommand+0x2a4>
    2246:	fe 01       	movw	r30, r28
    2248:	e7 5b       	subi	r30, 0xB7	; 183
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	89 e1       	ldi	r24, 0x19	; 25
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	fe 01       	movw	r30, r28
    2256:	e7 5b       	subi	r30, 0xB7	; 183
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_sendCommand+0x27e>
    2262:	fe 01       	movw	r30, r28
    2264:	e7 5b       	subi	r30, 0xB7	; 183
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	de 01       	movw	r26, r28
    226e:	a5 5b       	subi	r26, 0xB5	; 181
    2270:	bf 4f       	sbci	r27, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	e5 5b       	subi	r30, 0xB5	; 181
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 93       	st	X, r25
    2282:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	fe 01       	movw	r30, r28
    2286:	e5 5b       	subi	r30, 0xB5	; 181
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	d1 f6       	brne	.-76     	; 0x2246 <LCD_sendCommand+0x266>
    2292:	27 c0       	rjmp	.+78     	; 0x22e2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	8e 01       	movw	r16, r28
    2296:	05 5b       	subi	r16, 0xB5	; 181
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e3 5b       	subi	r30, 0xB3	; 179
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	de 01       	movw	r26, r28
    22b8:	a9 5b       	subi	r26, 0xB9	; 185
    22ba:	bf 4f       	sbci	r27, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5b       	subi	r30, 0xB5	; 181
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	8d 93       	st	X+, r24
    22c8:	9c 93       	st	X, r25
    22ca:	fe 01       	movw	r30, r28
    22cc:	e9 5b       	subi	r30, 0xB9	; 185
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_sendCommand+0x2f4>
    22d8:	fe 01       	movw	r30, r28
    22da:	e9 5b       	subi	r30, 0xB9	; 185
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 59       	subi	r30, 0x9D	; 157
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	80 71       	andi	r24, 0x10	; 16
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	95 95       	asr	r25
    22f4:	87 95       	ror	r24
    22f6:	95 95       	asr	r25
    22f8:	87 95       	ror	r24
    22fa:	95 95       	asr	r25
    22fc:	87 95       	ror	r24
    22fe:	95 95       	asr	r25
    2300:	87 95       	ror	r24
    2302:	98 2f       	mov	r25, r24
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	64 e0       	ldi	r22, 0x04	; 4
    2308:	49 2f       	mov	r20, r25
    230a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    230e:	fe 01       	movw	r30, r28
    2310:	ed 59       	subi	r30, 0x9D	; 157
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 72       	andi	r24, 0x20	; 32
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	95 95       	asr	r25
    2328:	87 95       	ror	r24
    232a:	95 95       	asr	r25
    232c:	87 95       	ror	r24
    232e:	95 95       	asr	r25
    2330:	87 95       	ror	r24
    2332:	98 2f       	mov	r25, r24
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	65 e0       	ldi	r22, 0x05	; 5
    2338:	49 2f       	mov	r20, r25
    233a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    233e:	fe 01       	movw	r30, r28
    2340:	ed 59       	subi	r30, 0x9D	; 157
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	80 74       	andi	r24, 0x40	; 64
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	08 2e       	mov	r0, r24
    2350:	89 2f       	mov	r24, r25
    2352:	00 0c       	add	r0, r0
    2354:	88 1f       	adc	r24, r24
    2356:	99 0b       	sbc	r25, r25
    2358:	00 0c       	add	r0, r0
    235a:	88 1f       	adc	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	98 2f       	mov	r25, r24
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	49 2f       	mov	r20, r25
    2366:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    236a:	fe 01       	movw	r30, r28
    236c:	ed 59       	subi	r30, 0x9D	; 157
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	98 2f       	mov	r25, r24
    2374:	99 1f       	adc	r25, r25
    2376:	99 27       	eor	r25, r25
    2378:	99 1f       	adc	r25, r25
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	67 e0       	ldi	r22, 0x07	; 7
    237e:	49 2f       	mov	r20, r25
    2380:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2384:	fe 01       	movw	r30, r28
    2386:	ed 5b       	subi	r30, 0xBD	; 189
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e8       	ldi	r26, 0x80	; 128
    2390:	bf e3       	ldi	r27, 0x3F	; 63
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	8e 01       	movw	r16, r28
    239c:	01 5c       	subi	r16, 0xC1	; 193
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 5b       	subi	r30, 0xBD	; 189
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a e7       	ldi	r20, 0x7A	; 122
    23b4:	53 e4       	ldi	r21, 0x43	; 67
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c8:	fe 01       	movw	r30, r28
    23ca:	ff 96       	adiw	r30, 0x3f	; 63
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_sendCommand+0x40e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e af       	std	Y+62, r25	; 0x3e
    23ea:	8d af       	std	Y+61, r24	; 0x3d
    23ec:	46 c0       	rjmp	.+140    	; 0x247a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    23ee:	fe 01       	movw	r30, r28
    23f0:	ff 96       	adiw	r30, 0x3f	; 63
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	64 f5       	brge	.+88     	; 0x2462 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	fe 01       	movw	r30, r28
    240c:	ed 5b       	subi	r30, 0xBD	; 189
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e af       	std	Y+62, r25	; 0x3e
    2436:	8d af       	std	Y+61, r24	; 0x3d
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_sendCommand+0x478>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c af       	std	Y+60, r25	; 0x3c
    2440:	8b af       	std	Y+59, r24	; 0x3b
    2442:	8b ad       	ldd	r24, Y+59	; 0x3b
    2444:	9c ad       	ldd	r25, Y+60	; 0x3c
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x466>
    244a:	9c af       	std	Y+60, r25	; 0x3c
    244c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2450:	9e ad       	ldd	r25, Y+62	; 0x3e
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9e af       	std	Y+62, r25	; 0x3e
    2456:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8d ad       	ldd	r24, Y+61	; 0x3d
    245a:	9e ad       	ldd	r25, Y+62	; 0x3e
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_sendCommand+0x45a>
    2460:	16 c0       	rjmp	.+44     	; 0x248e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	fe 01       	movw	r30, r28
    2464:	ff 96       	adiw	r30, 0x3f	; 63
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e af       	std	Y+62, r25	; 0x3e
    2478:	8d af       	std	Y+61, r24	; 0x3d
    247a:	8d ad       	ldd	r24, Y+61	; 0x3d
    247c:	9e ad       	ldd	r25, Y+62	; 0x3e
    247e:	9a af       	std	Y+58, r25	; 0x3a
    2480:	89 af       	std	Y+57, r24	; 0x39
    2482:	89 ad       	ldd	r24, Y+57	; 0x39
    2484:	9a ad       	ldd	r25, Y+58	; 0x3a
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_sendCommand+0x4a6>
    248a:	9a af       	std	Y+58, r25	; 0x3a
    248c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	62 e0       	ldi	r22, 0x02	; 2
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	8d ab       	std	Y+53, r24	; 0x35
    24a2:	9e ab       	std	Y+54, r25	; 0x36
    24a4:	af ab       	std	Y+55, r26	; 0x37
    24a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6d a9       	ldd	r22, Y+53	; 0x35
    24aa:	7e a9       	ldd	r23, Y+54	; 0x36
    24ac:	8f a9       	ldd	r24, Y+55	; 0x37
    24ae:	98 ad       	ldd	r25, Y+56	; 0x38
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	53 e4       	ldi	r21, 0x43	; 67
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	89 ab       	std	Y+49, r24	; 0x31
    24c2:	9a ab       	std	Y+50, r25	; 0x32
    24c4:	ab ab       	std	Y+51, r26	; 0x33
    24c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24c8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ca:	7a a9       	ldd	r23, Y+50	; 0x32
    24cc:	8b a9       	ldd	r24, Y+51	; 0x33
    24ce:	9c a9       	ldd	r25, Y+52	; 0x34
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_sendCommand+0x50a>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    24ea:	69 a9       	ldd	r22, Y+49	; 0x31
    24ec:	7a a9       	ldd	r23, Y+50	; 0x32
    24ee:	8b a9       	ldd	r24, Y+51	; 0x33
    24f0:	9c a9       	ldd	r25, Y+52	; 0x34
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6d a9       	ldd	r22, Y+53	; 0x35
    2504:	7e a9       	ldd	r23, Y+54	; 0x36
    2506:	8f a9       	ldd	r24, Y+55	; 0x37
    2508:	98 ad       	ldd	r25, Y+56	; 0x38
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	98 ab       	std	Y+48, r25	; 0x30
    2528:	8f a7       	std	Y+47, r24	; 0x2f
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_sendCommand+0x56a>
    252c:	89 e1       	ldi	r24, 0x19	; 25
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e a7       	std	Y+46, r25	; 0x2e
    2532:	8d a7       	std	Y+45, r24	; 0x2d
    2534:	8d a5       	ldd	r24, Y+45	; 0x2d
    2536:	9e a5       	ldd	r25, Y+46	; 0x2e
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_sendCommand+0x558>
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8f a5       	ldd	r24, Y+47	; 0x2f
    2542:	98 a9       	ldd	r25, Y+48	; 0x30
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	98 ab       	std	Y+48, r25	; 0x30
    2548:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8f a5       	ldd	r24, Y+47	; 0x2f
    254c:	98 a9       	ldd	r25, Y+48	; 0x30
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_sendCommand+0x54c>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	69 a9       	ldd	r22, Y+49	; 0x31
    2556:	7a a9       	ldd	r23, Y+50	; 0x32
    2558:	8b a9       	ldd	r24, Y+51	; 0x33
    255a:	9c a9       	ldd	r25, Y+52	; 0x34
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	98 ab       	std	Y+48, r25	; 0x30
    2566:	8f a7       	std	Y+47, r24	; 0x2f
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	9c a7       	std	Y+44, r25	; 0x2c
    256e:	8b a7       	std	Y+43, r24	; 0x2b
    2570:	8b a5       	ldd	r24, Y+43	; 0x2b
    2572:	9c a5       	ldd	r25, Y+44	; 0x2c
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_sendCommand+0x594>
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	62 e0       	ldi	r22, 0x02	; 2
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e8       	ldi	r26, 0x80	; 128
    258c:	bf e3       	ldi	r27, 0x3F	; 63
    258e:	8f a3       	std	Y+39, r24	; 0x27
    2590:	98 a7       	std	Y+40, r25	; 0x28
    2592:	a9 a7       	std	Y+41, r26	; 0x29
    2594:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	6f a1       	ldd	r22, Y+39	; 0x27
    2598:	78 a5       	ldd	r23, Y+40	; 0x28
    259a:	89 a5       	ldd	r24, Y+41	; 0x29
    259c:	9a a5       	ldd	r25, Y+42	; 0x2a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a e7       	ldi	r20, 0x7A	; 122
    25a4:	53 e4       	ldi	r21, 0x43	; 67
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8b a3       	std	Y+35, r24	; 0x23
    25b0:	9c a3       	std	Y+36, r25	; 0x24
    25b2:	ad a3       	std	Y+37, r26	; 0x25
    25b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b6:	6b a1       	ldd	r22, Y+35	; 0x23
    25b8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ba:	8d a1       	ldd	r24, Y+37	; 0x25
    25bc:	9e a1       	ldd	r25, Y+38	; 0x26
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9a a3       	std	Y+34, r25	; 0x22
    25d4:	89 a3       	std	Y+33, r24	; 0x21
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    25d8:	6b a1       	ldd	r22, Y+35	; 0x23
    25da:	7c a1       	ldd	r23, Y+36	; 0x24
    25dc:	8d a1       	ldd	r24, Y+37	; 0x25
    25de:	9e a1       	ldd	r25, Y+38	; 0x26
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	6f a1       	ldd	r22, Y+39	; 0x27
    25f2:	78 a5       	ldd	r23, Y+40	; 0x28
    25f4:	89 a5       	ldd	r24, Y+41	; 0x29
    25f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <LCD_sendCommand+0x658>
    261a:	89 e1       	ldi	r24, 0x19	; 25
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	98 a3       	std	Y+32, r25	; 0x20
    2620:	8f 8f       	std	Y+31, r24	; 0x1f
    2622:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2624:	98 a1       	ldd	r25, Y+32	; 0x20
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_sendCommand+0x646>
    262a:	98 a3       	std	Y+32, r25	; 0x20
    262c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	89 a1       	ldd	r24, Y+33	; 0x21
    2630:	9a a1       	ldd	r25, Y+34	; 0x22
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9a a3       	std	Y+34, r25	; 0x22
    2636:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	89 a1       	ldd	r24, Y+33	; 0x21
    263a:	9a a1       	ldd	r25, Y+34	; 0x22
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <LCD_sendCommand+0x63a>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9a a3       	std	Y+34, r25	; 0x22
    2654:	89 a3       	std	Y+33, r24	; 0x21
    2656:	89 a1       	ldd	r24, Y+33	; 0x21
    2658:	9a a1       	ldd	r25, Y+34	; 0x22
    265a:	9e 8f       	std	Y+30, r25	; 0x1e
    265c:	8d 8f       	std	Y+29, r24	; 0x1d
    265e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2660:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_sendCommand+0x682>
    2666:	9e 8f       	std	Y+30, r25	; 0x1e
    2668:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    266a:	fe 01       	movw	r30, r28
    266c:	ed 59       	subi	r30, 0x9D	; 157
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	98 2f       	mov	r25, r24
    2674:	91 70       	andi	r25, 0x01	; 1
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	64 e0       	ldi	r22, 0x04	; 4
    267a:	49 2f       	mov	r20, r25
    267c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2680:	fe 01       	movw	r30, r28
    2682:	ed 59       	subi	r30, 0x9D	; 157
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	82 70       	andi	r24, 0x02	; 2
    268e:	90 70       	andi	r25, 0x00	; 0
    2690:	95 95       	asr	r25
    2692:	87 95       	ror	r24
    2694:	98 2f       	mov	r25, r24
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	49 2f       	mov	r20, r25
    269c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    26a0:	fe 01       	movw	r30, r28
    26a2:	ed 59       	subi	r30, 0x9D	; 157
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	84 70       	andi	r24, 0x04	; 4
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	95 95       	asr	r25
    26b2:	87 95       	ror	r24
    26b4:	95 95       	asr	r25
    26b6:	87 95       	ror	r24
    26b8:	98 2f       	mov	r25, r24
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	66 e0       	ldi	r22, 0x06	; 6
    26be:	49 2f       	mov	r20, r25
    26c0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    26c4:	fe 01       	movw	r30, r28
    26c6:	ed 59       	subi	r30, 0x9D	; 157
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	88 70       	andi	r24, 0x08	; 8
    26d2:	90 70       	andi	r25, 0x00	; 0
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	95 95       	asr	r25
    26da:	87 95       	ror	r24
    26dc:	95 95       	asr	r25
    26de:	87 95       	ror	r24
    26e0:	98 2f       	mov	r25, r24
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	67 e0       	ldi	r22, 0x07	; 7
    26e6:	49 2f       	mov	r20, r25
    26e8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e8       	ldi	r26, 0x80	; 128
    26f2:	bf e3       	ldi	r27, 0x3F	; 63
    26f4:	89 8f       	std	Y+25, r24	; 0x19
    26f6:	9a 8f       	std	Y+26, r25	; 0x1a
    26f8:	ab 8f       	std	Y+27, r26	; 0x1b
    26fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	69 8d       	ldd	r22, Y+25	; 0x19
    26fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a e7       	ldi	r20, 0x7A	; 122
    270a:	53 e4       	ldi	r21, 0x43	; 67
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8d 8b       	std	Y+21, r24	; 0x15
    2716:	9e 8b       	std	Y+22, r25	; 0x16
    2718:	af 8b       	std	Y+23, r26	; 0x17
    271a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    271c:	6d 89       	ldd	r22, Y+21	; 0x15
    271e:	7e 89       	ldd	r23, Y+22	; 0x16
    2720:	8f 89       	ldd	r24, Y+23	; 0x17
    2722:	98 8d       	ldd	r25, Y+24	; 0x18
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9c 8b       	std	Y+20, r25	; 0x14
    277c:	8b 8b       	std	Y+19, r24	; 0x13
    277e:	0f c0       	rjmp	.+30     	; 0x279e <LCD_sendCommand+0x7be>
    2780:	89 e1       	ldi	r24, 0x19	; 25
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9a 8b       	std	Y+18, r25	; 0x12
    2786:	89 8b       	std	Y+17, r24	; 0x11
    2788:	89 89       	ldd	r24, Y+17	; 0x11
    278a:	9a 89       	ldd	r25, Y+18	; 0x12
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_sendCommand+0x7ac>
    2790:	9a 8b       	std	Y+18, r25	; 0x12
    2792:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9c 8b       	std	Y+20, r25	; 0x14
    279c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	8b 89       	ldd	r24, Y+19	; 0x13
    27a0:	9c 89       	ldd	r25, Y+20	; 0x14
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <LCD_sendCommand+0x7a0>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	98 8b       	std	Y+16, r25	; 0x10
    27c2:	8f 87       	std	Y+15, r24	; 0x0f
    27c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c6:	98 89       	ldd	r25, Y+16	; 0x10
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_sendCommand+0x7e8>
    27cc:	98 8b       	std	Y+16, r25	; 0x10
    27ce:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	8b 87       	std	Y+11, r24	; 0x0b
    27e4:	9c 87       	std	Y+12, r25	; 0x0c
    27e6:	ad 87       	std	Y+13, r26	; 0x0d
    27e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a e7       	ldi	r20, 0x7A	; 122
    27f8:	53 e4       	ldi	r21, 0x43	; 67
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8f 83       	std	Y+7, r24	; 0x07
    2804:	98 87       	std	Y+8, r25	; 0x08
    2806:	a9 87       	std	Y+9, r26	; 0x09
    2808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_sendCommand+0x8ac>
    286e:	89 e1       	ldi	r24, 0x19	; 25
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_sendCommand+0x89a>
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <LCD_sendCommand+0x88e>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_sendCommand+0x8d6>
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28be:	cd 59       	subi	r28, 0x9D	; 157
    28c0:	df 4f       	sbci	r29, 0xFF	; 255
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	08 95       	ret

000028d6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	c3 56       	subi	r28, 0x63	; 99
    28e4:	d0 40       	sbci	r29, 0x00	; 0
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	fe 01       	movw	r30, r28
    28f2:	ed 59       	subi	r30, 0x9D	; 157
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2902:	fe 01       	movw	r30, r28
    2904:	e1 5a       	subi	r30, 0xA1	; 161
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e8       	ldi	r26, 0x80	; 128
    290e:	bf e3       	ldi	r27, 0x3F	; 63
    2910:	80 83       	st	Z, r24
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	a2 83       	std	Z+2, r26	; 0x02
    2916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	8e 01       	movw	r16, r28
    291a:	05 5a       	subi	r16, 0xA5	; 165
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	fe 01       	movw	r30, r28
    2920:	e1 5a       	subi	r30, 0xA1	; 161
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a e7       	ldi	r20, 0x7A	; 122
    2932:	53 e4       	ldi	r21, 0x43	; 67
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2946:	fe 01       	movw	r30, r28
    2948:	e5 5a       	subi	r30, 0xA5	; 165
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	44 f4       	brge	.+16     	; 0x2974 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2964:	fe 01       	movw	r30, r28
    2966:	e7 5a       	subi	r30, 0xA7	; 167
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	64 c0       	rjmp	.+200    	; 0x2a3c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5a       	subi	r30, 0xA5	; 165
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	0c f0       	brlt	.+2      	; 0x2994 <LCD_displayCharacter+0xbe>
    2992:	43 c0       	rjmp	.+134    	; 0x2a1a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	fe 01       	movw	r30, r28
    2996:	e1 5a       	subi	r30, 0xA1	; 161
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8e 01       	movw	r16, r28
    29b4:	07 5a       	subi	r16, 0xA7	; 167
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	1f c0       	rjmp	.+62     	; 0x2a0a <LCD_displayCharacter+0x134>
    29cc:	fe 01       	movw	r30, r28
    29ce:	e9 5a       	subi	r30, 0xA9	; 169
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	89 e1       	ldi	r24, 0x19	; 25
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	fe 01       	movw	r30, r28
    29dc:	e9 5a       	subi	r30, 0xA9	; 169
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_displayCharacter+0x10e>
    29e8:	fe 01       	movw	r30, r28
    29ea:	e9 5a       	subi	r30, 0xA9	; 169
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	de 01       	movw	r26, r28
    29f4:	a7 5a       	subi	r26, 0xA7	; 167
    29f6:	bf 4f       	sbci	r27, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	e7 5a       	subi	r30, 0xA7	; 167
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	9c 93       	st	X, r25
    2a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 5a       	subi	r30, 0xA7	; 167
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	d1 f6       	brne	.-76     	; 0x29cc <LCD_displayCharacter+0xf6>
    2a18:	27 c0       	rjmp	.+78     	; 0x2a68 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	07 5a       	subi	r16, 0xA7	; 167
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e5 5a       	subi	r30, 0xA5	; 165
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	de 01       	movw	r26, r28
    2a3e:	ab 5a       	subi	r26, 0xAB	; 171
    2a40:	bf 4f       	sbci	r27, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 5a       	subi	r30, 0xA7	; 167
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	8d 93       	st	X+, r24
    2a4e:	9c 93       	st	X, r25
    2a50:	fe 01       	movw	r30, r28
    2a52:	eb 5a       	subi	r30, 0xAB	; 171
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_displayCharacter+0x184>
    2a5e:	fe 01       	movw	r30, r28
    2a60:	eb 5a       	subi	r30, 0xAB	; 171
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2a72:	fe 01       	movw	r30, r28
    2a74:	ef 5a       	subi	r30, 0xAF	; 175
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e8       	ldi	r26, 0x80	; 128
    2a7e:	bf e3       	ldi	r27, 0x3F	; 63
    2a80:	80 83       	st	Z, r24
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	a2 83       	std	Z+2, r26	; 0x02
    2a86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	8e 01       	movw	r16, r28
    2a8a:	03 5b       	subi	r16, 0xB3	; 179
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 5a       	subi	r30, 0xAF	; 175
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	4a e7       	ldi	r20, 0x7A	; 122
    2aa2:	53 e4       	ldi	r21, 0x43	; 67
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	f8 01       	movw	r30, r16
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e3 5b       	subi	r30, 0xB3	; 179
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	44 f4       	brge	.+16     	; 0x2ae4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 5b       	subi	r30, 0xB5	; 181
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	64 c0       	rjmp	.+200    	; 0x2bac <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e3 5b       	subi	r30, 0xB3	; 179
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	0c f0       	brlt	.+2      	; 0x2b04 <LCD_displayCharacter+0x22e>
    2b02:	43 c0       	rjmp	.+134    	; 0x2b8a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	fe 01       	movw	r30, r28
    2b06:	ef 5a       	subi	r30, 0xAF	; 175
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	8e 01       	movw	r16, r28
    2b24:	05 5b       	subi	r16, 0xB5	; 181
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	f8 01       	movw	r30, r16
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	1f c0       	rjmp	.+62     	; 0x2b7a <LCD_displayCharacter+0x2a4>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e7 5b       	subi	r30, 0xB7	; 183
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	89 e1       	ldi	r24, 0x19	; 25
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 5b       	subi	r30, 0xB7	; 183
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_displayCharacter+0x27e>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e7 5b       	subi	r30, 0xB7	; 183
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	de 01       	movw	r26, r28
    2b64:	a5 5b       	subi	r26, 0xB5	; 181
    2b66:	bf 4f       	sbci	r27, 0xFF	; 255
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e5 5b       	subi	r30, 0xB5	; 181
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	9c 93       	st	X, r25
    2b78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 5b       	subi	r30, 0xB5	; 181
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	d1 f6       	brne	.-76     	; 0x2b3c <LCD_displayCharacter+0x266>
    2b88:	27 c0       	rjmp	.+78     	; 0x2bd8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	05 5b       	subi	r16, 0xB5	; 181
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	e3 5b       	subi	r30, 0xB3	; 179
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	f8 01       	movw	r30, r16
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	de 01       	movw	r26, r28
    2bae:	a9 5b       	subi	r26, 0xB9	; 185
    2bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e5 5b       	subi	r30, 0xB5	; 181
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	8d 93       	st	X+, r24
    2bbe:	9c 93       	st	X, r25
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e9 5b       	subi	r30, 0xB9	; 185
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_displayCharacter+0x2f4>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e9 5b       	subi	r30, 0xB9	; 185
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ed 59       	subi	r30, 0x9D	; 157
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	80 71       	andi	r24, 0x10	; 16
    2be6:	90 70       	andi	r25, 0x00	; 0
    2be8:	95 95       	asr	r25
    2bea:	87 95       	ror	r24
    2bec:	95 95       	asr	r25
    2bee:	87 95       	ror	r24
    2bf0:	95 95       	asr	r25
    2bf2:	87 95       	ror	r24
    2bf4:	95 95       	asr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	49 2f       	mov	r20, r25
    2c00:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	80 72       	andi	r24, 0x20	; 32
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	95 95       	asr	r25
    2c16:	87 95       	ror	r24
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	95 95       	asr	r25
    2c22:	87 95       	ror	r24
    2c24:	95 95       	asr	r25
    2c26:	87 95       	ror	r24
    2c28:	98 2f       	mov	r25, r24
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	65 e0       	ldi	r22, 0x05	; 5
    2c2e:	49 2f       	mov	r20, r25
    2c30:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 59       	subi	r30, 0x9D	; 157
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	80 74       	andi	r24, 0x40	; 64
    2c42:	90 70       	andi	r25, 0x00	; 0
    2c44:	08 2e       	mov	r0, r24
    2c46:	89 2f       	mov	r24, r25
    2c48:	00 0c       	add	r0, r0
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	99 0b       	sbc	r25, r25
    2c4e:	00 0c       	add	r0, r0
    2c50:	88 1f       	adc	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	98 2f       	mov	r25, r24
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	66 e0       	ldi	r22, 0x06	; 6
    2c5a:	49 2f       	mov	r20, r25
    2c5c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2c60:	fe 01       	movw	r30, r28
    2c62:	ed 59       	subi	r30, 0x9D	; 157
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	98 2f       	mov	r25, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	99 27       	eor	r25, r25
    2c6e:	99 1f       	adc	r25, r25
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	67 e0       	ldi	r22, 0x07	; 7
    2c74:	49 2f       	mov	r20, r25
    2c76:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ed 5b       	subi	r30, 0xBD	; 189
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e8       	ldi	r26, 0x80	; 128
    2c86:	bf e3       	ldi	r27, 0x3F	; 63
    2c88:	80 83       	st	Z, r24
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	a2 83       	std	Z+2, r26	; 0x02
    2c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	8e 01       	movw	r16, r28
    2c92:	01 5c       	subi	r16, 0xC1	; 193
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 5b       	subi	r30, 0xBD	; 189
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a e7       	ldi	r20, 0x7A	; 122
    2caa:	53 e4       	ldi	r21, 0x43	; 67
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	a2 83       	std	Z+2, r26	; 0x02
    2cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ff 96       	adiw	r30, 0x3f	; 63
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e af       	std	Y+62, r25	; 0x3e
    2ce0:	8d af       	std	Y+61, r24	; 0x3d
    2ce2:	46 c0       	rjmp	.+140    	; 0x2d70 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ff 96       	adiw	r30, 0x3f	; 63
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	64 f5       	brge	.+88     	; 0x2d58 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 5b       	subi	r30, 0xBD	; 189
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9e af       	std	Y+62, r25	; 0x3e
    2d2c:	8d af       	std	Y+61, r24	; 0x3d
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <LCD_displayCharacter+0x478>
    2d30:	89 e1       	ldi	r24, 0x19	; 25
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9c af       	std	Y+60, r25	; 0x3c
    2d36:	8b af       	std	Y+59, r24	; 0x3b
    2d38:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_displayCharacter+0x466>
    2d40:	9c af       	std	Y+60, r25	; 0x3c
    2d42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d46:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9e af       	std	Y+62, r25	; 0x3e
    2d4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <LCD_displayCharacter+0x45a>
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ff 96       	adiw	r30, 0x3f	; 63
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9e af       	std	Y+62, r25	; 0x3e
    2d6e:	8d af       	std	Y+61, r24	; 0x3d
    2d70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d74:	9a af       	std	Y+58, r25	; 0x3a
    2d76:	89 af       	std	Y+57, r24	; 0x39
    2d78:	89 ad       	ldd	r24, Y+57	; 0x39
    2d7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_displayCharacter+0x4a6>
    2d80:	9a af       	std	Y+58, r25	; 0x3a
    2d82:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	62 e0       	ldi	r22, 0x02	; 2
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	a0 e8       	ldi	r26, 0x80	; 128
    2d94:	bf e3       	ldi	r27, 0x3F	; 63
    2d96:	8d ab       	std	Y+53, r24	; 0x35
    2d98:	9e ab       	std	Y+54, r25	; 0x36
    2d9a:	af ab       	std	Y+55, r26	; 0x37
    2d9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2da0:	7e a9       	ldd	r23, Y+54	; 0x36
    2da2:	8f a9       	ldd	r24, Y+55	; 0x37
    2da4:	98 ad       	ldd	r25, Y+56	; 0x38
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a e7       	ldi	r20, 0x7A	; 122
    2dac:	53 e4       	ldi	r21, 0x43	; 67
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	89 ab       	std	Y+49, r24	; 0x31
    2db8:	9a ab       	std	Y+50, r25	; 0x32
    2dba:	ab ab       	std	Y+51, r26	; 0x33
    2dbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	98 ab       	std	Y+48, r25	; 0x30
    2ddc:	8f a7       	std	Y+47, r24	; 0x2f
    2dde:	3f c0       	rjmp	.+126    	; 0x2e5e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2de0:	69 a9       	ldd	r22, Y+49	; 0x31
    2de2:	7a a9       	ldd	r23, Y+50	; 0x32
    2de4:	8b a9       	ldd	r24, Y+51	; 0x33
    2de6:	9c a9       	ldd	r25, Y+52	; 0x34
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	4c f5       	brge	.+82     	; 0x2e4a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfa:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dfe:	98 ad       	ldd	r25, Y+56	; 0x38
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <LCD_displayCharacter+0x56a>
    2e22:	89 e1       	ldi	r24, 0x19	; 25
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9e a7       	std	Y+46, r25	; 0x2e
    2e28:	8d a7       	std	Y+45, r24	; 0x2d
    2e2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_displayCharacter+0x558>
    2e32:	9e a7       	std	Y+46, r25	; 0x2e
    2e34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e38:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	98 ab       	std	Y+48, r25	; 0x30
    2e3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e42:	98 a9       	ldd	r25, Y+48	; 0x30
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <LCD_displayCharacter+0x54c>
    2e48:	14 c0       	rjmp	.+40     	; 0x2e72 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e50:	9c a9       	ldd	r25, Y+52	; 0x34
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	98 ab       	std	Y+48, r25	; 0x30
    2e5c:	8f a7       	std	Y+47, r24	; 0x2f
    2e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e60:	98 a9       	ldd	r25, Y+48	; 0x30
    2e62:	9c a7       	std	Y+44, r25	; 0x2c
    2e64:	8b a7       	std	Y+43, r24	; 0x2b
    2e66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e68:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_displayCharacter+0x594>
    2e6e:	9c a7       	std	Y+44, r25	; 0x2c
    2e70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a0 e8       	ldi	r26, 0x80	; 128
    2e82:	bf e3       	ldi	r27, 0x3F	; 63
    2e84:	8f a3       	std	Y+39, r24	; 0x27
    2e86:	98 a7       	std	Y+40, r25	; 0x28
    2e88:	a9 a7       	std	Y+41, r26	; 0x29
    2e8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e90:	89 a5       	ldd	r24, Y+41	; 0x29
    2e92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a e7       	ldi	r20, 0x7A	; 122
    2e9a:	53 e4       	ldi	r21, 0x43	; 67
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	8b a3       	std	Y+35, r24	; 0x23
    2ea6:	9c a3       	std	Y+36, r25	; 0x24
    2ea8:	ad a3       	std	Y+37, r26	; 0x25
    2eaa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eac:	6b a1       	ldd	r22, Y+35	; 0x23
    2eae:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	2c f4       	brge	.+10     	; 0x2ece <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9a a3       	std	Y+34, r25	; 0x22
    2eca:	89 a3       	std	Y+33, r24	; 0x21
    2ecc:	3f c0       	rjmp	.+126    	; 0x2f4c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2ece:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	4c f5       	brge	.+82     	; 0x2f38 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eea:	89 a5       	ldd	r24, Y+41	; 0x29
    2eec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9a a3       	std	Y+34, r25	; 0x22
    2f0c:	89 a3       	std	Y+33, r24	; 0x21
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <LCD_displayCharacter+0x658>
    2f10:	89 e1       	ldi	r24, 0x19	; 25
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	98 a3       	std	Y+32, r25	; 0x20
    2f16:	8f 8f       	std	Y+31, r24	; 0x1f
    2f18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <LCD_displayCharacter+0x646>
    2f20:	98 a3       	std	Y+32, r25	; 0x20
    2f22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	89 a1       	ldd	r24, Y+33	; 0x21
    2f26:	9a a1       	ldd	r25, Y+34	; 0x22
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	9a a3       	std	Y+34, r25	; 0x22
    2f2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f30:	9a a1       	ldd	r25, Y+34	; 0x22
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <LCD_displayCharacter+0x63a>
    2f36:	14 c0       	rjmp	.+40     	; 0x2f60 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9a a3       	std	Y+34, r25	; 0x22
    2f4a:	89 a3       	std	Y+33, r24	; 0x21
    2f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f50:	9e 8f       	std	Y+30, r25	; 0x1e
    2f52:	8d 8f       	std	Y+29, r24	; 0x1d
    2f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_displayCharacter+0x682>
    2f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2f60:	fe 01       	movw	r30, r28
    2f62:	ed 59       	subi	r30, 0x9D	; 157
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	98 2f       	mov	r25, r24
    2f6a:	91 70       	andi	r25, 0x01	; 1
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	64 e0       	ldi	r22, 0x04	; 4
    2f70:	49 2f       	mov	r20, r25
    2f72:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 59       	subi	r30, 0x9D	; 157
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	82 70       	andi	r24, 0x02	; 2
    2f84:	90 70       	andi	r25, 0x00	; 0
    2f86:	95 95       	asr	r25
    2f88:	87 95       	ror	r24
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	65 e0       	ldi	r22, 0x05	; 5
    2f90:	49 2f       	mov	r20, r25
    2f92:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2f96:	fe 01       	movw	r30, r28
    2f98:	ed 59       	subi	r30, 0x9D	; 157
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	84 70       	andi	r24, 0x04	; 4
    2fa4:	90 70       	andi	r25, 0x00	; 0
    2fa6:	95 95       	asr	r25
    2fa8:	87 95       	ror	r24
    2faa:	95 95       	asr	r25
    2fac:	87 95       	ror	r24
    2fae:	98 2f       	mov	r25, r24
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	66 e0       	ldi	r22, 0x06	; 6
    2fb4:	49 2f       	mov	r20, r25
    2fb6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ed 59       	subi	r30, 0x9D	; 157
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	88 70       	andi	r24, 0x08	; 8
    2fc8:	90 70       	andi	r25, 0x00	; 0
    2fca:	95 95       	asr	r25
    2fcc:	87 95       	ror	r24
    2fce:	95 95       	asr	r25
    2fd0:	87 95       	ror	r24
    2fd2:	95 95       	asr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	67 e0       	ldi	r22, 0x07	; 7
    2fdc:	49 2f       	mov	r20, r25
    2fde:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a0 e8       	ldi	r26, 0x80	; 128
    2fe8:	bf e3       	ldi	r27, 0x3F	; 63
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
    2fee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	53 e4       	ldi	r21, 0x43	; 67
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8d 8b       	std	Y+21, r24	; 0x15
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	af 8b       	std	Y+23, r26	; 0x17
    3010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <LCD_displayCharacter+0x7be>
    3076:	89 e1       	ldi	r24, 0x19	; 25
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_displayCharacter+0x7ac>
    3086:	9a 8b       	std	Y+18, r25	; 0x12
    3088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <LCD_displayCharacter+0x7a0>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <LCD_displayCharacter+0x7e8>
    30c2:	98 8b       	std	Y+16, r25	; 0x10
    30c4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <GPIO_writePin>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e8       	ldi	r26, 0x80	; 128
    30d6:	bf e3       	ldi	r27, 0x3F	; 63
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
    30da:	9c 87       	std	Y+12, r25	; 0x0c
    30dc:	ad 87       	std	Y+13, r26	; 0x0d
    30de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	53 e4       	ldi	r21, 0x43	; 67
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8f 83       	std	Y+7, r24	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	a9 87       	std	Y+9, r26	; 0x09
    30fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <LCD_displayCharacter+0x8ac>
    3164:	89 e1       	ldi	r24, 0x19	; 25
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_displayCharacter+0x89a>
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <LCD_displayCharacter+0x88e>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_displayCharacter+0x8d6>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31b4:	cd 59       	subi	r28, 0x9D	; 157
    31b6:	df 4f       	sbci	r29, 0xFF	; 255
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	08 95       	ret

000031cc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <LCD_displayString+0x6>
    31d2:	0f 92       	push	r0
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	9b 83       	std	Y+3, r25	; 0x03
    31da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31dc:	19 82       	std	Y+1, r1	; 0x01
    31de:	0e c0       	rjmp	.+28     	; 0x31fc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	e2 0f       	add	r30, r18
    31ee:	f3 1f       	adc	r31, r19
    31f0:	80 81       	ld	r24, Z
    31f2:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_displayCharacter>
		i++;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	9b 81       	ldd	r25, Y+3	; 0x03
    3206:	fc 01       	movw	r30, r24
    3208:	e2 0f       	add	r30, r18
    320a:	f3 1f       	adc	r31, r19
    320c:	80 81       	ld	r24, Z
    320e:	88 23       	and	r24, r24
    3210:	39 f7       	brne	.-50     	; 0x31e0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	00 d0       	rcall	.+0      	; 0x3224 <LCD_moveCursor+0x6>
    3224:	00 d0       	rcall	.+0      	; 0x3226 <LCD_moveCursor+0x8>
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	3d 83       	std	Y+5, r19	; 0x05
    3238:	2c 83       	std	Y+4, r18	; 0x04
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	91 05       	cpc	r25, r1
    3242:	c1 f0       	breq	.+48     	; 0x3274 <LCD_moveCursor+0x56>
    3244:	2c 81       	ldd	r18, Y+4	; 0x04
    3246:	3d 81       	ldd	r19, Y+5	; 0x05
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	31 05       	cpc	r19, r1
    324c:	2c f4       	brge	.+10     	; 0x3258 <LCD_moveCursor+0x3a>
    324e:	8c 81       	ldd	r24, Y+4	; 0x04
    3250:	9d 81       	ldd	r25, Y+5	; 0x05
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	61 f0       	breq	.+24     	; 0x326e <LCD_moveCursor+0x50>
    3256:	19 c0       	rjmp	.+50     	; 0x328a <LCD_moveCursor+0x6c>
    3258:	2c 81       	ldd	r18, Y+4	; 0x04
    325a:	3d 81       	ldd	r19, Y+5	; 0x05
    325c:	22 30       	cpi	r18, 0x02	; 2
    325e:	31 05       	cpc	r19, r1
    3260:	69 f0       	breq	.+26     	; 0x327c <LCD_moveCursor+0x5e>
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	9d 81       	ldd	r25, Y+5	; 0x05
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	91 05       	cpc	r25, r1
    326a:	61 f0       	breq	.+24     	; 0x3284 <LCD_moveCursor+0x66>
    326c:	0e c0       	rjmp	.+28     	; 0x328a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	0b c0       	rjmp	.+22     	; 0x328a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	80 5c       	subi	r24, 0xC0	; 192
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	07 c0       	rjmp	.+14     	; 0x328a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	80 5f       	subi	r24, 0xF0	; 240
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	03 c0       	rjmp	.+6      	; 0x328a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	80 5b       	subi	r24, 0xB0	; 176
    3288:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	80 68       	ori	r24, 0x80	; 128
    328e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <LCD_displayStringRowColumn+0x6>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <LCD_displayStringRowColumn+0x8>
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	6a 83       	std	Y+2, r22	; 0x02
    32b2:	5c 83       	std	Y+4, r21	; 0x04
    32b4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	6a 81       	ldd	r22, Y+2	; 0x02
    32ba:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	62 97       	sbiw	r28, 0x12	; 18
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    32ec:	89 89       	ldd	r24, Y+17	; 0x11
    32ee:	9a 89       	ldd	r25, Y+18	; 0x12
    32f0:	9e 01       	movw	r18, r28
    32f2:	2f 5f       	subi	r18, 0xFF	; 255
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	b9 01       	movw	r22, r18
    32f8:	4a e0       	ldi	r20, 0x0A	; 10
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <itoa>
   LCD_displayString(buff); /* Display the string */
    3300:	ce 01       	movw	r24, r28
    3302:	01 96       	adiw	r24, 0x01	; 1
    3304:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
}
    3308:	62 96       	adiw	r28, 0x12	; 18
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <main>:
#include "lcd.h"

long timeCounter = 0;

int main(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    3336:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <DIO_init>
	LCD_init();
    333a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_init>

	SREG |=(1<<7);			// I bit Enabled
    333e:	af e5       	ldi	r26, 0x5F	; 95
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	ef e5       	ldi	r30, 0x5F	; 95
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	80 68       	ori	r24, 0x80	; 128
    334a:	8c 93       	st	X, r24
	SetPollingTime(100);
    334c:	84 e6       	ldi	r24, 0x64	; 100
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 2d 1a 	call	0x345a	; 0x345a <SetPollingTime>
	Timer2_Init_CTC_Mode(50);	// 1 tick = 2ms , then 50 ticks = 100ms
    3354:	82 e3       	ldi	r24, 0x32	; 50
    3356:	0e 94 82 09 	call	0x1304	; 0x1304 <Timer2_Init_CTC_Mode>
    335a:	ff cf       	rjmp	.-2      	; 0x335a <main+0x2c>

0000335c <__vector_4>:

	}
}

ISR(TIMER2_COMP_vect)
{
    335c:	1f 92       	push	r1
    335e:	0f 92       	push	r0
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	0f 92       	push	r0
    3364:	11 24       	eor	r1, r1
    3366:	2f 93       	push	r18
    3368:	3f 93       	push	r19
    336a:	4f 93       	push	r20
    336c:	5f 93       	push	r21
    336e:	6f 93       	push	r22
    3370:	7f 93       	push	r23
    3372:	8f 93       	push	r24
    3374:	9f 93       	push	r25
    3376:	af 93       	push	r26
    3378:	bf 93       	push	r27
    337a:	ef 93       	push	r30
    337c:	ff 93       	push	r31
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
	Poll();
    3386:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <Poll>
}
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	ff 91       	pop	r31
    3390:	ef 91       	pop	r30
    3392:	bf 91       	pop	r27
    3394:	af 91       	pop	r26
    3396:	9f 91       	pop	r25
    3398:	8f 91       	pop	r24
    339a:	7f 91       	pop	r23
    339c:	6f 91       	pop	r22
    339e:	5f 91       	pop	r21
    33a0:	4f 91       	pop	r20
    33a2:	3f 91       	pop	r19
    33a4:	2f 91       	pop	r18
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <Poll>:

int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;
void Poll(void)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <Poll+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <Poll+0x8>
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    33bc:	80 91 77 00 	lds	r24, 0x0077
    33c0:	90 91 78 00 	lds	r25, 0x0078
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	91 f0       	breq	.+36     	; 0x33ec <Poll+0x3c>
    33c8:	80 91 96 00 	lds	r24, 0x0096
    33cc:	90 91 97 00 	lds	r25, 0x0097
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	61 f4       	brne	.+24     	; 0x33ec <Poll+0x3c>
	{
		States_GroupType data;
		data = Get_Data();
    33d4:	0e 94 9e 09 	call	0x133c	; 0x133c <Get_Data>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	9a 83       	std	Y+2, r25	; 0x02
    33e0:	ab 83       	std	Y+3, r26	; 0x03
    33e2:	bc 83       	std	Y+4, r27	; 0x04
		Handle_data(&data);
    33e4:	ce 01       	movw	r24, r28
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Handle_data>

	}
	counter++;
    33ec:	80 91 96 00 	lds	r24, 0x0096
    33f0:	90 91 97 00 	lds	r25, 0x0097
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	90 93 97 00 	sts	0x0097, r25
    33fa:	80 93 96 00 	sts	0x0096, r24
	counter = counter%polling_counter;
    33fe:	80 91 96 00 	lds	r24, 0x0096
    3402:	90 91 97 00 	lds	r25, 0x0097
    3406:	20 91 79 00 	lds	r18, 0x0079
    340a:	30 91 7a 00 	lds	r19, 0x007A
    340e:	b9 01       	movw	r22, r18
    3410:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__divmodhi4>
    3414:	90 93 97 00 	sts	0x0097, r25
    3418:	80 93 96 00 	sts	0x0096, r24
}
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <StartPolling>:

void StartPolling(void)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	90 93 78 00 	sts	0x0078, r25
    343a:	80 93 77 00 	sts	0x0077, r24
}
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <StopPolling>:

void StopPolling(void)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    344c:	10 92 78 00 	sts	0x0078, r1
    3450:	10 92 77 00 	sts	0x0077, r1
}
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <SetPollingTime+0x6>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/50;
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	22 e3       	ldi	r18, 0x32	; 50
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	b9 01       	movw	r22, r18
    3472:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__divmodhi4>
    3476:	cb 01       	movw	r24, r22
    3478:	90 93 7a 00 	sts	0x007A, r25
    347c:	80 93 79 00 	sts	0x0079, r24

}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <PWM_Timer0_Start>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	0f 92       	push	r0
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	89 83       	std	Y+1, r24	; 0x01
	/*	The function responsible for trigger the Timer0 with the PWM Mode. */

	TCNT0 = 0; //Set Timer Initial value
    3496:	e2 e5       	ldi	r30, 0x52	; 82
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	10 82       	st	Z, r1
	OCR0 = duty_cycle; // Set Compare Value
    349c:	ec e5       	ldi	r30, 0x5C	; 92
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT); //Setup the PWM pin as Output pin
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	63 e0       	ldi	r22, 0x03	; 3
    34a8:	41 e0       	ldi	r20, 0x01	; 1
    34aa:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 = (500Hz) .. CS00=0 CS01=1 CS02=0
	 */
	SET_BIT(TCCR0,WGM00);
    34ae:	a3 e5       	ldi	r26, 0x53	; 83
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e3 e5       	ldi	r30, 0x53	; 83
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	80 64       	ori	r24, 0x40	; 64
    34ba:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    34bc:	a3 e5       	ldi	r26, 0x53	; 83
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e3 e5       	ldi	r30, 0x53	; 83
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	88 60       	ori	r24, 0x08	; 8
    34c8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    34ca:	a3 e5       	ldi	r26, 0x53	; 83
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e3 e5       	ldi	r30, 0x53	; 83
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	80 62       	ori	r24, 0x20	; 32
    34d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    34d8:	a3 e5       	ldi	r26, 0x53	; 83
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e3 e5       	ldi	r30, 0x53	; 83
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	82 60       	ori	r24, 0x02	; 2
    34e4:	8c 93       	st	X, r24
}
    34e6:	0f 90       	pop	r0
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <__divmodhi4>:
    34ee:	97 fb       	bst	r25, 7
    34f0:	09 2e       	mov	r0, r25
    34f2:	07 26       	eor	r0, r23
    34f4:	0a d0       	rcall	.+20     	; 0x350a <__divmodhi4_neg1>
    34f6:	77 fd       	sbrc	r23, 7
    34f8:	04 d0       	rcall	.+8      	; 0x3502 <__divmodhi4_neg2>
    34fa:	0c d0       	rcall	.+24     	; 0x3514 <__udivmodhi4>
    34fc:	06 d0       	rcall	.+12     	; 0x350a <__divmodhi4_neg1>
    34fe:	00 20       	and	r0, r0
    3500:	1a f4       	brpl	.+6      	; 0x3508 <__divmodhi4_exit>

00003502 <__divmodhi4_neg2>:
    3502:	70 95       	com	r23
    3504:	61 95       	neg	r22
    3506:	7f 4f       	sbci	r23, 0xFF	; 255

00003508 <__divmodhi4_exit>:
    3508:	08 95       	ret

0000350a <__divmodhi4_neg1>:
    350a:	f6 f7       	brtc	.-4      	; 0x3508 <__divmodhi4_exit>
    350c:	90 95       	com	r25
    350e:	81 95       	neg	r24
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	08 95       	ret

00003514 <__udivmodhi4>:
    3514:	aa 1b       	sub	r26, r26
    3516:	bb 1b       	sub	r27, r27
    3518:	51 e1       	ldi	r21, 0x11	; 17
    351a:	07 c0       	rjmp	.+14     	; 0x352a <__udivmodhi4_ep>

0000351c <__udivmodhi4_loop>:
    351c:	aa 1f       	adc	r26, r26
    351e:	bb 1f       	adc	r27, r27
    3520:	a6 17       	cp	r26, r22
    3522:	b7 07       	cpc	r27, r23
    3524:	10 f0       	brcs	.+4      	; 0x352a <__udivmodhi4_ep>
    3526:	a6 1b       	sub	r26, r22
    3528:	b7 0b       	sbc	r27, r23

0000352a <__udivmodhi4_ep>:
    352a:	88 1f       	adc	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	5a 95       	dec	r21
    3530:	a9 f7       	brne	.-22     	; 0x351c <__udivmodhi4_loop>
    3532:	80 95       	com	r24
    3534:	90 95       	com	r25
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	08 95       	ret

0000353c <__prologue_saves__>:
    353c:	2f 92       	push	r2
    353e:	3f 92       	push	r3
    3540:	4f 92       	push	r4
    3542:	5f 92       	push	r5
    3544:	6f 92       	push	r6
    3546:	7f 92       	push	r7
    3548:	8f 92       	push	r8
    354a:	9f 92       	push	r9
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	ca 1b       	sub	r28, r26
    3566:	db 0b       	sbc	r29, r27
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	09 94       	ijmp

00003574 <__epilogue_restores__>:
    3574:	2a 88       	ldd	r2, Y+18	; 0x12
    3576:	39 88       	ldd	r3, Y+17	; 0x11
    3578:	48 88       	ldd	r4, Y+16	; 0x10
    357a:	5f 84       	ldd	r5, Y+15	; 0x0f
    357c:	6e 84       	ldd	r6, Y+14	; 0x0e
    357e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3580:	8c 84       	ldd	r8, Y+12	; 0x0c
    3582:	9b 84       	ldd	r9, Y+11	; 0x0b
    3584:	aa 84       	ldd	r10, Y+10	; 0x0a
    3586:	b9 84       	ldd	r11, Y+9	; 0x09
    3588:	c8 84       	ldd	r12, Y+8	; 0x08
    358a:	df 80       	ldd	r13, Y+7	; 0x07
    358c:	ee 80       	ldd	r14, Y+6	; 0x06
    358e:	fd 80       	ldd	r15, Y+5	; 0x05
    3590:	0c 81       	ldd	r16, Y+4	; 0x04
    3592:	1b 81       	ldd	r17, Y+3	; 0x03
    3594:	aa 81       	ldd	r26, Y+2	; 0x02
    3596:	b9 81       	ldd	r27, Y+1	; 0x01
    3598:	ce 0f       	add	r28, r30
    359a:	d1 1d       	adc	r29, r1
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	ed 01       	movw	r28, r26
    35a8:	08 95       	ret

000035aa <itoa>:
    35aa:	fb 01       	movw	r30, r22
    35ac:	9f 01       	movw	r18, r30
    35ae:	e8 94       	clt
    35b0:	42 30       	cpi	r20, 0x02	; 2
    35b2:	c4 f0       	brlt	.+48     	; 0x35e4 <itoa+0x3a>
    35b4:	45 32       	cpi	r20, 0x25	; 37
    35b6:	b4 f4       	brge	.+44     	; 0x35e4 <itoa+0x3a>
    35b8:	4a 30       	cpi	r20, 0x0A	; 10
    35ba:	29 f4       	brne	.+10     	; 0x35c6 <itoa+0x1c>
    35bc:	97 fb       	bst	r25, 7
    35be:	1e f4       	brtc	.+6      	; 0x35c6 <itoa+0x1c>
    35c0:	90 95       	com	r25
    35c2:	81 95       	neg	r24
    35c4:	9f 4f       	sbci	r25, 0xFF	; 255
    35c6:	64 2f       	mov	r22, r20
    35c8:	77 27       	eor	r23, r23
    35ca:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__udivmodhi4>
    35ce:	80 5d       	subi	r24, 0xD0	; 208
    35d0:	8a 33       	cpi	r24, 0x3A	; 58
    35d2:	0c f0       	brlt	.+2      	; 0x35d6 <itoa+0x2c>
    35d4:	89 5d       	subi	r24, 0xD9	; 217
    35d6:	81 93       	st	Z+, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	a1 f7       	brne	.-24     	; 0x35c6 <itoa+0x1c>
    35de:	16 f4       	brtc	.+4      	; 0x35e4 <itoa+0x3a>
    35e0:	5d e2       	ldi	r21, 0x2D	; 45
    35e2:	51 93       	st	Z+, r21
    35e4:	10 82       	st	Z, r1
    35e6:	c9 01       	movw	r24, r18
    35e8:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <strrev>

000035ec <strrev>:
    35ec:	dc 01       	movw	r26, r24
    35ee:	fc 01       	movw	r30, r24
    35f0:	67 2f       	mov	r22, r23
    35f2:	71 91       	ld	r23, Z+
    35f4:	77 23       	and	r23, r23
    35f6:	e1 f7       	brne	.-8      	; 0x35f0 <strrev+0x4>
    35f8:	32 97       	sbiw	r30, 0x02	; 2
    35fa:	04 c0       	rjmp	.+8      	; 0x3604 <strrev+0x18>
    35fc:	7c 91       	ld	r23, X
    35fe:	6d 93       	st	X+, r22
    3600:	70 83       	st	Z, r23
    3602:	62 91       	ld	r22, -Z
    3604:	ae 17       	cp	r26, r30
    3606:	bf 07       	cpc	r27, r31
    3608:	c8 f3       	brcs	.-14     	; 0x35fc <strrev+0x10>
    360a:	08 95       	ret

0000360c <_exit>:
    360c:	f8 94       	cli

0000360e <__stop_program>:
    360e:	ff cf       	rjmp	.-2      	; 0x360e <__stop_program>
